{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","myMouse","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","renderCircle","sound","particlesSmoke","registerKey","Image","render","downHandler","upgrade","creeps","sell","towers","renderScore","flyingScores","tower1","firstTime","moneyRequired","Math","specs","cost","console","enemyCreator","money","undefined","totalElapsedTime","towerType","level","elapsedTime","log","towerClicked","upgradeCount","floor","delay","power","gameSound","playSound","towerLength","length","i","cellWidth","y","center","x","towerSold","splice","selectedTower","getAttribute","towerTypeSelected","parseInt","mouse","isActive","e","towerRadius","canCreated","canPlace","push","createTower","GameState","assets","canvas","getBoundingClientRect","canvasPosition","findSelectedTower","preventDefault","document","getElementsByClassName","towerElements","style","display","getElementById","myId","stopAllSound","unMuteSound","levels","sendNextWave","wave","enemyCreators","life","cancelNextRequest","add","score","createLevels","makeParticle2","register","showScreen","rows","j","Mouse","cellSet","row","addEventListener","createElement","towerElements2","muteVolume","startButton","startNewWave","clientX","top","update","clientY","localStorage","start","particleSystem","creepsLength","creep","reachRight","player","reachBottom","health","maxHealth","creepDied","totalCreepKilled","textEvent","MovingEvents","rotation","moveRate","rotateRate","PI","continousSpeed","yDirection","size","towersLength","tower","flying","type","radius","xDirection","FlyingScore","canShoot","direction","target","bulletStartY","bulletController","addBullet","bulletStartX","isColliding","setTarget","scorelength","newEnemy","createEnemy","innerHTML","waveString","maxWave","nextWave","totalTowerValues","forEach","width","context","fillStyle","clearRect","placementFlag","cols","x1","y1","leftOffset","fillRect","topOffset","stroke","beginPath","moveTo","lineTo","drawTower","height","fill","drawRectangle","Sound","loadAudio","performance","requestAnimationFrame","font","processInput","time","setTimeout","gameLoop"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.myMouse = null;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.renderCircle = false;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.creeps = [];\r\n    this.towers = [];\r\n    this.registerKey = this.registerKey.bind(this);\r\n    this.flyingScores = [];\r\n    this.tower1 = new Image();\r\n    this.tower1.src = \"assets/turret/turret-5-3.png\";\r\n    this.render = this.render.bind(this);\r\n    this.firstTime = true;\r\n    this.downHandler = this.downHandler.bind(this);\r\n    this.enemyCreator = null;\r\n    this.canPlace = false;\r\n    this.upgrade = this.upgrade.bind(this);\r\n    this.sell = this.sell.bind(this);\r\n    this.renderScore = this.renderScore.bind(this);\r\n    this.startNewWave = this.startNewWave.bind(this);\r\n    this.level = 0;\r\n    this.towerType = [\"Gun\", \"Missile\", \"Air\", \"Mix (Air + Ground)\"];\r\n  }\r\n\r\n  upgrade(elapsedTime) {\r\n    let moneyRequired = Math.floor(0.5 * towerClicked.specs.cost);\r\n    console.log(towerClicked)\r\n    if (moneyRequired <= money) {\r\n      if (towerClicked) {\r\n        if (towerClicked.totalElapsedTime == undefined) {\r\n          towerClicked.totalElapsedTime = 0;\r\n        } else {\r\n          towerClicked.totalElapsedTime += elapsedTime;\r\n          if (towerClicked.totalElapsedTime >= 200) {\r\n            console.log(\"upgraded\");\r\n            towerClicked.totalElapsedTime -= 200;\r\n            if (!towerClicked.upgradeCount) {\r\n              towerClicked.upgradeCount = 1;\r\n            } else {\r\n              if (towerClicked.upgradeCount >= 3) {\r\n                return;\r\n              } else {\r\n                towerClicked.upgradeCount = towerClicked.upgradeCount + 1;\r\n                towerClicked.delay = Math.floor(towerClicked.delay * 0.7);\r\n                towerClicked.specs.power = towerClicked.specs.power + 1;\r\n                money -= moneyRequired;\r\n                gameSound.playSound(\"add\");\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  sell() {\r\n    if (towerClicked) {\r\n      let towerLength = this.towers.length;\r\n      for (let i = 0; i < towerLength; i++) {\r\n        if (\r\n          isColliding2(\r\n            this.towers[i].specs.center.x - cellWidth / 2,\r\n            this.towers[i].specs.center.y - cellWidth / 2,\r\n            cellWidth,\r\n            towerClicked.specs.center.x - cellWidth / 2,\r\n            towerClicked.specs.center.y - cellWidth / 2,\r\n            cellWidth\r\n          )\r\n        ) {\r\n          money += Math.floor(0.7 * towerClicked.specs.cost);\r\n          towerSold(this.towers[i].specs.center.x - cellWidth / 2, this.towers[i].specs.center.y - cellWidth / 2);\r\n          this.towers.splice(i, 1);\r\n          gameSound.playSound(\"die\");\r\n          towerClicked = null;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createElement() {\r\n    selectedTower = this.getAttribute(\"data-myName\");\r\n    towerRadius = this.getAttribute(\"data-radius\");\r\n    moneyRequired = parseInt(this.getAttribute(\"data-cost\"));\r\n    towerTypeSelected = parseInt(this.getAttribute(\"data-type\"));\r\n    if (moneyRequired <= money) {\r\n      renderCircle = true;\r\n      mouse.isActive = true;\r\n    }\r\n  }\r\n\r\n  downHandler(e, elapsedTime) {\r\n    if (mouse.isActive) {\r\n      firstTime = true;\r\n      mouse.isActive = false;\r\n      renderCircle = false;\r\n      let decision = canCreated(this.towers) && this.canPlace;\r\n      if (decision) {\r\n\r\n\r\n        //blockage check code\r\n        // ----------------------------------------------------\r\n        // if(levels[this.level].wave >=0){\r\n        //   if (levels[this.level].enemyCreators[levels[this.level].wave].position == \"top\") {\r\n\r\n        //     //the new tower that was placed recently got into line of the creeps so wont be added to scene\r\n        //     if (\r\n        //       isColliding3(\r\n        //         Math.floor(mouse.x / cellWidth) * cellWidth,\r\n        //         Math.floor((mouse.y - 200) / cellWidth) * cellWidth + 200,\r\n        //         10,\r\n        //         10,\r\n        //         175,\r\n        //         200,\r\n        //         225,\r\n        //         600\r\n        //       )\r\n        //     ) {\r\n        //       block = true;\r\n        //       console.log(\"it is blocking the path\");\r\n        //       return;\r\n        //     }\r\n        //   } \r\n        //   //the new tower that was placed recently got into line of the creeps so wont be added to scene\r\n        //   else if (levels[this.level].enemyCreators[levels[this.level].wave].position == \"left\") {\r\n        //     if (\r\n        //       isColliding3(\r\n        //         Math.floor(mouse.x / cellWidth) * cellWidth,\r\n        //         Math.floor((mouse.y - 200) / cellWidth) * cellWidth + 200,\r\n        //         10,\r\n        //         10,\r\n        //         0,\r\n        //         400,\r\n        //         600,\r\n        //         200\r\n        //       )\r\n        //     ) {\r\n        //       block = true\r\n        //       console.log(\"it is blocking the path\");\r\n        //       return;\r\n        //     }\r\n        //   }\r\n        // }\r\n\r\n        // ------------------------------------------------------------------\r\n\r\n        this.towers.push(\r\n          createTower(\r\n            GameState.assets[selectedTower],\r\n            Math.floor(mouse.x / cellWidth) * cellWidth,\r\n            Math.floor((mouse.y - 200) / cellWidth) * cellWidth + 200,\r\n            2500,\r\n            1,\r\n            towerRadius,\r\n            moneyRequired,\r\n            towerTypeSelected\r\n          )\r\n        );\r\n        money = money - moneyRequired;\r\n        moneyRequired = 0;\r\n        towerTypeSelected = 0;\r\n        gameSound.playSound(\"add\");\r\n      }\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n    } else {\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n      mouse.x = e.clientX - canvasPosition.left;\r\n      mouse.y = e.clientY - canvasPosition.top;\r\n      findSelectedTower(this.towers);\r\n    }\r\n  }\r\n\r\n  muteVolume(e) {\r\n    e.preventDefault();\r\n    var towerElements = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].style.display = \"block\";\r\n    }\r\n    let myId = this.getAttribute(\"data-myId\");\r\n    document.getElementById(myId).style.display = \"none\";\r\n    if (myId == \"muteButton\") {\r\n      gameSound.stopAllSound();\r\n    }\r\n    if (myId == \"unmuteButton\") {\r\n      gameSound.unMuteSound();\r\n    }\r\n  }\r\n\r\n  startNewWave(e) {\r\n    e.preventDefault();\r\n    console.log(\"start button clicked\");\r\n    this.enemyCreator = levels[this.level].sendNextWave();\r\n    if (levels[this.level].wave >= levels[this.level].enemyCreators.length) {\r\n      this.level++;\r\n      this.towers = [];\r\n    }\r\n    nextWave = false;\r\n    GameState.cancelNextRequest = false;\r\n  }\r\n\r\n  checkCanProceed() {\r\n    if (this.level > 2 || GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      add(score);\r\n    }\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    createLevels();\r\n    makeParticle2();\r\n    this.myMouse = new Mouse();\r\n    GameState.cancelNextRequest = false;\r\n    GameState.life = 10;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push({\r\n          x: i,\r\n          y: j,\r\n        });\r\n      }\r\n      cellSet.push(row);\r\n    }\r\n\r\n    towerElements = document.getElementsByClassName(\"tower\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].addEventListener(\"click\", this.createElement, false);\r\n    }\r\n\r\n    towerElements2 = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements2.length; i++) {\r\n      towerElements2[i].addEventListener(\"click\", this.muteVolume, false);\r\n    }\r\n    startButton = document.getElementById(\"startButton\");\r\n    startButton.addEventListener(\"click\", this.startNewWave);\r\n\r\n    this.bulletController = new BulletController(this.creeps);\r\n\r\n\r\n    this.myMouse.register(\"mousedown\", this.downHandler);\r\n\r\n    this.myMouse.register(\"mousemove\", function (e, elapsedTime) {\r\n      if (mouse.isActive) {\r\n        const canvasPosition = canvas.getBoundingClientRect();\r\n        mouse.x = e.clientX - canvasPosition.left;\r\n        mouse.y = e.clientY - canvasPosition.top;\r\n        if (mouse.y < 200) {\r\n          mouse.y = 200;\r\n        }\r\n        this.renderCircle = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n    this.myMouse.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n\r\n    self.myKeyboard.register(upgrade, function (elapsedTime) {\r\n      self.upgrade(elapsedTime);\r\n    });\r\n\r\n    self.myKeyboard.register(sell, function (elapsedTime) {\r\n      self.sell(elapsedTime);\r\n    });\r\n\r\n    self.myKeyboard.register(start, function (elapsedTime) {\r\n      self.startNewWave(elapsedTime);\r\n    });\r\n\r\n    // self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      // this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n\r\n    particleSystem.update(elapsedTime);\r\n    let creepsLength = this.creeps.length;\r\n    for (let i = 0; i < creepsLength; i++) {\r\n      let creep = this.creeps[i];\r\n      if (creep) {\r\n        if (creep.player.reachRight() || creep.player.reachBottom()) {\r\n          this.creeps.splice(i, 1);\r\n          GameState.life--;\r\n          continue;\r\n        }\r\n        if (creep.health == 0) {\r\n          let x = creep.player.specs.center.x;\r\n          let y = creep.player.specs.center.y;\r\n          score += creep.maxHealth;\r\n          this.creeps.splice(i, 1);\r\n          creepDied(x, y);\r\n          totalCreepKilled++;\r\n          money += creep.maxHealth;\r\n          gameSound.playSound(\"die\");\r\n          let textEvent = new MovingEvents({\r\n            size: { x: 50, y: 50 },\r\n            center: { x: x, y: y },\r\n            rotation: 0,\r\n            moveRate: 125 / 1000, \r\n            rotateRate: Math.PI / 1000, \r\n            continousSpeed: 50,\r\n            yDirection: -1,\r\n            xDirection: 0,\r\n          });\r\n          this.flyingScores.push(\r\n            new FlyingScore(creep.maxHealth, textEvent, true)\r\n          );\r\n          continue;\r\n        }\r\n        creep.update(elapsedTime);\r\n        let towersLength = this.towers.length;\r\n        for (let i = 0; i < towersLength; i++) {\r\n          let tower = this.towers[i];\r\n          if (typeof creep.flying == \"undefined\" && tower.specs.type == 3) {\r\n            console.log(\"flying\" + \" \" + i);\r\n          } else if (\r\n            typeof creep.flying != \"undefined\" &&\r\n            tower.specs.type < 3\r\n          ) {\r\n            console.log(\"flying\" + \" \" + i);\r\n          } else {\r\n            if (isColliding(creep, tower, tower.specs.radius)) {\r\n              tower.setTarget(\r\n                creep.player.specs.center.x,\r\n                creep.player.specs.center.y\r\n              );\r\n              if (tower.canShoot) {\r\n                let direction = {\r\n                  x: tower.specs.target.x - tower.specs.center.x,\r\n                  y: tower.specs.target.y - tower.specs.center.y,\r\n                };\r\n                direction = normalize(direction);\r\n                let bulletStartX = tower.specs.center.x;\r\n                let bulletStartY = tower.specs.center.y;\r\n\r\n                this.bulletController.addBullet(\r\n                  bulletStartX,\r\n                  bulletStartY,\r\n                  creep,\r\n                  tower.specs.power,\r\n                  tower.specs.type\r\n                );\r\n                gameSound.playSound(\"shoot\");\r\n              }\r\n            }\r\n          }\r\n\r\n          tower.update(elapsedTime);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.bulletController.update(elapsedTime);\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].update(elapsedTime);\r\n      if (!this.flyingScores[i].isVisible) {\r\n        this.flyingScores.splice(i, 1);\r\n        i--;\r\n        scorelength--;\r\n      }\r\n    }\r\n    if (this.enemyCreator) {\r\n      let newEnemy = this.enemyCreator.createEnemy(elapsedTime);\r\n      if (newEnemy) {\r\n        this.creeps.push(newEnemy);\r\n      }\r\n    }\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n    document.getElementById(\"money\").innerHTML = money;\r\n    let waveString = levels[this.level].wave + 1 + \"/\" + maxWave;\r\n    document.getElementById(\"wave\").innerHTML = waveString;\r\n    var startButton = document.getElementById(\"startButton\");\r\n    document.getElementById(\"level\").innerHTML = this.level + 1;\r\n    document.getElementById(\"killed\").innerHTML = totalCreepKilled;\r\n    // startButton.style.display = \"none\";\r\n    if (nextWave) {\r\n      startButton.style.display = \"block\";\r\n    }\r\n    let totalTowerValues = 0;\r\n    this.towers.forEach((tower) => {\r\n      totalTowerValues += tower.specs.cost;\r\n    });\r\n    document.getElementById(\"towerValue\").innerHTML = totalTowerValues;\r\n\r\n    if (moneyRequired > 0) {\r\n      document.getElementById(\"selectedInfo\").style.display = \"block\";\r\n      document.getElementById(\"moneyRequired\").innerHTML = moneyRequired;\r\n      document.getElementById(\"power\").innerHTML =\r\n        this.towerType[parseInt(towerTypeSelected) - 1];\r\n    } else {\r\n      document.getElementById(\"selectedInfo\").style.display = \"none\";\r\n      document.getElementById(\"moneyRequired\").innerHTML = \"\";\r\n      document.getElementById(\"power\").innerHTML = \"\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    context.fillStyle = \"green\";\r\n    context.fillRect(0, 0 + 200, 600, 800);\r\n    context.clearRect(50, 250, 500, 500);\r\n    context.clearRect(0, 400, 50, 200);\r\n    context.clearRect(550, 400, 50, 200);\r\n    context.clearRect(175, 200, 225, 50);\r\n    context.clearRect(175, 750, 225, 50);\r\n\r\n    if (mouse.isActive) {\r\n      let placementFlag = false;\r\n      for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n          let x1 = cellSet[i][j].x;\r\n          let y1 = cellSet[i][j].y;\r\n          if (\r\n            Math.floor((mouse.x - leftOffset) / cellWidth) == x1 &&\r\n            Math.floor((mouse.y - topOffset) / cellWidth) == y1\r\n          ) {\r\n            this.canPlace = true;\r\n            placementFlag = true;\r\n            context.beginPath();\r\n            context.rect(\r\n              x1 * cellWidth + leftOffset,\r\n              y1 * cellWidth + topOffset,\r\n              cellWidth,\r\n              cellWidth\r\n            );\r\n            context.stroke();\r\n          }\r\n        }\r\n      }\r\n      if (!placementFlag) {\r\n        this.canPlace = false;\r\n      }\r\n    }\r\n\r\n    // ctx.strokeRect(50, 50, 50, 50);\r\n\r\n    context.beginPath();\r\n    context.moveTo(0, 200);\r\n    context.lineTo(canvas.width, 200);\r\n    context.stroke();\r\n    if (renderCircle) {\r\n      drawTower(towerRadius);\r\n    }\r\n    context.fillStyle = \"black\";\r\n    this.renderScore();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    let towersLength = this.towers.length;\r\n    for (let i = 0; i < towersLength; i++) {\r\n      let tower = this.towers[i];\r\n      tower.render();\r\n    }\r\n    if (towerClicked) {\r\n      drawRectangle({\r\n        x: towerClicked.specs.center.x - cellWidth / 2,\r\n        y: towerClicked.specs.center.y - cellWidth / 2,\r\n        width: 50,\r\n        height: 50,\r\n        fill: \"#ffd63f9e\",\r\n        stroke: \"red\",\r\n      });\r\n    }\r\n\r\n    this.bulletController.render();\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].render();\r\n    }\r\n    particleSystem.render();\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    gameSound = new Sound();\r\n    gameSound.loadAudio();\r\n    // this.sound.playSound(\"end\");\r\n    this.registerKey();\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      if (\r\n        self.enemyCreator &&\r\n        self.enemyCreator.totalEnemy <= 0 &&\r\n        self.creeps.length == 0 &&\r\n        wave > 0\r\n      ) {\r\n        nextWave = true;\r\n        wave--;\r\n      } else {\r\n        // self.processInput(time - lastTimeStamp);\r\n        // self.update(time - lastTimeStamp);\r\n      }\r\n      // self.checkCanProceed();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n        self.processInput(time - lastTimeStamp);\r\n        self.update(time - lastTimeStamp);\r\n        lastTimeStamp = time;\r\n        self.render();\r\n      } else {\r\n        if (score > 0) {\r\n          add(score);\r\n        }\r\n        context.font = \"70px roboto\";\r\n        context.fillStyle = \"black\";\r\n        context.textAlign = \"center\";\r\n        context.fillText(\"Game Over\", canvas.width / 2, canvas.height * 0.6);\r\n        context.fillText(score, canvas.width / 2, canvas.height * 0.8);\r\n        // for (var i = 0; i < towerElements.length; i++) {\r\n        //   towerElements[i].removeEventListener(\r\n        //     \"click\",\r\n        //     this.createElement,\r\n        //     false\r\n        //   );\r\n        // }\r\n\r\n        // for (var i = 0; i < towerElements2.length; i++) {\r\n        //   towerElements2[i].removeEventListener(\r\n        //     \"click\",\r\n        //     this.muteVolume,\r\n        //     false\r\n        //   );\r\n        // }\r\n        // startButton.removeEventListener(\"click\", self.startNewWave);\r\n        setTimeout(() => {\r\n          self.manager.showScreen(\"mainmenu\");\r\n        }, 4000);\r\n      }\r\n      lastTimeStamp = time;\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}