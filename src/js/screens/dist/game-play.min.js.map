{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","myMouse","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","renderCircle","sound","particlesSmoke","registerKey","Image","render","downHandler","upgrade","creeps","sell","flyingScores","moneyRequired","floor","towerClicked","specs","cost","money","undefined","firstTime","totalElapsedTime","canPlace","elapsedTime","log","upgradeCount","delay","Math","power","gameSound","playSound","towerLength","towers","length","i","cellWidth","y","center","x","splice","getAttribute","mouse","isActive","e","selectedTower","parseInt","towerTypeSelected","canCreated","push","GameState","assets","console","decision","createTower","canvas","getBoundingClientRect","clientX","canvasPosition","left","clientY","top","findSelectedTower","towerElements","style","display","myId","document","getElementById","preventDefault","cancelNextRequest","Mouse","enemyCreator","EnemyCreator","creepGoing","register","row","j","cols","getElementsByClassName","createElement","towerElements2","addEventListener","muteVolume","startNewWave","cellSet","BulletController","startButton","bulletController","localStorage","life","creepsLength","creep","player","reachRight","reachBottom","score","maxHealth","textEvent","MovingEvents","size","rotation","rotateRate","continousSpeed","FlyingScore","towersLength","tower","flying","type","isColliding","moveRate","canShoot","yDirection","target","xDirection","direction","bulletStartX","bulletStartY","update","addBullet","setTarget","scorelength","normalize","newEnemy","createEnemy","innerHTML","waveString","nextWave","context","wave","width","maxWave","height","clearRect","y1","leftOffset","x1","topOffset","placementFlag","beginPath","rect","fillStyle","fillRect","moveTo","lineTo","renderScore","forEach","stroke","fill","drawTower","Sound","requestAnimationFrame","time","totalEnemy","processInput","gameLoop"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.myMouse = null;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.renderCircle = false;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.creeps = [];\r\n    this.towers = [];\r\n    this.registerKey = this.registerKey.bind(this);\r\n    this.flyingScores = [];\r\n    this.tower1 = new Image();\r\n    this.tower1.src = \"assets/turret/turret-5-3.png\";\r\n    this.render = this.render.bind(this);\r\n    this.firstTime = true;\r\n    this.downHandler = this.downHandler.bind(this);\r\n    this.enemyCreator = null;\r\n    this.canPlace = false;\r\n    this.upgrade = this.upgrade.bind(this);\r\n    this.sell = this.sell.bind(this);\r\n  }\r\n\r\n  upgrade(elapsedTime) {\r\n    let moneyRequired = Math.floor(0.5 * towerClicked.specs.cost);\r\n    if (moneyRequired <= money) {\r\n      if (towerClicked) {\r\n        if (towerClicked.totalElapsedTime == undefined) {\r\n          towerClicked.totalElapsedTime = 0;\r\n        } else {\r\n          towerClicked.totalElapsedTime += elapsedTime;\r\n          if (towerClicked.totalElapsedTime >= 200) {\r\n            console.log(\"upgraded\");\r\n            towerClicked.totalElapsedTime -= 200;\r\n            if (!towerClicked.upgradeCount) {\r\n              towerClicked.upgradeCount = 1;\r\n            } else {\r\n              if (towerClicked.upgradeCount >= 3) {\r\n                return;\r\n              } else {\r\n                towerClicked.upgradeCount = towerClicked.upgradeCount + 1;\r\n                towerClicked.delay = Math.floor(towerClicked.delay * 0.7);\r\n                towerClicked.specs.power = towerClicked.specs.power + 1;\r\n                money -= moneyRequired;\r\n                gameSound.playSound(\"add\");\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  sell() {\r\n    if (towerClicked) {\r\n      let towerLength = this.towers.length;\r\n      for (let i = 0; i < towerLength; i++) {\r\n        if (\r\n          isColliding2(\r\n            this.towers[i].specs.center.x - cellWidth / 2,\r\n            this.towers[i].specs.center.y - cellWidth / 2,\r\n            cellWidth,\r\n            towerClicked.specs.center.x - cellWidth / 2,\r\n            towerClicked.specs.center.y - cellWidth / 2,\r\n            cellWidth\r\n          )\r\n        ) {\r\n          money += Math.floor(0.7 * towerClicked.specs.cost);\r\n          this.towers.splice(i, 1);\r\n          gameSound.playSound(\"die\");\r\n          towerClicked = null;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createElement() {\r\n    selectedTower = this.getAttribute(\"data-myName\");\r\n    moneyRequired = parseInt(this.getAttribute(\"data-cost\"));\r\n    towerTypeSelected = parseInt(this.getAttribute(\"data-type\"));\r\n    if (moneyRequired <= money) {\r\n      renderCircle = true;\r\n      mouse.isActive = true;\r\n    }\r\n  }\r\n\r\n  downHandler(e, elapsedTime) {\r\n    if (mouse.isActive) {\r\n      firstTime = true;\r\n      mouse.isActive = false;\r\n      renderCircle = false;\r\n      let decision = canCreated(this.towers) && this.canPlace;\r\n      if (decision) {\r\n        this.towers.push(\r\n          createTower(\r\n            GameState.assets[selectedTower],\r\n            Math.floor(mouse.x / cellWidth) * cellWidth,\r\n            Math.floor((mouse.y - 200) / cellWidth) * cellWidth + 200,\r\n            2500,\r\n            1,\r\n            moneyRequired,\r\n            towerTypeSelected\r\n          )\r\n        );\r\n        console.log(this.towers);\r\n        money = money - moneyRequired;\r\n        moneyRequired = 0;\r\n        towerTypeSelected = 0;\r\n        gameSound.playSound(\"add\");\r\n      }\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n    } else {\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n      mouse.x = e.clientX - canvasPosition.left;\r\n      mouse.y = e.clientY - canvasPosition.top;\r\n      findSelectedTower(this.towers);\r\n    }\r\n  }\r\n\r\n  muteVolume(e) {\r\n    e.preventDefault();\r\n    var towerElements = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].style.display = \"block\";\r\n    }\r\n    let myId = this.getAttribute(\"data-myId\");\r\n    document.getElementById(myId).style.display = \"none\";\r\n    if (myId == \"muteButton\") {\r\n      gameSound.stopAllSound();\r\n    }\r\n    if (myId == \"unmuteButton\") {\r\n      gameSound.unMuteSound();\r\n    }\r\n  }\r\n\r\n  startNewWave(e) {\r\n    e.preventDefault();\r\n    this.initialize();\r\n    nextWave = false;\r\n    GameState.cancelNextRequest = true;\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    this.myMouse = new Mouse();\r\n    this.enemyCreator = new EnemyCreator(10, creepGoing, 3);\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push({\r\n          x: i,\r\n          y: j,\r\n        });\r\n      }\r\n      cellSet.push(row);\r\n    }\r\n\r\n    var towerElements = document.getElementsByClassName(\"tower\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].addEventListener(\"click\", this.createElement, false);\r\n    }\r\n\r\n    var towerElements2 = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements2.length; i++) {\r\n      towerElements2[i].addEventListener(\"click\", this.muteVolume, false);\r\n    }\r\n    var startButton = document.getElementById(\"startButton\");\r\n    startButton.addEventListener(\"click\", this.startNewWave);\r\n\r\n    this.bulletController = new BulletController(this.creeps);\r\n\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-5-3.png\", 300, 500, 1000, 1)\r\n    // );\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-3-3.png\", 600, 500, 2000, 2)\r\n    // );\r\n\r\n    this.myMouse.register(\"mousedown\", this.downHandler);\r\n\r\n    // this.myMouse.register('mouseup', function(e, elapsedTime) {\r\n    //   mouse.isActive = false;\r\n    // });\r\n\r\n    this.myMouse.register(\"mousemove\", function (e, elapsedTime) {\r\n      if (mouse.isActive) {\r\n        const canvasPosition = canvas.getBoundingClientRect();\r\n        mouse.x = e.clientX - canvasPosition.left;\r\n        mouse.y = e.clientY - canvasPosition.top;\r\n        if (mouse.y < 200) {\r\n          mouse.y = 200;\r\n        }\r\n        this.renderCircle = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n    this.myMouse.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    console.log(upgrade);\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n\r\n    self.myKeyboard.register(upgrade, function (elapsedTime) {\r\n      self.upgrade(elapsedTime);\r\n    });\r\n\r\n    self.myKeyboard.register(sell, function (elapsedTime) {\r\n      self.sell(elapsedTime);\r\n    });\r\n\r\n    // self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      // this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n    let creepsLength = this.creeps.length;\r\n    for (let i = 0; i < creepsLength; i++) {\r\n      let creep = this.creeps[i];\r\n      if (creep) {\r\n        if (creep.player.reachRight() || creep.player.reachBottom()) {\r\n          this.creeps.splice(i, 1);\r\n          GameState.life--;\r\n          console.log(GameState.life);\r\n          continue;\r\n        }\r\n        if (creep.health == 0) {\r\n          let x = creep.player.specs.center.x;\r\n          let y = creep.player.specs.center.y;\r\n          score += creep.maxHealth;\r\n          this.creeps.splice(i, 1);\r\n          gameSound.playSound(\"die\");\r\n          let textEvent = new MovingEvents({\r\n            size: { x: 50, y: 50 }, // Size in pixels\r\n            center: { x: x, y: y },\r\n            rotation: 0,\r\n            moveRate: 125 / 1000, // Pixels per second\r\n            rotateRate: Math.PI / 1000, // Radians per second\r\n            continousSpeed: 50,\r\n            yDirection: -1,\r\n            xDirection: 0,\r\n          });\r\n          this.flyingScores.push(\r\n            new FlyingScore(creep.maxHealth, textEvent, true)\r\n          );\r\n          continue;\r\n        }\r\n        creep.update(elapsedTime);\r\n        let towersLength = this.towers.length;\r\n        for (let i = 0; i < towersLength; i++) {\r\n          let tower = this.towers[i];\r\n          if (typeof creep.flying == \"undefined\" && tower.specs.type == 3) {\r\n            console.log(\"flying\" + \" \" + i);\r\n          } else if (\r\n            typeof creep.flying != \"undefined\" &&\r\n            tower.specs.type < 3\r\n          ) {\r\n            console.log(\"flying\" + \" \" + i);\r\n          } else {\r\n            if (isColliding(creep, tower, 100)) {\r\n              tower.setTarget(\r\n                creep.player.specs.center.x,\r\n                creep.player.specs.center.y\r\n              );\r\n              if (tower.canShoot) {\r\n                let direction = {\r\n                  x: tower.specs.target.x - tower.specs.center.x,\r\n                  y: tower.specs.target.y - tower.specs.center.y,\r\n                };\r\n                direction = normalize(direction);\r\n                let bulletStartX = tower.specs.center.x;\r\n                let bulletStartY = tower.specs.center.y;\r\n\r\n                this.bulletController.addBullet(\r\n                  bulletStartX,\r\n                  bulletStartY,\r\n                  creep,\r\n                  tower.specs.power,\r\n                  tower.specs.type\r\n                );\r\n                gameSound.playSound(\"shoot\");\r\n              }\r\n            }\r\n          }\r\n\r\n          tower.update(elapsedTime);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.bulletController.update(elapsedTime);\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].update(elapsedTime);\r\n      if (!this.flyingScores[i].isVisible) {\r\n        this.flyingScores.splice(i, 1);\r\n        i--;\r\n        scorelength--;\r\n      }\r\n    }\r\n    let newEnemy = this.enemyCreator.createEnemy(elapsedTime);\r\n    if (newEnemy) {\r\n      this.creeps.push(newEnemy);\r\n    }\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n    document.getElementById(\"money\").innerHTML = money;\r\n    let waveString = wave + \"/\" + maxWave;\r\n    document.getElementById(\"wave\").innerHTML = waveString;\r\n    var startButton = document.getElementById(\"startButton\");\r\n    startButton.style.display = \"none\";\r\n    console.log(nextWave);\r\n    if (nextWave) {\r\n      startButton.style.display = \"block\";\r\n    }\r\n\r\n    if (moneyRequired > 0) {\r\n      document.getElementById(\"selectedInfo\").style.display = \"block\";\r\n      document.getElementById(\"moneyRequired\").innerHTML = moneyRequired;\r\n      document.getElementById(\"power\").innerHTML = towerTypeSelected;\r\n    } else {\r\n      document.getElementById(\"selectedInfo\").style.display = \"none\";\r\n      document.getElementById(\"moneyRequired\").innerHTML = \"\";\r\n      document.getElementById(\"power\").innerHTML = \"\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    context.fillStyle = \"green\";\r\n    context.fillRect(0, 0 + 200, 600, 800);\r\n    context.clearRect(50, 250, 500, 500);\r\n    context.clearRect(0, 400, 50, 200);\r\n    context.clearRect(550, 400, 50, 200);\r\n    context.clearRect(175, 200, 225, 50);\r\n    context.clearRect(175, 750, 225, 50);\r\n\r\n    if (mouse.isActive) {\r\n      let placementFlag = false;\r\n      for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n          let x1 = cellSet[i][j].x;\r\n          let y1 = cellSet[i][j].y;\r\n          if (\r\n            Math.floor((mouse.x - leftOffset) / cellWidth) == x1 &&\r\n            Math.floor((mouse.y - topOffset) / cellWidth) == y1\r\n          ) {\r\n            this.canPlace = true;\r\n            placementFlag = true;\r\n            context.beginPath();\r\n            context.rect(\r\n              x1 * cellWidth + leftOffset,\r\n              y1 * cellWidth + topOffset,\r\n              cellWidth,\r\n              cellWidth\r\n            );\r\n            context.stroke();\r\n          }\r\n        }\r\n      }\r\n      if (!placementFlag) {\r\n        this.canPlace = false;\r\n      }\r\n    }\r\n\r\n    // ctx.strokeRect(50, 50, 50, 50);\r\n\r\n    context.beginPath();\r\n    context.moveTo(0, 200);\r\n    context.lineTo(canvas.width, 200);\r\n    context.stroke();\r\n    if (renderCircle) {\r\n      drawTower(100);\r\n    }\r\n    this.renderScore();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    let towersLength = this.towers.length;\r\n    for (let i = 0; i < towersLength; i++) {\r\n      let tower = this.towers[i];\r\n      tower.render();\r\n    }\r\n    if (towerClicked) {\r\n      drawRectangle({\r\n        x: towerClicked.specs.center.x - cellWidth / 2,\r\n        y: towerClicked.specs.center.y - cellWidth / 2,\r\n        width: 50,\r\n        height: 50,\r\n        fill: \"#ffd63f9e\",\r\n        stroke: \"red\",\r\n      });\r\n    }\r\n\r\n    this.bulletController.render();\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].render();\r\n    }\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    gameSound = new Sound();\r\n    gameSound.loadAudio();\r\n    // this.sound.playSound(\"end\");\r\n    this.registerKey();\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      console.log(self.creeps.length);\r\n      console.log(\"wave is \" + wave);\r\n      console.log(\"life is \" + self.enemyCreator.totalEnemy);\r\n      if (\r\n        self.enemyCreator.totalEnemy <= 0 &&\r\n        self.creeps.length == 0 &&\r\n        wave > 0\r\n      ) {\r\n        console.log(\"is true\");\r\n        nextWave = true;\r\n        wave--;\r\n        self.render();\r\n      } else {\r\n        self.processInput(time - lastTimeStamp);\r\n        self.update(time - lastTimeStamp);\r\n        lastTimeStamp = time;\r\n        self.render();\r\n        if (!GameState.cancelNextRequest) {\r\n          requestAnimationFrame(gameLoop);\r\n        }\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}