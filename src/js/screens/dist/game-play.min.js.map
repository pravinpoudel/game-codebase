{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","myMouse","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","renderCircle","sound","particlesSmoke","registerKey","Image","render","downHandler","EnemyCreator","upgrade","creeps","sell","flyingScores","moneyRequired","floor","towerClicked","specs","cost","money","undefined","firstTime","totalElapsedTime","canPlace","elapsedTime","log","upgradeCount","delay","Math","power","towerLength","i","cellWidth","center","x","y","towers","splice","selectedTower","isColliding2","parseInt","getAttribute","towerTypeSelected","mouse","isActive","e","canCreated","push","GameState","assets","console","decision","getBoundingClientRect","clientX","canvasPosition","left","clientY","top","findSelectedTower","canvas","length","towerElements","style","display","myId","document","getElementById","Mouse","register","cancelNextRequest","showScreen","rows","row","j","cols","cellSet","getElementsByClassName","addEventListener","createElement","towerElements2","muteVolume","bulletController","BulletController","update","localStorage","creepsLength","creep","reachRight","life","health","player","score","maxHealth","size","rotation","moveRate","PI","yDirection","xDirection","textEvent","towersLength","isColliding","tower","setTarget","canShoot","target","direction","normalize","continousSpeed","addBullet","bulletStartX","bulletStartY","scorelength","newEnemy","enemyCreator","createEnemy","innerHTML","wave","width","height","context","fillStyle","fillRect","clearRect","placementFlag","x1","y1","leftOffset","topOffset","beginPath","rect","moveTo","renderScore","forEach","drawTower","stroke","drawRectangle","performance","now","fill","requestAnimationFrame","gameLoop","time","processInput"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.myMouse = null;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.renderCircle = false;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.creeps = [];\r\n    this.towers = [];\r\n    this.registerKey = this.registerKey.bind(this);\r\n    this.flyingScores = [];\r\n    this.tower1 = new Image();\r\n    this.tower1.src = \"assets/turret/turret-5-3.png\";\r\n    this.render = this.render.bind(this);\r\n    this.firstTime = true;\r\n    this.downHandler = this.downHandler.bind(this);\r\n    this.enemyCreator = new EnemyCreator(10);\r\n    this.canPlace = false;\r\n    this.upgrade = this.upgrade.bind(this);\r\n    this.sell = this.sell.bind(this);\r\n  }\r\n\r\n  upgrade(elapsedTime) {\r\n    let moneyRequired = Math.floor(0.5 * towerClicked.specs.cost);\r\n    if (moneyRequired <= money) {\r\n      if (towerClicked) {\r\n        if (towerClicked.totalElapsedTime == undefined) {\r\n          towerClicked.totalElapsedTime = 0;\r\n        } else {\r\n          towerClicked.totalElapsedTime += elapsedTime;\r\n          if (towerClicked.totalElapsedTime >= 200) {\r\n            console.log(\"upgraded\");\r\n            towerClicked.totalElapsedTime -= 200;\r\n            if (!towerClicked.upgradeCount) {\r\n              towerClicked.upgradeCount = 1;\r\n            } else {\r\n              if (towerClicked.upgradeCount >= 3) {\r\n                return;\r\n              } else {\r\n                towerClicked.upgradeCount = towerClicked.upgradeCount + 1;\r\n                towerClicked.delay = Math.floor(towerClicked.delay * 0.7);\r\n                towerClicked.specs.power = towerClicked.specs.power + 1;\r\n                money -= moneyRequired;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  sell() {\r\n    if (towerClicked) {\r\n      let towerLength = this.towers.length;\r\n      for (let i = 0; i < towerLength; i++) {\r\n        if (\r\n          isColliding2(\r\n            this.towers[i].specs.center.x - cellWidth / 2,\r\n            this.towers[i].specs.center.y - cellWidth / 2,\r\n            cellWidth,\r\n            towerClicked.specs.center.x - cellWidth / 2,\r\n            towerClicked.specs.center.y - cellWidth / 2,\r\n            cellWidth\r\n          )\r\n        ) {\r\n          money += Math.floor(0.7 * towerClicked.specs.cost);\r\n          this.towers.splice(i, 1);\r\n          towerClicked = null;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createElement() {\r\n    selectedTower = this.getAttribute(\"data-myName\");\r\n    moneyRequired = parseInt(this.getAttribute(\"data-cost\"));\r\n    towerTypeSelected = parseInt(this.getAttribute(\"data-type\"));\r\n    if (moneyRequired <= money) {\r\n      renderCircle = true;\r\n      mouse.isActive = true;\r\n    }\r\n  }\r\n\r\n  downHandler(e, elapsedTime) {\r\n    if (mouse.isActive) {\r\n      firstTime = true;\r\n      mouse.isActive = false;\r\n      renderCircle = false;\r\n      let decision = canCreated(this.towers) && this.canPlace;\r\n      if (decision) {\r\n        this.towers.push(\r\n          createTower(\r\n            GameState.assets[selectedTower],\r\n            Math.floor(mouse.x / cellWidth) * cellWidth,\r\n            Math.floor((mouse.y - 200) / cellWidth) * cellWidth + 200,\r\n            2500,\r\n            1,\r\n            moneyRequired,\r\n            towerTypeSelected\r\n          )\r\n        );\r\n        money = money - moneyRequired;\r\n        towerTypeSelected = 0;\r\n        console.log(moneyRequired);\r\n      }\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n    } else {\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n      mouse.x = e.clientX - canvasPosition.left;\r\n      mouse.y = e.clientY - canvasPosition.top;\r\n      findSelectedTower(this.towers);\r\n    }\r\n  }\r\n\r\n  muteVolume(e) {\r\n    var towerElements = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].style.display = \"block\";\r\n    }\r\n    let myId = this.getAttribute(\"data-myId\");\r\n    document.getElementById(myId).style.display = \"none\";\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    this.myMouse = new Mouse();\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push({\r\n          x: i,\r\n          y: j,\r\n        });\r\n      }\r\n      cellSet.push(row);\r\n    }\r\n\r\n    var towerElements = document.getElementsByClassName(\"tower\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].addEventListener(\"click\", this.createElement, false);\r\n    }\r\n\r\n    var towerElements2 = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements2.length; i++) {\r\n      towerElements2[i].addEventListener(\"click\", this.muteVolume, false);\r\n    }\r\n\r\n    this.bulletController = new BulletController(this.creeps);\r\n\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-5-3.png\", 300, 500, 1000, 1)\r\n    // );\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-3-3.png\", 600, 500, 2000, 2)\r\n    // );\r\n\r\n    this.myMouse.register(\"mousedown\", this.downHandler);\r\n\r\n    // this.myMouse.register('mouseup', function(e, elapsedTime) {\r\n    //   mouse.isActive = false;\r\n    // });\r\n\r\n    this.myMouse.register(\"mousemove\", function (e, elapsedTime) {\r\n      if (mouse.isActive) {\r\n        const canvasPosition = canvas.getBoundingClientRect();\r\n        mouse.x = e.clientX - canvasPosition.left;\r\n        mouse.y = e.clientY - canvasPosition.top;\r\n        if (mouse.y < 200) {\r\n          mouse.y = 200;\r\n        }\r\n        this.renderCircle = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n    this.myMouse.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    console.log(upgrade);\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n\r\n    self.myKeyboard.register(upgrade, function (elapsedTime) {\r\n      self.upgrade(elapsedTime);\r\n    });\r\n\r\n    self.myKeyboard.register(sell, function (elapsedTime) {\r\n      self.sell(elapsedTime);\r\n    });\r\n\r\n    // self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      // this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n    let creepsLength = this.creeps.length;\r\n    for (let i = 0; i < creepsLength; i++) {\r\n      let creep = this.creeps[i];\r\n      if (creep) {\r\n        if (creep.reachRight()) {\r\n          this.creeps.splice(i, 1);\r\n          GameState.life--;\r\n          console.log(GameState.life);\r\n          continue;\r\n        }\r\n        if (creep.health == 0) {\r\n          let x = creep.player.specs.center.x;\r\n          let y = creep.player.specs.center.y;\r\n          score += creep.maxHealth;\r\n          this.creeps.splice(i, 1);\r\n          let textEvent = new MovingEvents({\r\n            size: { x: 50, y: 50 }, // Size in pixels\r\n            center: { x: x, y: y },\r\n            rotation: 0,\r\n            moveRate: 125 / 1000, // Pixels per second\r\n            rotateRate: Math.PI / 1000, // Radians per second\r\n            continousSpeed: 50,\r\n            yDirection: -1,\r\n            xDirection: 0,\r\n          });\r\n          this.flyingScores.push(\r\n            new FlyingScore(creep.maxHealth, textEvent, true)\r\n          );\r\n          continue;\r\n        }\r\n        creep.update(elapsedTime);\r\n        let towersLength = this.towers.length;\r\n        for (let i = 0; i < towersLength; i++) {\r\n          let tower = this.towers[i];\r\n          if (isColliding(creep, tower, 100)) {\r\n            tower.setTarget(\r\n              creep.player.specs.center.x,\r\n              creep.player.specs.center.y\r\n            );\r\n            if (tower.canShoot) {\r\n              let direction = {\r\n                x: tower.specs.target.x - tower.specs.center.x,\r\n                y: tower.specs.target.y - tower.specs.center.y,\r\n              };\r\n              direction = normalize(direction);\r\n              let bulletStartX = tower.specs.center.x;\r\n              let bulletStartY = tower.specs.center.y;\r\n\r\n              this.bulletController.addBullet(\r\n                bulletStartX,\r\n                bulletStartY,\r\n                creep,\r\n                tower.specs.power,\r\n                tower.specs.type\r\n              );\r\n            }\r\n          }\r\n\r\n          tower.update(elapsedTime);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.bulletController.update(elapsedTime);\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].update(elapsedTime);\r\n      if (!this.flyingScores[i].isVisible) {\r\n        this.flyingScores.splice(i, 1);\r\n        i--;\r\n        scorelength--;\r\n      }\r\n    }\r\n    let newEnemy = this.enemyCreator.createEnemy(elapsedTime);\r\n    if (newEnemy) {\r\n      this.creeps.push(newEnemy);\r\n    }\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n    document.getElementById(\"money\").innerHTML = money;\r\n    let wave = wavesDeno + \"/\" + wavesNeno;\r\n    document.getElementById(\"wave\").innerHTML = wave;\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    context.fillStyle = \"green\";\r\n    context.fillRect(0, 0 + 200, 600, 800);\r\n    context.clearRect(50, 250, 500, 500);\r\n    context.clearRect(0, 400, 50, 200);\r\n    context.clearRect(550, 400, 50, 200);\r\n\r\n    if (mouse.isActive) {\r\n      let placementFlag = false;\r\n      for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n          let x1 = cellSet[i][j].x;\r\n          let y1 = cellSet[i][j].y;\r\n          if (\r\n            Math.floor((mouse.x - leftOffset) / cellWidth) == x1 &&\r\n            Math.floor((mouse.y - topOffset) / cellWidth) == y1\r\n          ) {\r\n            this.canPlace = true;\r\n            placementFlag = true;\r\n            context.beginPath();\r\n            context.rect(\r\n              x1 * cellWidth + leftOffset,\r\n              y1 * cellWidth + topOffset,\r\n              cellWidth,\r\n              cellWidth\r\n            );\r\n            context.stroke();\r\n          }\r\n        }\r\n      }\r\n      if (!placementFlag) {\r\n        this.canPlace = false;\r\n      }\r\n    }\r\n\r\n    // ctx.strokeRect(50, 50, 50, 50);\r\n\r\n    context.beginPath();\r\n    context.moveTo(0, 200);\r\n    context.lineTo(canvas.width, 200);\r\n    context.stroke();\r\n    if (renderCircle) {\r\n      drawTower(100);\r\n    }\r\n    this.renderScore();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    let towersLength = this.towers.length;\r\n    for (let i = 0; i < towersLength; i++) {\r\n      let tower = this.towers[i];\r\n      tower.render();\r\n    }\r\n    if (towerClicked) {\r\n      drawRectangle({\r\n        x: towerClicked.specs.center.x - cellWidth / 2,\r\n        y: towerClicked.specs.center.y - cellWidth / 2,\r\n        width: 50,\r\n        height: 50,\r\n        fill: \"#ffd63f9e\",\r\n        stroke: \"red\",\r\n      });\r\n    }\r\n\r\n    this.bulletController.render();\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].render();\r\n    }\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    this.sound = new Sound();\r\n    this.sound.loadAudio();\r\n    // this.sound.playSound(\"end\");\r\n    this.registerKey();\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}