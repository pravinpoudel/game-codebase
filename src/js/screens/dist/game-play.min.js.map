{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","lastTimeStamp","model","initialize","bind","run","sound","particlesSmoke","self","GameState","cancelNextRequest","showScreen","playerModel","ParticleSystem","center","x","y","size","stdev","speed","mean","lifetime","left","right","top","bottom","register","createEffect","MovingEvents","Math","PI","continousSpeed","playerSpecs","dir","gameModel","playerEvent","image","assets","EnemyController","rotation","moveForward","moveRate","rotateLeft","rotateRight","runRight","runLeft","runTop","runDown","spriteCount","spriteTime","update","elapsedTime","life","enemycontroller","document","getElementById","innerHTML","score","width","render","console","log","player","moveTop","moveDown","moveLeft","moveRight","performance","now","requestAnimationFrame","gameLoop","time","processInput","context"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    this.particlesSmoke = new ParticleSystem({\r\n      center: { x: 300, y: 300 },\r\n      size: { mean: 10, stdev: 4 },\r\n      speed: { mean: 50, stdev: 25 },\r\n      lifetime: { mean: 4, stdev: 1 },\r\n      left: 100,\r\n      right: 100,\r\n      top: 100,\r\n      bottom: 100,\r\n      image: GameState.assets[\"fire\"],\r\n    });\r\n\r\n    this.particlesSmoke.createEffect();\r\n\r\n    //all the event to handle movement\r\n    let playerEvent = new MovingEvents({\r\n      size: { x: 50, y: 50 }, // Size in pixels\r\n      center: { x: 50, y: 150 },\r\n      rotation: 0,\r\n      moveRate: 125 / 1000, // Pixels per second\r\n      rotateRate: Math.PI / 1000, // Radians per second\r\n      continousSpeed: 100,\r\n    });\r\n\r\n    // all the specs of the player sprite\r\n    let playerSpecs = {\r\n      spriteSheet: dir + \"assets/spritesheet-bird.png\",\r\n      spriteCount: 14,\r\n      spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    };\r\n\r\n    //make a playerModel\r\n    self.playerModel = new gameModel(playerSpecs, playerEvent, true);\r\n    //register that event to event handler\r\n    self.enemycontroller = new EnemyController(self.playerModel);\r\n    // self.enemycontroller.createEnemy({\r\n    //   size: { x: 50, y: 50 }, // Size in pixels\r\n    //   center: { x: 50, y: 150 },\r\n    //   rotation: 0,\r\n    //   moveRate: 125 / 1000,\r\n    //   rotateRate: Math.PI / 1000,\r\n    //   continousSpeed: 100,\r\n    //   image: GameState.assets[\"bird\"],\r\n    //   spriteSheet: dir + \"assets/spritesheet-bird.png\",\r\n    //   spriteCount: 14,\r\n    //   spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    // });\r\n\r\n    self.myKeyboard.register(\"w\", playerEvent.moveForward);\r\n    self.myKeyboard.register(\"a\", playerEvent.rotateLeft);\r\n    self.myKeyboard.register(\"d\", playerEvent.rotateRight);\r\n\r\n    self.myKeyboard.register(\"3\", playerEvent.runRight);\r\n    self.myKeyboard.register(\"1\", playerEvent.runLeft);\r\n    self.myKeyboard.register(\"5\", playerEvent.runTop);\r\n    self.myKeyboard.register(\"2\", playerEvent.runDown);\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n    this.playerModel.update(elapsedTime);\r\n    // this.enemycontroller.update(elapsedTime);\r\n    // model.update(elapsedTime);\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    this.renderScore();\r\n    if (GameState.life <= 0) {\r\n      this.particlesSmoke.render();\r\n      return;\r\n    }\r\n    this.playerModel.render();\r\n    //draw things\r\n\r\n    // renderGame(model, graphics); // draw background, obstacles, scene and player here\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    this.sound = new Sound();\r\n    this.sound.loadAudio();\r\n    this.sound.playSound(\"end\");\r\n    console.log(this.sound);\r\n\r\n    this.myKeyboard.register(\"ArrowUp\", self.playerModel.player.moveTop);\r\n    this.myKeyboard.register(\"ArrowDown\", self.playerModel.player.moveDown);\r\n    this.myKeyboard.register(\"ArrowLeft\", self.playerModel.player.moveLeft);\r\n    this.myKeyboard.register(\"ArrowRight\", self.playerModel.player.moveRight);\r\n    console.log(self.playerModel.moveRight);\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      // if (!GameState.cancelNextRequest) {\r\n      requestAnimationFrame(gameLoop);\r\n      // }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}