{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","myMouse","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","renderCircle","sound","particlesSmoke","registerKey","Image","render","downHandler","upgrade","creeps","sell","towers","renderScore","flyingScores","tower1","firstTime","moneyRequired","Math","specs","cost","console","enemyCreator","money","undefined","totalElapsedTime","towerType","level","elapsedTime","log","towerClicked","upgradeCount","floor","delay","power","gameSound","playSound","towerLength","length","i","cellWidth","y","center","x","towerSold","splice","selectedTower","getAttribute","towerTypeSelected","parseInt","mouse","isActive","e","towerRadius","canCreated","canPlace","push","GameState","assets","createTower","canvas","getBoundingClientRect","canvasPosition","clientX","left","findSelectedTower","towerElements","document","getElementsByClassName","style","display","myId","preventDefault","stopAllSound","unMuteSound","levels","sendNextWave","wave","enemyCreators","nextWave","cancelNextRequest","life","add","score","Mouse","register","rows","row","j","cols","createLevels","showScreen","addEventListener","createElement","towerElements2","muteVolume","getElementById","bulletController","BulletController","startButton","update","localStorage","creepsLength","startNewWave","creep","player","reachRight","reachBottom","maxHealth","particleSystem","size","rotation","moveRate","PI","continousSpeed","yDirection","xDirection","textEvent","totalCreepKilled","tower","MovingEvents","flying","type","radius","rotateRate","target","direction","normalize","bulletStartX","bulletStartY","towersLength","setTarget","scorelength","createEnemy","newEnemy","innerHTML","waveString","isVisible","maxWave","totalTowerValues","width","height","context","fillStyle","fillRect","forEach","clearRect","x1","cellSet","leftOffset","topOffset","y1","placementFlag","beginPath","moveTo","drawTower","stroke","drawRectangle","performance","now","fill","requestAnimationFrame","gameLoop","time","font","fillText","setTimeout","Sound","loadAudio"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.myMouse = null;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.renderCircle = false;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.creeps = [];\r\n    this.towers = [];\r\n    this.registerKey = this.registerKey.bind(this);\r\n    this.flyingScores = [];\r\n    this.tower1 = new Image();\r\n    this.tower1.src = \"assets/turret/turret-5-3.png\";\r\n    this.render = this.render.bind(this);\r\n    this.firstTime = true;\r\n    this.downHandler = this.downHandler.bind(this);\r\n    this.enemyCreator = null;\r\n    this.canPlace = false;\r\n    this.upgrade = this.upgrade.bind(this);\r\n    this.sell = this.sell.bind(this);\r\n    this.renderScore = this.renderScore.bind(this);\r\n    this.startNewWave = this.startNewWave.bind(this);\r\n    this.level = 0;\r\n    this.towerType = [\"Gun\", \"Missile\", \"Air\", \"Mix (Air + Ground)\"];\r\n  }\r\n\r\n  upgrade(elapsedTime) {\r\n    let moneyRequired = Math.floor(0.5 * towerClicked.specs.cost);\r\n    console.log(towerClicked)\r\n    if (moneyRequired <= money) {\r\n      if (towerClicked) {\r\n        if (towerClicked.totalElapsedTime == undefined) {\r\n          towerClicked.totalElapsedTime = 0;\r\n        } else {\r\n          towerClicked.totalElapsedTime += elapsedTime;\r\n          if (towerClicked.totalElapsedTime >= 200) {\r\n            console.log(\"upgraded\");\r\n            towerClicked.totalElapsedTime -= 200;\r\n            if (!towerClicked.upgradeCount) {\r\n              towerClicked.upgradeCount = 1;\r\n            } else {\r\n              if (towerClicked.upgradeCount >= 3) {\r\n                return;\r\n              } else {\r\n                towerClicked.upgradeCount = towerClicked.upgradeCount + 1;\r\n                towerClicked.delay = Math.floor(towerClicked.delay * 0.7);\r\n                towerClicked.specs.power = towerClicked.specs.power + 1;\r\n                money -= moneyRequired;\r\n                gameSound.playSound(\"add\");\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  sell() {\r\n    if (towerClicked) {\r\n      let towerLength = this.towers.length;\r\n      for (let i = 0; i < towerLength; i++) {\r\n        if (\r\n          isColliding2(\r\n            this.towers[i].specs.center.x - cellWidth / 2,\r\n            this.towers[i].specs.center.y - cellWidth / 2,\r\n            cellWidth,\r\n            towerClicked.specs.center.x - cellWidth / 2,\r\n            towerClicked.specs.center.y - cellWidth / 2,\r\n            cellWidth\r\n          )\r\n        ) {\r\n          money += Math.floor(0.7 * towerClicked.specs.cost);\r\n          towerSold(this.towers[i].specs.center.x - cellWidth / 2, this.towers[i].specs.center.y - cellWidth / 2);\r\n          this.towers.splice(i, 1);\r\n          gameSound.playSound(\"die\");\r\n          towerClicked = null;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createElement() {\r\n    selectedTower = this.getAttribute(\"data-myName\");\r\n    towerRadius = this.getAttribute(\"data-radius\");\r\n    moneyRequired = parseInt(this.getAttribute(\"data-cost\"));\r\n    towerTypeSelected = parseInt(this.getAttribute(\"data-type\"));\r\n    if (moneyRequired <= money) {\r\n      renderCircle = true;\r\n      mouse.isActive = true;\r\n    }\r\n  }\r\n\r\n  downHandler(e, elapsedTime) {\r\n    if (mouse.isActive) {\r\n      firstTime = true;\r\n      mouse.isActive = false;\r\n      renderCircle = false;\r\n      let decision = canCreated(this.towers) && this.canPlace;\r\n      if (decision) {\r\n        this.towers.push(\r\n          createTower(\r\n            GameState.assets[selectedTower],\r\n            Math.floor(mouse.x / cellWidth) * cellWidth,\r\n            Math.floor((mouse.y - 200) / cellWidth) * cellWidth + 200,\r\n            2500,\r\n            1,\r\n            towerRadius,\r\n            moneyRequired,\r\n            towerTypeSelected\r\n          )\r\n        );\r\n        money = money - moneyRequired;\r\n        moneyRequired = 0;\r\n        towerTypeSelected = 0;\r\n        gameSound.playSound(\"add\");\r\n      }\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n    } else {\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n      mouse.x = e.clientX - canvasPosition.left;\r\n      mouse.y = e.clientY - canvasPosition.top;\r\n      findSelectedTower(this.towers);\r\n    }\r\n  }\r\n\r\n  muteVolume(e) {\r\n    e.preventDefault();\r\n    var towerElements = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].style.display = \"block\";\r\n    }\r\n    let myId = this.getAttribute(\"data-myId\");\r\n    document.getElementById(myId).style.display = \"none\";\r\n    if (myId == \"muteButton\") {\r\n      gameSound.stopAllSound();\r\n    }\r\n    if (myId == \"unmuteButton\") {\r\n      gameSound.unMuteSound();\r\n    }\r\n  }\r\n\r\n  startNewWave(e) {\r\n    e.preventDefault();\r\n    console.log(\"start button clicked\");\r\n    this.enemyCreator = levels[this.level].sendNextWave();\r\n    if (levels[this.level].wave >= levels[this.level].enemyCreators.length) {\r\n      this.level++;\r\n      this.towers = [];\r\n    }\r\n    nextWave = false;\r\n    GameState.cancelNextRequest = false;\r\n  }\r\n\r\n  checkCanProceed() {\r\n    if (this.level > 2 || GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      add(score);\r\n    }\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    createLevels();\r\n    makeParticle2();\r\n    this.myMouse = new Mouse();\r\n    GameState.cancelNextRequest = false;\r\n    GameState.life = 10;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push({\r\n          x: i,\r\n          y: j,\r\n        });\r\n      }\r\n      cellSet.push(row);\r\n    }\r\n\r\n    towerElements = document.getElementsByClassName(\"tower\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].addEventListener(\"click\", this.createElement, false);\r\n    }\r\n\r\n    towerElements2 = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements2.length; i++) {\r\n      towerElements2[i].addEventListener(\"click\", this.muteVolume, false);\r\n    }\r\n    startButton = document.getElementById(\"startButton\");\r\n    startButton.addEventListener(\"click\", this.startNewWave);\r\n\r\n    this.bulletController = new BulletController(this.creeps);\r\n\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-5-3.png\", 300, 500, 1000, 1)\r\n    // );\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-3-3.png\", 600, 500, 2000, 2)\r\n    // );\r\n\r\n    this.myMouse.register(\"mousedown\", this.downHandler);\r\n\r\n    // this.myMouse.register('mouseup', function(e, elapsedTime) {\r\n    //   mouse.isActive = false;\r\n    // });\r\n\r\n    this.myMouse.register(\"mousemove\", function (e, elapsedTime) {\r\n      if (mouse.isActive) {\r\n        const canvasPosition = canvas.getBoundingClientRect();\r\n        mouse.x = e.clientX - canvasPosition.left;\r\n        mouse.y = e.clientY - canvasPosition.top;\r\n        if (mouse.y < 200) {\r\n          mouse.y = 200;\r\n        }\r\n        this.renderCircle = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n    this.myMouse.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n\r\n    self.myKeyboard.register(upgrade, function (elapsedTime) {\r\n      self.upgrade(elapsedTime);\r\n    });\r\n\r\n    self.myKeyboard.register(sell, function (elapsedTime) {\r\n      self.sell(elapsedTime);\r\n    });\r\n\r\n    self.myKeyboard.register(start, function (elapsedTime) {\r\n      self.startNewWave(elapsedTime);\r\n    });\r\n\r\n    // self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      // this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n\r\n    particleSystem.update(elapsedTime);\r\n    let creepsLength = this.creeps.length;\r\n    for (let i = 0; i < creepsLength; i++) {\r\n      let creep = this.creeps[i];\r\n      if (creep) {\r\n        if (creep.player.reachRight() || creep.player.reachBottom()) {\r\n          this.creeps.splice(i, 1);\r\n          GameState.life--;\r\n          continue;\r\n        }\r\n        if (creep.health == 0) {\r\n          let x = creep.player.specs.center.x;\r\n          let y = creep.player.specs.center.y;\r\n          score += creep.maxHealth;\r\n          this.creeps.splice(i, 1);\r\n          creepDied(x, y);\r\n          totalCreepKilled++;\r\n          money += creep.maxHealth;\r\n          gameSound.playSound(\"die\");\r\n          let textEvent = new MovingEvents({\r\n            size: { x: 50, y: 50 }, // Size in pixels\r\n            center: { x: x, y: y },\r\n            rotation: 0,\r\n            moveRate: 125 / 1000, // Pixels per second\r\n            rotateRate: Math.PI / 1000, // Radians per second\r\n            continousSpeed: 50,\r\n            yDirection: -1,\r\n            xDirection: 0,\r\n          });\r\n          this.flyingScores.push(\r\n            new FlyingScore(creep.maxHealth, textEvent, true)\r\n          );\r\n          continue;\r\n        }\r\n        creep.update(elapsedTime);\r\n        let towersLength = this.towers.length;\r\n        for (let i = 0; i < towersLength; i++) {\r\n          let tower = this.towers[i];\r\n          console.log(i+\"th index count is\" + tower.specs.delay)\r\n          if (typeof creep.flying == \"undefined\" && tower.specs.type == 3) {\r\n            console.log(\"flying\" + \" \" + i);\r\n          } else if (\r\n            typeof creep.flying != \"undefined\" &&\r\n            tower.specs.type < 3\r\n          ) {\r\n            console.log(\"flying\" + \" \" + i);\r\n          } else {\r\n            if (isColliding(creep, tower, tower.specs.radius)) {\r\n              tower.setTarget(\r\n                creep.player.specs.center.x,\r\n                creep.player.specs.center.y\r\n              );\r\n              if (tower.canShoot) {\r\n                let direction = {\r\n                  x: tower.specs.target.x - tower.specs.center.x,\r\n                  y: tower.specs.target.y - tower.specs.center.y,\r\n                };\r\n                direction = normalize(direction);\r\n                let bulletStartX = tower.specs.center.x;\r\n                let bulletStartY = tower.specs.center.y;\r\n\r\n                this.bulletController.addBullet(\r\n                  bulletStartX,\r\n                  bulletStartY,\r\n                  creep,\r\n                  tower.specs.power,\r\n                  tower.specs.type\r\n                );\r\n                gameSound.playSound(\"shoot\");\r\n              }\r\n            }\r\n          }\r\n\r\n          tower.update(elapsedTime);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.bulletController.update(elapsedTime);\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].update(elapsedTime);\r\n      if (!this.flyingScores[i].isVisible) {\r\n        this.flyingScores.splice(i, 1);\r\n        i--;\r\n        scorelength--;\r\n      }\r\n    }\r\n    if (this.enemyCreator) {\r\n      let newEnemy = this.enemyCreator.createEnemy(elapsedTime);\r\n      if (newEnemy) {\r\n        this.creeps.push(newEnemy);\r\n      }\r\n    }\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n    document.getElementById(\"money\").innerHTML = money;\r\n    let waveString = levels[this.level].wave + 1 + \"/\" + maxWave;\r\n    document.getElementById(\"wave\").innerHTML = waveString;\r\n    var startButton = document.getElementById(\"startButton\");\r\n    document.getElementById(\"level\").innerHTML = this.level + 1;\r\n    document.getElementById(\"killed\").innerHTML = totalCreepKilled;\r\n    // startButton.style.display = \"none\";\r\n    if (nextWave) {\r\n      startButton.style.display = \"block\";\r\n    }\r\n    let totalTowerValues = 0;\r\n    this.towers.forEach((tower) => {\r\n      totalTowerValues += tower.specs.cost;\r\n    });\r\n    document.getElementById(\"towerValue\").innerHTML = totalTowerValues;\r\n\r\n    if (moneyRequired > 0) {\r\n      document.getElementById(\"selectedInfo\").style.display = \"block\";\r\n      document.getElementById(\"moneyRequired\").innerHTML = moneyRequired;\r\n      document.getElementById(\"power\").innerHTML =\r\n        this.towerType[parseInt(towerTypeSelected) - 1];\r\n    } else {\r\n      document.getElementById(\"selectedInfo\").style.display = \"none\";\r\n      document.getElementById(\"moneyRequired\").innerHTML = \"\";\r\n      document.getElementById(\"power\").innerHTML = \"\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    context.fillStyle = \"green\";\r\n    context.fillRect(0, 0 + 200, 600, 800);\r\n    context.clearRect(50, 250, 500, 500);\r\n    context.clearRect(0, 400, 50, 200);\r\n    context.clearRect(550, 400, 50, 200);\r\n    context.clearRect(175, 200, 225, 50);\r\n    context.clearRect(175, 750, 225, 50);\r\n\r\n    if (mouse.isActive) {\r\n      let placementFlag = false;\r\n      for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n          let x1 = cellSet[i][j].x;\r\n          let y1 = cellSet[i][j].y;\r\n          if (\r\n            Math.floor((mouse.x - leftOffset) / cellWidth) == x1 &&\r\n            Math.floor((mouse.y - topOffset) / cellWidth) == y1\r\n          ) {\r\n            this.canPlace = true;\r\n            placementFlag = true;\r\n            context.beginPath();\r\n            context.rect(\r\n              x1 * cellWidth + leftOffset,\r\n              y1 * cellWidth + topOffset,\r\n              cellWidth,\r\n              cellWidth\r\n            );\r\n            context.stroke();\r\n          }\r\n        }\r\n      }\r\n      if (!placementFlag) {\r\n        this.canPlace = false;\r\n      }\r\n    }\r\n\r\n    // ctx.strokeRect(50, 50, 50, 50);\r\n\r\n    context.beginPath();\r\n    context.moveTo(0, 200);\r\n    context.lineTo(canvas.width, 200);\r\n    context.stroke();\r\n    if (renderCircle) {\r\n      drawTower(towerRadius);\r\n    }\r\n    this.renderScore();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    let towersLength = this.towers.length;\r\n    for (let i = 0; i < towersLength; i++) {\r\n      let tower = this.towers[i];\r\n      tower.render();\r\n    }\r\n    if (towerClicked) {\r\n      drawRectangle({\r\n        x: towerClicked.specs.center.x - cellWidth / 2,\r\n        y: towerClicked.specs.center.y - cellWidth / 2,\r\n        width: 50,\r\n        height: 50,\r\n        fill: \"#ffd63f9e\",\r\n        stroke: \"red\",\r\n      });\r\n    }\r\n\r\n    this.bulletController.render();\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].render();\r\n    }\r\n    particleSystem.render();\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    gameSound = new Sound();\r\n    gameSound.loadAudio();\r\n    // this.sound.playSound(\"end\");\r\n    this.registerKey();\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      if (\r\n        self.enemyCreator &&\r\n        self.enemyCreator.totalEnemy <= 0 &&\r\n        self.creeps.length == 0 &&\r\n        wave > 0\r\n      ) {\r\n        nextWave = true;\r\n        wave--;\r\n      } else {\r\n        self.processInput(time - lastTimeStamp);\r\n        self.update(time - lastTimeStamp);\r\n      }\r\n      // self.checkCanProceed();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n        self.processInput(time - lastTimeStamp);\r\n        self.update(time - lastTimeStamp);\r\n        lastTimeStamp = time;\r\n        self.render();\r\n      } else {\r\n        if (score > 0) {\r\n          add(score);\r\n        }\r\n        context.font = \"70px roboto\";\r\n        context.textAlign = \"center\";\r\n        context.fillText(\"Game Over\", canvas.width / 2, canvas.height * 0.8);\r\n        // for (var i = 0; i < towerElements.length; i++) {\r\n        //   towerElements[i].removeEventListener(\r\n        //     \"click\",\r\n        //     this.createElement,\r\n        //     false\r\n        //   );\r\n        // }\r\n\r\n        // for (var i = 0; i < towerElements2.length; i++) {\r\n        //   towerElements2[i].removeEventListener(\r\n        //     \"click\",\r\n        //     this.muteVolume,\r\n        //     false\r\n        //   );\r\n        // }\r\n        // startButton.removeEventListener(\"click\", self.startNewWave);\r\n        setTimeout(() => {\r\n          self.manager.showScreen(\"mainmenu\");\r\n        }, 2000);\r\n      }\r\n      lastTimeStamp = time;\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}