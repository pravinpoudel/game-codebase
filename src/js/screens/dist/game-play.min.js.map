{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","lastTimeStamp","model","initialize","bind","run","sound","particlesSmoke","registerKey","self","GameState","cancelNextRequest","showScreen","ParticleSystem","center","y","size","stdev","speed","mean","lifetime","left","right","top","bottom","register","createEffect","x","MovingEvents","Math","PI","continousSpeed","playerSpecs","dir","gameModel","playerEvent","image","assets","EnemyController","playerModel","moveRate","update","elapsedTime","upgrade","localStorage","sell","spriteSheet","spriteCount","cleanAll","moveForward","rotateLeft","rotateRight","life","document","getElementById","innerHTML","score","context","width","canvas","height","renderScore","render","Sound","loadAudio","playSound","player","moveTop","moveDown","moveLeft","moveRight","performance","now","requestAnimationFrame","gameLoop","time","processInput"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.registerKey = this.registerKey.bind(this);\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    this.particlesSmoke = new ParticleSystem({\r\n      center: { x: 300, y: 300 },\r\n      size: { mean: 10, stdev: 4 },\r\n      speed: { mean: 50, stdev: 25 },\r\n      lifetime: { mean: 4, stdev: 1 },\r\n      left: 100,\r\n      right: 100,\r\n      top: 100,\r\n      bottom: 100,\r\n      image: GameState.assets[\"fire\"],\r\n    });\r\n\r\n    this.particlesSmoke.createEffect();\r\n\r\n    //all the event to handle movement\r\n    this.playerEvent = new MovingEvents({\r\n      size: { x: 50, y: 50 }, // Size in pixels\r\n      center: { x: 50, y: 150 },\r\n      rotation: 0,\r\n      moveRate: 125 / 1000, // Pixels per second\r\n      rotateRate: Math.PI / 1000, // Radians per second\r\n      continousSpeed: 100,\r\n    });\r\n\r\n    // all the specs of the player sprite\r\n    let playerSpecs = {\r\n      spriteSheet: dir + \"assets/spritesheet-bird.png\",\r\n      spriteCount: 14,\r\n      spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    };\r\n\r\n    //make a playerModel\r\n    self.playerModel = new gameModel(playerSpecs, this.playerEvent, true);\r\n    //register that event to event handler\r\n    self.enemycontroller = new EnemyController(self.playerModel);\r\n    // self.enemycontroller.createEnemy({\r\n    //   size: { x: 50, y: 50 }, // Size in pixels\r\n    //   center: { x: 50, y: 150 },\r\n    //   rotation: 0,\r\n    //   moveRate: 125 / 1000,\r\n    //   rotateRate: Math.PI / 1000,\r\n    //   continousSpeed: 100,\r\n    //   image: GameState.assets[\"bird\"],\r\n    //   spriteSheet: dir + \"assets/spritesheet-bird.png\",\r\n    //   spriteCount: 14,\r\n    //   spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    // });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n    self.myKeyboard.cleanAll();\r\n    \r\n    self.myKeyboard.register(upgrade, self.playerEvent.moveForward);\r\n    self.myKeyboard.register(sell, self.playerEvent.rotateLeft);\r\n    self.myKeyboard.register(start, self.playerEvent.rotateRight);\r\n\r\n    // self.myKeyboard.register(\"3\", playerEvent.runRight);\r\n    // self.myKeyboard.register(\"1\", playerEvent.runLeft);\r\n    // self.myKeyboard.register(\"5\", playerEvent.runTop);\r\n    // self.myKeyboard.register(\"2\", playerEvent.runDown);\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n    this.playerModel.update(elapsedTime);\r\n    // this.enemycontroller.update(elapsedTime);\r\n    // model.update(elapsedTime);\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    this.renderScore();\r\n    this.playerModel.render();\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    this.sound = new Sound();\r\n    this.sound.loadAudio();\r\n    this.sound.playSound(\"end\");\r\n    this.registerKey();\r\n\r\n    this.myKeyboard.register(\"ArrowUp\", self.playerModel.player.moveTop);\r\n    this.myKeyboard.register(\"ArrowDown\", self.playerModel.player.moveDown);\r\n    this.myKeyboard.register(\"ArrowLeft\", self.playerModel.player.moveLeft);\r\n    this.myKeyboard.register(\"ArrowRight\", self.playerModel.player.moveRight);\r\n    // console.log(self.playerModel.moveRight);\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}