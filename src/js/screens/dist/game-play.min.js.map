{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","myMouse","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","renderCircle","sound","particlesSmoke","makeCreateCreep1","makeCreateCreep2","makeCreateCreep3","registerKey","Image","render","creeps","flyingScores","console","tower1","mouse","y","firstTime","downHandler","isActive","towers","push","createTower","x","length","canvas","getBoundingClientRect","canvasPosition","register","e","showScreen","bulletController","BulletController","elapsedTime","top","update","localStorage","cleanAll","upgrade","GameState","creepsLength","creep","i","health","player","specs","center","textEvent","size","splice","rotation","Math","PI","yDirection","xDirection","FlyingScore","moveRate","towersLength","rotateRate","isColliding","tower","continousSpeed","direction","target","normalize","bulletStartX","bulletStartY","addBullet","canShoot","scorelength","isVisible","document","getElementById","innerHTML","score","life","context","clearRect","width","height","drawTower","renderScore","Sound","performance","now","cancelNextRequest","requestAnimationFrame","gameLoop","time","processInput"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.myMouse = null;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.renderCircle = false;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.creeps = [\r\n      makeCreateCreep1(20, 300),\r\n      makeCreateCreep2(100, 300),\r\n      makeCreateCreep3(300, 300),\r\n    ];\r\n    this.towers = [];\r\n    this.registerKey = this.registerKey.bind(this);\r\n    this.flyingScores = [];\r\n    this.tower1 = new Image();\r\n    this.tower1.src = \"assets/turret/turret-5-3.png\";\r\n    this.render = this.render.bind(this);\r\n    this.firstTime = true;\r\n    this.downHandler = this.downHandler.bind(this);\r\n  }\r\n\r\n   downHandler(e, elapsedTime) {\r\n     console.log(mouse.x, mouse.y);\r\n    mouse.isActive = true;\r\n    if(firstTime){\r\n      console.log(\"firsttime\");\r\n      firstTime = false;\r\n      renderCircle = true;\r\n      mouse.isActive = true;\r\n    }\r\n    else{\r\n      firstTime = true;\r\n      mouse.isActive = false;\r\n      renderCircle = false;\r\n      this.towers.push(\r\n        createTower(\"assets/turret/turret-5-3.png\", mouse.x, mouse.y, 1000, 1)\r\n      );\r\n      console.log(this.towers.length)\r\n  \r\n    }\r\n    const canvasPosition = canvas.getBoundingClientRect(); \r\n    mouse.x = e.x ;\r\n    mouse.y = e.y ; \r\n\r\n}\r\n\r\n  initialize() {\r\n    let self = this;\r\n    this.myMouse = new Mouse();\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    this.bulletController = new BulletController();\r\n\r\n    this.towers.push(\r\n      createTower(\"assets/turret/turret-5-3.png\", 300, 500, 1000, 1)\r\n    );\r\n    this.towers.push(\r\n      createTower(\"assets/turret/turret-3-3.png\", 600, 500, 2000, 2)\r\n    );\r\n\r\n    this.myMouse.register('mousedown', this.downHandler);\r\n\r\n  // this.myMouse.register('mouseup', function(e, elapsedTime) {\r\n  //   mouse.isActive = false;\r\n  // });\r\n\r\n  this.myMouse.register('mousemove', function(e, elapsedTime) { \r\n    if (mouse.isActive) {\r\n        const canvasPosition = canvas.getBoundingClientRect(); \r\n        mouse.x = e.clientX - canvasPosition.left ;\r\n        mouse.y = e.clientY - canvasPosition.top;    \r\n        this.renderCircle = true; \r\n      }\r\n  });\r\n\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n    this.myMouse.update(elapsedTime);\r\n\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n    self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n    let creepsLength = this.creeps.length;\r\n    for (let i = 0; i < creepsLength; i++) {\r\n      let creep = this.creeps[i];\r\n      if (creep) {\r\n        if (creep.health == 0) {\r\n          let x = creep.player.specs.center.x;\r\n          let y = creep.player.specs.center.y;\r\n          this.creeps.splice(i, 1);\r\n          let textEvent = new MovingEvents({\r\n            size: { x: 50, y: 50 }, // Size in pixels\r\n            center: { x: x, y: y },\r\n            rotation: 0,\r\n            moveRate: 125 / 1000, // Pixels per second\r\n            rotateRate: Math.PI / 1000, // Radians per second\r\n            continousSpeed: 50,\r\n            yDirection: -1,\r\n            xDirection: 0,\r\n          });\r\n          this.flyingScores.push(new FlyingScore(\"10\", textEvent, true));\r\n          continue;\r\n        }\r\n        creep.update(elapsedTime);\r\n        let towersLength = this.towers.length;\r\n        for (let i = 0; i < towersLength; i++) {\r\n          let tower = this.towers[i];\r\n          if (isColliding(creep, tower, 200)) {\r\n            tower.setTarget(\r\n              creep.player.specs.center.x,\r\n              creep.player.specs.center.y\r\n            );\r\n            if (tower.canShoot) {\r\n              let direction = {\r\n                x: tower.specs.target.x - tower.specs.center.x,\r\n                y: tower.specs.target.y - tower.specs.center.y,\r\n              };\r\n              direction = normalize(direction);\r\n              let bulletStartX = tower.specs.center.x;\r\n              let bulletStartY = tower.specs.center.y;\r\n\r\n              this.bulletController.addBullet(\r\n                bulletStartX,\r\n                bulletStartY,\r\n                creep,\r\n                tower.specs.power\r\n              );\r\n            }\r\n          }\r\n          tower.update(elapsedTime);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.bulletController.update(elapsedTime);\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].update(elapsedTime);\r\n      if (!this.flyingScores[i].isVisible) {\r\n        this.flyingScores.splice(i, 1);\r\n        i--;\r\n        scorelength--;\r\n      }\r\n    }\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    if(renderCircle){\r\n      drawTower(this.tower1, 200);\r\n\r\n    }\r\n    this.renderScore();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    let towersLength = this.towers.length;\r\n    for (let i = 0; i < towersLength; i++) {\r\n      let tower = this.towers[i];\r\n      tower.render();\r\n    }\r\n    this.bulletController.render();\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].render();\r\n    }\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    this.sound = new Sound();\r\n\r\n    this.sound.loadAudio();\r\n    this.registerKey();\r\n\r\n    // this.myKeyboard.register(\"ArrowUp\", self.playerModel.player.moveTop);\r\n    // this.myKeyboard.register(\"ArrowDown\", self.playerModel.player.moveDown);\r\n    // this.myKeyboard.register(\"ArrowLeft\", self.playerModel.player.moveLeft);\r\n    // this.myKeyboard.register(\"ArrowRight\", self.playerModel.player.moveRight);\r\n    // console.log(self.playerModel.moveRight);\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}