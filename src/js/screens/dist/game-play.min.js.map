{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","myMouse","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","renderCircle","sound","particlesSmoke","registerKey","Image","render","downHandler","upgrade","creeps","sell","towers","renderScore","flyingScores","tower1","firstTime","moneyRequired","Math","specs","cost","console","enemyCreator","money","undefined","totalElapsedTime","towerType","level","elapsedTime","log","towerClicked","upgradeCount","floor","delay","power","gameSound","playSound","towerLength","length","i","cellWidth","y","center","x","towerSold","splice","selectedTower","getAttribute","towerTypeSelected","parseInt","mouse","isActive","e","towerRadius","canCreated","canPlace","enemyCreators","position","isColliding3","decision","levels","canvasPosition","createTower","clientX","findSelectedTower","preventDefault","towerElements","canvas","getBoundingClientRect","myId","document","getElementById","display","clientY","top","getElementsByClassName","style","GameState","sendNextWave","wave","add","score","cancelNextRequest","life","createLevels","Mouse","register","showScreen","cols","j","row","push","cellSet","towerElements2","createElement","addEventListener","muteVolume","startButton","bulletController","BulletController","left","update","localStorage","startNewWave","start","particleSystem","creepsLength","player","reachRight","creep","reachBottom","health","maxHealth","creepDied","totalCreepKilled","size","MovingEvents","continousSpeed","rotation","moveRate","rotateRate","FlyingScore","textEvent","yDirection","towersLength","tower","type","flying","isColliding","radius","canShoot","direction","target","normalize","bulletStartY","scorelength","isVisible","newEnemy","createEnemy","innerHTML","waveString","totalTowerValues","forEach","context","clearRect","fillRect","placementFlag","rows","x1","y1","leftOffset","topOffset","drawTower","moveTo","lineTo","width","height","fill","stroke","Sound","performance","now","requestAnimationFrame","gameLoop","time","nextWave","totalEnemy","processInput","fillText","textAlign","setTimeout"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.myMouse = null;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.renderCircle = false;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.creeps = [];\r\n    this.towers = [];\r\n    this.registerKey = this.registerKey.bind(this);\r\n    this.flyingScores = [];\r\n    this.tower1 = new Image();\r\n    this.tower1.src = \"assets/turret/turret-5-3.png\";\r\n    this.render = this.render.bind(this);\r\n    this.firstTime = true;\r\n    this.downHandler = this.downHandler.bind(this);\r\n    this.enemyCreator = null;\r\n    this.canPlace = false;\r\n    this.upgrade = this.upgrade.bind(this);\r\n    this.sell = this.sell.bind(this);\r\n    this.renderScore = this.renderScore.bind(this);\r\n    this.startNewWave = this.startNewWave.bind(this);\r\n    this.level = 0;\r\n    this.towerType = [\"Gun\", \"Missile\", \"Air\", \"Mix (Air + Ground)\"];\r\n  }\r\n\r\n  upgrade(elapsedTime) {\r\n    let moneyRequired = Math.floor(0.5 * towerClicked.specs.cost);\r\n    console.log(towerClicked)\r\n    if (moneyRequired <= money) {\r\n      if (towerClicked) {\r\n        if (towerClicked.totalElapsedTime == undefined) {\r\n          towerClicked.totalElapsedTime = 0;\r\n        } else {\r\n          towerClicked.totalElapsedTime += elapsedTime;\r\n          if (towerClicked.totalElapsedTime >= 200) {\r\n            console.log(\"upgraded\");\r\n            towerClicked.totalElapsedTime -= 200;\r\n            if (!towerClicked.upgradeCount) {\r\n              towerClicked.upgradeCount = 1;\r\n            } else {\r\n              if (towerClicked.upgradeCount >= 3) {\r\n                return;\r\n              } else {\r\n                towerClicked.upgradeCount = towerClicked.upgradeCount + 1;\r\n                towerClicked.delay = Math.floor(towerClicked.delay * 0.7);\r\n                towerClicked.specs.power = towerClicked.specs.power + 1;\r\n                money -= moneyRequired;\r\n                gameSound.playSound(\"add\");\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  sell() {\r\n    if (towerClicked) {\r\n      let towerLength = this.towers.length;\r\n      for (let i = 0; i < towerLength; i++) {\r\n        if (\r\n          isColliding2(\r\n            this.towers[i].specs.center.x - cellWidth / 2,\r\n            this.towers[i].specs.center.y - cellWidth / 2,\r\n            cellWidth,\r\n            towerClicked.specs.center.x - cellWidth / 2,\r\n            towerClicked.specs.center.y - cellWidth / 2,\r\n            cellWidth\r\n          )\r\n        ) {\r\n          money += Math.floor(0.7 * towerClicked.specs.cost);\r\n          towerSold(this.towers[i].specs.center.x - cellWidth / 2, this.towers[i].specs.center.y - cellWidth / 2);\r\n          this.towers.splice(i, 1);\r\n          gameSound.playSound(\"die\");\r\n          towerClicked = null;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createElement() {\r\n    selectedTower = this.getAttribute(\"data-myName\");\r\n    towerRadius = this.getAttribute(\"data-radius\");\r\n    moneyRequired = parseInt(this.getAttribute(\"data-cost\"));\r\n    towerTypeSelected = parseInt(this.getAttribute(\"data-type\"));\r\n    if (moneyRequired <= money) {\r\n      renderCircle = true;\r\n      mouse.isActive = true;\r\n    }\r\n  }\r\n\r\n  downHandler(e, elapsedTime) {\r\n    if (mouse.isActive) {\r\n      firstTime = true;\r\n      mouse.isActive = false;\r\n      renderCircle = false;\r\n      let decision = canCreated(this.towers) && this.canPlace;\r\n      if (decision) {\r\n        if (levels[this.level].enemyCreators[0].position == \"top\") {\r\n          if (\r\n            isColliding3(\r\n              Math.floor(mouse.x / cellWidth) * cellWidth,\r\n              Math.floor((mouse.y - 200) / cellWidth) * cellWidth + 200,\r\n              10,\r\n              10,\r\n              175,\r\n              200,\r\n              225,\r\n              600\r\n            )\r\n          ) {\r\n            console.log(\"it is blocking the path\");\r\n            return;\r\n          }\r\n        } else if (levels[this.level].enemyCreators[0].position == \"left\") {\r\n          if (\r\n            isColliding3(\r\n              Math.floor(mouse.x / cellWidth) * cellWidth,\r\n              Math.floor((mouse.y - 200) / cellWidth) * cellWidth + 200,\r\n              10,\r\n              10,\r\n              0,\r\n              400,\r\n              600,\r\n              200\r\n            )\r\n          ) {\r\n            console.log(\"it is blocking\");\r\n            return;\r\n          }\r\n        }\r\n        this.towers.push(\r\n          createTower(\r\n            GameState.assets[selectedTower],\r\n            Math.floor(mouse.x / cellWidth) * cellWidth,\r\n            Math.floor((mouse.y - 200) / cellWidth) * cellWidth + 200,\r\n            2500,\r\n            1,\r\n            towerRadius,\r\n            moneyRequired,\r\n            towerTypeSelected\r\n          )\r\n        );\r\n        money = money - moneyRequired;\r\n        moneyRequired = 0;\r\n        towerTypeSelected = 0;\r\n        gameSound.playSound(\"add\");\r\n      }\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n    } else {\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n      mouse.x = e.clientX - canvasPosition.left;\r\n      mouse.y = e.clientY - canvasPosition.top;\r\n      findSelectedTower(this.towers);\r\n    }\r\n  }\r\n\r\n  muteVolume(e) {\r\n    e.preventDefault();\r\n    var towerElements = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].style.display = \"block\";\r\n    }\r\n    let myId = this.getAttribute(\"data-myId\");\r\n    document.getElementById(myId).style.display = \"none\";\r\n    if (myId == \"muteButton\") {\r\n      gameSound.stopAllSound();\r\n    }\r\n    if (myId == \"unmuteButton\") {\r\n      gameSound.unMuteSound();\r\n    }\r\n  }\r\n\r\n  startNewWave(e) {\r\n    e.preventDefault();\r\n    console.log(\"start button clicked\");\r\n    this.enemyCreator = levels[this.level].sendNextWave();\r\n    if (levels[this.level].wave >= levels[this.level].enemyCreators.length) {\r\n      this.level++;\r\n      this.towers = [];\r\n    }\r\n    nextWave = false;\r\n    GameState.cancelNextRequest = false;\r\n  }\r\n\r\n  checkCanProceed() {\r\n    if (this.level > 2 || GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      add(score);\r\n    }\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    createLevels();\r\n    makeParticle2();\r\n    this.myMouse = new Mouse();\r\n    GameState.cancelNextRequest = false;\r\n    GameState.life = 10;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push({\r\n          x: i,\r\n          y: j,\r\n        });\r\n      }\r\n      cellSet.push(row);\r\n    }\r\n\r\n    towerElements = document.getElementsByClassName(\"tower\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].addEventListener(\"click\", this.createElement, false);\r\n    }\r\n\r\n    towerElements2 = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements2.length; i++) {\r\n      towerElements2[i].addEventListener(\"click\", this.muteVolume, false);\r\n    }\r\n    startButton = document.getElementById(\"startButton\");\r\n    startButton.addEventListener(\"click\", this.startNewWave);\r\n\r\n    this.bulletController = new BulletController(this.creeps);\r\n\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-5-3.png\", 300, 500, 1000, 1)\r\n    // );\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-3-3.png\", 600, 500, 2000, 2)\r\n    // );\r\n\r\n    this.myMouse.register(\"mousedown\", this.downHandler);\r\n\r\n    // this.myMouse.register('mouseup', function(e, elapsedTime) {\r\n    //   mouse.isActive = false;\r\n    // });\r\n\r\n    this.myMouse.register(\"mousemove\", function (e, elapsedTime) {\r\n      if (mouse.isActive) {\r\n        const canvasPosition = canvas.getBoundingClientRect();\r\n        mouse.x = e.clientX - canvasPosition.left;\r\n        mouse.y = e.clientY - canvasPosition.top;\r\n        if (mouse.y < 200) {\r\n          mouse.y = 200;\r\n        }\r\n        this.renderCircle = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n    this.myMouse.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n\r\n    self.myKeyboard.register(upgrade, function (elapsedTime) {\r\n      self.upgrade(elapsedTime);\r\n    });\r\n\r\n    self.myKeyboard.register(sell, function (elapsedTime) {\r\n      self.sell(elapsedTime);\r\n    });\r\n\r\n    self.myKeyboard.register(start, function (elapsedTime) {\r\n      self.startNewWave(elapsedTime);\r\n    });\r\n\r\n    // self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      // this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n\r\n    particleSystem.update(elapsedTime);\r\n    let creepsLength = this.creeps.length;\r\n    for (let i = 0; i < creepsLength; i++) {\r\n      let creep = this.creeps[i];\r\n      if (creep) {\r\n        if (creep.player.reachRight() || creep.player.reachBottom()) {\r\n          this.creeps.splice(i, 1);\r\n          GameState.life--;\r\n          continue;\r\n        }\r\n        if (creep.health == 0) {\r\n          let x = creep.player.specs.center.x;\r\n          let y = creep.player.specs.center.y;\r\n          score += creep.maxHealth;\r\n          this.creeps.splice(i, 1);\r\n          creepDied(x, y);\r\n          totalCreepKilled++;\r\n          money += creep.maxHealth;\r\n          gameSound.playSound(\"die\");\r\n          let textEvent = new MovingEvents({\r\n            size: { x: 50, y: 50 }, // Size in pixels\r\n            center: { x: x, y: y },\r\n            rotation: 0,\r\n            moveRate: 125 / 1000, // Pixels per second\r\n            rotateRate: Math.PI / 1000, // Radians per second\r\n            continousSpeed: 50,\r\n            yDirection: -1,\r\n            xDirection: 0,\r\n          });\r\n          this.flyingScores.push(\r\n            new FlyingScore(creep.maxHealth, textEvent, true)\r\n          );\r\n          continue;\r\n        }\r\n        creep.update(elapsedTime);\r\n        let towersLength = this.towers.length;\r\n        for (let i = 0; i < towersLength; i++) {\r\n          let tower = this.towers[i];\r\n          // console.log(i+\"th index count is\" + tower.specs.delay)\r\n          if (typeof creep.flying == \"undefined\" && tower.specs.type == 3) {\r\n            console.log(\"flying\" + \" \" + i);\r\n          } else if (\r\n            typeof creep.flying != \"undefined\" &&\r\n            tower.specs.type < 3\r\n          ) {\r\n            console.log(\"flying\" + \" \" + i);\r\n          } else {\r\n            if (isColliding(creep, tower, tower.specs.radius)) {\r\n              tower.setTarget(\r\n                creep.player.specs.center.x,\r\n                creep.player.specs.center.y\r\n              );\r\n              if (tower.canShoot) {\r\n                let direction = {\r\n                  x: tower.specs.target.x - tower.specs.center.x,\r\n                  y: tower.specs.target.y - tower.specs.center.y,\r\n                };\r\n                direction = normalize(direction);\r\n                let bulletStartX = tower.specs.center.x;\r\n                let bulletStartY = tower.specs.center.y;\r\n\r\n                this.bulletController.addBullet(\r\n                  bulletStartX,\r\n                  bulletStartY,\r\n                  creep,\r\n                  tower.specs.power,\r\n                  tower.specs.type\r\n                );\r\n                gameSound.playSound(\"shoot\");\r\n              }\r\n            }\r\n          }\r\n\r\n          tower.update(elapsedTime);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.bulletController.update(elapsedTime);\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].update(elapsedTime);\r\n      if (!this.flyingScores[i].isVisible) {\r\n        this.flyingScores.splice(i, 1);\r\n        i--;\r\n        scorelength--;\r\n      }\r\n    }\r\n    if (this.enemyCreator) {\r\n      let newEnemy = this.enemyCreator.createEnemy(elapsedTime);\r\n      if (newEnemy) {\r\n        this.creeps.push(newEnemy);\r\n      }\r\n    }\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n    document.getElementById(\"money\").innerHTML = money;\r\n    let waveString = levels[this.level].wave + 1 + \"/\" + maxWave;\r\n    document.getElementById(\"wave\").innerHTML = waveString;\r\n    var startButton = document.getElementById(\"startButton\");\r\n    document.getElementById(\"level\").innerHTML = this.level + 1;\r\n    document.getElementById(\"killed\").innerHTML = totalCreepKilled;\r\n    // startButton.style.display = \"none\";\r\n    if (nextWave) {\r\n      startButton.style.display = \"block\";\r\n    }\r\n    let totalTowerValues = 0;\r\n    this.towers.forEach((tower) => {\r\n      totalTowerValues += tower.specs.cost;\r\n    });\r\n    document.getElementById(\"towerValue\").innerHTML = totalTowerValues;\r\n\r\n    if (moneyRequired > 0) {\r\n      document.getElementById(\"selectedInfo\").style.display = \"block\";\r\n      document.getElementById(\"moneyRequired\").innerHTML = moneyRequired;\r\n      document.getElementById(\"power\").innerHTML =\r\n        this.towerType[parseInt(towerTypeSelected) - 1];\r\n    } else {\r\n      document.getElementById(\"selectedInfo\").style.display = \"none\";\r\n      document.getElementById(\"moneyRequired\").innerHTML = \"\";\r\n      document.getElementById(\"power\").innerHTML = \"\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    context.fillStyle = \"green\";\r\n    context.fillRect(0, 0 + 200, 600, 800);\r\n    context.clearRect(50, 250, 500, 500);\r\n    context.clearRect(0, 400, 50, 200);\r\n    context.clearRect(550, 400, 50, 200);\r\n    context.clearRect(175, 200, 225, 50);\r\n    context.clearRect(175, 750, 225, 50);\r\n\r\n    if (mouse.isActive) {\r\n      let placementFlag = false;\r\n      for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n          let x1 = cellSet[i][j].x;\r\n          let y1 = cellSet[i][j].y;\r\n          if (\r\n            Math.floor((mouse.x - leftOffset) / cellWidth) == x1 &&\r\n            Math.floor((mouse.y - topOffset) / cellWidth) == y1\r\n          ) {\r\n            this.canPlace = true;\r\n            placementFlag = true;\r\n            context.beginPath();\r\n            context.rect(\r\n              x1 * cellWidth + leftOffset,\r\n              y1 * cellWidth + topOffset,\r\n              cellWidth,\r\n              cellWidth\r\n            );\r\n            context.stroke();\r\n          }\r\n        }\r\n      }\r\n      if (!placementFlag) {\r\n        this.canPlace = false;\r\n      }\r\n    }\r\n\r\n    // ctx.strokeRect(50, 50, 50, 50);\r\n\r\n    context.beginPath();\r\n    context.moveTo(0, 200);\r\n    context.lineTo(canvas.width, 200);\r\n    context.stroke();\r\n    if (renderCircle) {\r\n      drawTower(towerRadius);\r\n    }\r\n    this.renderScore();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    let towersLength = this.towers.length;\r\n    for (let i = 0; i < towersLength; i++) {\r\n      let tower = this.towers[i];\r\n      tower.render();\r\n    }\r\n    if (towerClicked) {\r\n      drawRectangle({\r\n        x: towerClicked.specs.center.x - cellWidth / 2,\r\n        y: towerClicked.specs.center.y - cellWidth / 2,\r\n        width: 50,\r\n        height: 50,\r\n        fill: \"#ffd63f9e\",\r\n        stroke: \"red\",\r\n      });\r\n    }\r\n\r\n    this.bulletController.render();\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].render();\r\n    }\r\n    particleSystem.render();\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    gameSound = new Sound();\r\n    gameSound.loadAudio();\r\n    // this.sound.playSound(\"end\");\r\n    this.registerKey();\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      if (\r\n        self.enemyCreator &&\r\n        self.enemyCreator.totalEnemy <= 0 &&\r\n        self.creeps.length == 0 &&\r\n        wave > 0\r\n      ) {\r\n        nextWave = true;\r\n        wave--;\r\n      } else {\r\n        self.processInput(time - lastTimeStamp);\r\n        self.update(time - lastTimeStamp);\r\n      }\r\n      // self.checkCanProceed();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n        self.processInput(time - lastTimeStamp);\r\n        self.update(time - lastTimeStamp);\r\n        lastTimeStamp = time;\r\n        self.render();\r\n      } else {\r\n        if (score > 0) {\r\n          add(score);\r\n        }\r\n        context.font = \"70px roboto\";\r\n        context.textAlign = \"center\";\r\n        context.fillText(\"Game Over\", canvas.width / 2, canvas.height * 0.8);\r\n        // for (var i = 0; i < towerElements.length; i++) {\r\n        //   towerElements[i].removeEventListener(\r\n        //     \"click\",\r\n        //     this.createElement,\r\n        //     false\r\n        //   );\r\n        // }\r\n\r\n        // for (var i = 0; i < towerElements2.length; i++) {\r\n        //   towerElements2[i].removeEventListener(\r\n        //     \"click\",\r\n        //     this.muteVolume,\r\n        //     false\r\n        //   );\r\n        // }\r\n        // startButton.removeEventListener(\"click\", self.startNewWave);\r\n        setTimeout(() => {\r\n          self.manager.showScreen(\"mainmenu\");\r\n        }, 2000);\r\n      }\r\n      lastTimeStamp = time;\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}