{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","myMouse","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","renderCircle","sound","particlesSmoke","registerKey","Image","render","downHandler","EnemyCreator","upgrade","creeps","sell","flyingScores","moneyRequired","floor","towerClicked","specs","cost","money","undefined","firstTime","lotalElapsedTime","elapsedTime","console","log","delay","Math","power","towerLength","towers","length","i","center","x","cellWidth","y","myTower","getAttribute","parseInt","towerTypeSelected","selectedTower","mouse","isActive","isColliding2","e","canCreated","canPlace","push","canvas","getBoundingClientRect","decision","clientX","canvasPosition","left","top","findSelectedTower","createTower","towerElements","document","getElementsByClassName","style","display","myId","getElementById","Mouse","register","GameState","cancelNextRequest","rows","row","j","cols","cellSet","showScreen","createElement","towerElements2","addEventListener","muteVolume","BulletController","clientY","bulletController","update","localStorage","life","creepsLength","start","creep","reachRight","health","player","splice","textEvent","MovingEvents","size","moveRate","rotateRate","yDirection","maxHealth","towersLength","tower","score","canShoot","direction","target","bulletStartX","rotation","addBullet","bulletStartY","continousSpeed","xDirection","type","scorelength","isColliding","setTarget","isVisible","createEnemy","newEnemy","innerHTML","wave","wavesDeno","wavesNeno","context","clearRect","height","fillStyle","fillRect","placementFlag","enemyCreator","x1","leftOffset","topOffset","y1","stroke","beginPath","moveTo","lineTo","drawTower","renderScore","drawRectangle","width","Sound","performance","now","requestAnimationFrame","processInput","time","fill","gameLoop"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.myMouse = null;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.renderCircle = false;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.creeps = [];\r\n    this.towers = [];\r\n    this.registerKey = this.registerKey.bind(this);\r\n    this.flyingScores = [];\r\n    this.tower1 = new Image();\r\n    this.tower1.src = \"assets/turret/turret-5-3.png\";\r\n    this.render = this.render.bind(this);\r\n    this.firstTime = true;\r\n    this.downHandler = this.downHandler.bind(this);\r\n    this.enemyCreator = new EnemyCreator(10);\r\n    this.canPlace = false;\r\n    this.upgrade = this.upgrade.bind(this);\r\n    this.sell = this.sell.bind(this);\r\n  }\r\n\r\n  upgrade(elapsedTime) {\r\n    let moneyRequired = Math.floor(0.5*towerClicked.specs.cost);\r\n    if(moneyRequired<=money){\r\n      if(towerClicked){\r\n        if(towerClicked.lotalElapsedTime == undefined){\r\n          towerClicked.lotalElapsedTime = 0;\r\n        }\r\n        else{\r\n          towerClicked.lotalElapsedTime += elapsedTime;\r\n          if(towerClicked.lotalElapsedTime >=200){    \r\n            console.log(\"upgraded\")\r\n            towerClicked.lotalElapsedTime -= 200;\r\n            towerClicked.delay = Math.floor(towerClicked.delay * 0.7);\r\n            towerClicked.specs.power = towerClicked.specs.power + 1;  \r\n            money -= moneyRequired;  \r\n          }\r\n        }\r\n      }  \r\n    }\r\n  }\r\n\r\n   sell() {\r\n     if(towerClicked){\r\n      let towerLength = this.towers.length;\r\n      for(let i=0; i<towerLength; i++){\r\n        if(isColliding2(this.towers[i].specs.center.x - cellWidth/2,this.towers[i].specs.center.y- cellWidth/2, cellWidth,towerClicked.specs.center.x - cellWidth/2, towerClicked.specs.center.y- cellWidth/2, cellWidth)){\r\n         money += Math.floor(0.7*towerClicked.specs.cost);\r\n         this.towers.splice(i, 1);\r\n         towerClicked = null;\r\n        }\r\n      }\r\n     }\r\n\r\n    }\r\n\r\n  createElement() {\r\n    let myTower = this.getAttribute(\"data-myName\");\r\n    moneyRequired = parseInt(this.getAttribute(\"data-cost\"));\r\n    towerTypeSelected = parseInt(this.getAttribute(\"data-type\"));\r\n    selectedTower = \"assets/turret/\" + myTower;\r\n    if(moneyRequired<=money){\r\n      renderCircle = true;\r\n      mouse.isActive = true;  \r\n    }\r\n  }\r\n\r\n  downHandler(e, elapsedTime) {\r\n    if (mouse.isActive) {\r\n      firstTime = true;\r\n      mouse.isActive = false;\r\n      renderCircle = false;\r\n      let decision = canCreated(this.towers) && this.canPlace;\r\n      if (decision) {\r\n        this.towers.push(\r\n          createTower(\r\n            selectedTower,\r\n            Math.floor(mouse.x / cellWidth) * cellWidth,\r\n            Math.floor((mouse.y - 200) / cellWidth) * cellWidth + 200,\r\n            2500,\r\n            1,\r\n            moneyRequired,\r\n            towerTypeSelected\r\n          )\r\n        );\r\n        money = money - moneyRequired;\r\n        towerTypeSelected = 0;\r\n        console.log(moneyRequired);\r\n      }\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n    } else {\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n      mouse.x = e.clientX - canvasPosition.left;\r\n      mouse.y = e.clientY - canvasPosition.top;\r\n      findSelectedTower(this.towers);\r\n    }\r\n  }\r\n\r\n  muteVolume(e) {\r\n    var towerElements = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].style.display = \"block\";\r\n    }\r\n    let myId = this.getAttribute(\"data-myId\");\r\n    document.getElementById(myId).style.display = \"none\";\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    this.myMouse = new Mouse();\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push({\r\n          x: i,\r\n          y: j,\r\n        });\r\n      }\r\n      cellSet.push(row);\r\n    }\r\n\r\n    var towerElements = document.getElementsByClassName(\"tower\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].addEventListener(\"click\", this.createElement, false);\r\n    }\r\n\r\n    var towerElements2 = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements2.length; i++) {\r\n      towerElements2[i].addEventListener(\"click\", this.muteVolume, false);\r\n    }\r\n\r\n    this.bulletController = new BulletController(this.creeps);\r\n\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-5-3.png\", 300, 500, 1000, 1)\r\n    // );\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-3-3.png\", 600, 500, 2000, 2)\r\n    // );\r\n\r\n    this.myMouse.register(\"mousedown\", this.downHandler);\r\n\r\n    // this.myMouse.register('mouseup', function(e, elapsedTime) {\r\n    //   mouse.isActive = false;\r\n    // });\r\n\r\n    this.myMouse.register(\"mousemove\", function (e, elapsedTime) {\r\n      if (mouse.isActive) {\r\n        const canvasPosition = canvas.getBoundingClientRect();\r\n        mouse.x = e.clientX - canvasPosition.left;\r\n        mouse.y = e.clientY - canvasPosition.top;\r\n        if (mouse.y < 200) {\r\n          mouse.y = 200;\r\n        }\r\n        this.renderCircle = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n    this.myMouse.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    console.log(upgrade);\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n\r\n    self.myKeyboard.register(upgrade, function (elapsedTime) {\r\n      self.upgrade(elapsedTime);\r\n    });\r\n\r\n    self.myKeyboard.register(sell, function (elapsedTime) {\r\n      self.sell(elapsedTime);\r\n    });\r\n\r\n    // self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      // this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n    let creepsLength = this.creeps.length;\r\n    for (let i = 0; i < creepsLength; i++) {\r\n      let creep = this.creeps[i];\r\n      if (creep) {\r\n        if (creep.reachRight()) {\r\n          this.creeps.splice(i, 1);\r\n          GameState.life--;\r\n          console.log(GameState.life);\r\n          continue;\r\n        }\r\n        if (creep.health == 0) {\r\n          let x = creep.player.specs.center.x;\r\n          let y = creep.player.specs.center.y;\r\n          score += creep.maxHealth;\r\n          this.creeps.splice(i, 1);\r\n          let textEvent = new MovingEvents({\r\n            size: { x: 50, y: 50 }, // Size in pixels\r\n            center: { x: x, y: y },\r\n            rotation: 0,\r\n            moveRate: 125 / 1000, // Pixels per second\r\n            rotateRate: Math.PI / 1000, // Radians per second\r\n            continousSpeed: 50,\r\n            yDirection: -1,\r\n            xDirection: 0,\r\n          });\r\n          this.flyingScores.push(\r\n            new FlyingScore(creep.maxHealth, textEvent, true)\r\n          );\r\n          continue;\r\n        }\r\n        creep.update(elapsedTime);\r\n        let towersLength = this.towers.length;\r\n        for (let i = 0; i < towersLength; i++) {\r\n          let tower = this.towers[i];\r\n          if (isColliding(creep, tower, 100)) {\r\n            tower.setTarget(\r\n              creep.player.specs.center.x,\r\n              creep.player.specs.center.y\r\n            );\r\n            if (tower.canShoot) {\r\n              let direction = {\r\n                x: tower.specs.target.x - tower.specs.center.x,\r\n                y: tower.specs.target.y - tower.specs.center.y,\r\n              };\r\n              direction = normalize(direction);\r\n              let bulletStartX = tower.specs.center.x;\r\n              let bulletStartY = tower.specs.center.y;\r\n\r\n              this.bulletController.addBullet(\r\n                bulletStartX,\r\n                bulletStartY,\r\n                creep,\r\n                tower.specs.power,\r\n                tower.specs.type\r\n              );\r\n            }\r\n          }\r\n\r\n          tower.update(elapsedTime);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.bulletController.update(elapsedTime);\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].update(elapsedTime);\r\n      if (!this.flyingScores[i].isVisible) {\r\n        this.flyingScores.splice(i, 1);\r\n        i--;\r\n        scorelength--;\r\n      }\r\n    }\r\n    let newEnemy = this.enemyCreator.createEnemy(elapsedTime);\r\n    if (newEnemy) {\r\n      this.creeps.push(newEnemy);\r\n    }\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n    document.getElementById(\"money\").innerHTML = money;\r\n    let wave = wavesDeno + \"/\" + wavesNeno;\r\n    document.getElementById(\"wave\").innerHTML = wave;\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    context.fillStyle = \"green\";\r\n    context.fillRect(0, 0 + 200, 600, 800);\r\n    context.clearRect(50, 250, 500, 500);\r\n    context.clearRect(0, 400, 50, 200);\r\n    context.clearRect(550, 400, 50, 200);\r\n\r\n    if (mouse.isActive) {\r\n      let placementFlag = false;\r\n      for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n          let x1 = cellSet[i][j].x;\r\n          let y1 = cellSet[i][j].y;\r\n          if (\r\n            Math.floor((mouse.x - leftOffset) / cellWidth) == x1 &&\r\n            Math.floor((mouse.y - topOffset) / cellWidth) == y1\r\n          ) {\r\n            this.canPlace = true;\r\n            placementFlag = true;\r\n            context.beginPath();\r\n            context.rect(\r\n              x1 * cellWidth + leftOffset,\r\n              y1 * cellWidth + topOffset,\r\n              cellWidth,\r\n              cellWidth\r\n            );\r\n            context.stroke();\r\n          }\r\n        }\r\n      }\r\n      if (!placementFlag) {\r\n        this.canPlace = false;\r\n      }\r\n    }\r\n\r\n    // ctx.strokeRect(50, 50, 50, 50);\r\n\r\n    context.beginPath();\r\n    context.moveTo(0, 200);\r\n    context.lineTo(canvas.width, 200);\r\n    context.stroke();\r\n    if (renderCircle) {\r\n      drawTower(100);\r\n    }\r\n    this.renderScore();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    let towersLength = this.towers.length;\r\n    for (let i = 0; i < towersLength; i++) {\r\n      let tower = this.towers[i];\r\n      tower.render();\r\n    }\r\n    if (towerClicked) {\r\n      drawRectangle({\r\n        x: towerClicked.specs.center.x - cellWidth / 2,\r\n        y: towerClicked.specs.center.y - cellWidth / 2,\r\n        width: 50,\r\n        height: 50,\r\n        fill: \"#ffd63f9e\",\r\n        stroke: \"red\",\r\n      });\r\n    }\r\n\r\n    this.bulletController.render();\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].render();\r\n    }\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    this.sound = new Sound();\r\n    this.sound.loadAudio();\r\n    // this.sound.playSound(\"end\");\r\n    this.registerKey();\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}