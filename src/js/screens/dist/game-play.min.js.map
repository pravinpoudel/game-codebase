{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","lastTimeStamp","model","initialize","bind","run","self","wallModel","sound","particlesSmoke","tower","creeps","makeCreateCreep1","makeCreateCreep2","makeCreateCreep3","GameState","cancelNextRequest","bulletController","BulletController","Tower","baseSprite","weaponSprite","center","x","y","register","power","update","elapsedTime","localStorage","rotateRate","cleanAll","life","creepsLength","i","creep","health","splice","upgrade","start","setTarget","player","specs","canShoot","target","direction","normalize","length","bulletStartY","addBullet","bulletStartX","document","getElementById","innerHTML","score","context","clearRect","canvas","width","height","renderScore","forEach","render","loadAudio","registerKey","performance","now","requestAnimationFrame","gameLoop","time","processInput"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.tower = null;\r\n    this.creeps = [\r\n      makeCreateCreep1(20, 300),\r\n      makeCreateCreep2(100, 300),\r\n      makeCreateCreep3(300, 300),\r\n    ];\r\n    this.registerKey = this.registerKey.bind(this);\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    this.bulletController = new BulletController();\r\n    this.tower = new Tower({\r\n      baseSprite: \"assets/tile-1-center.gif\",\r\n      weaponSprite: \"assets/turret/turret-5-3.png\",\r\n      center: { x: 300, y: 400 },\r\n      target: { x: 300, y: 100 },\r\n      rotateRate: (6 * 3.14159) / 1000, // radians per second\r\n      delay: 2000,\r\n      power:2\r\n    });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n    self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n    let creepsLength =  this.creeps.length;\r\n    for (let i = 0; i < creepsLength; i++) {\r\n      let creep = this.creeps[i];\r\n      if(creep){\r\n        if(creep.health == 0){\r\n          this.creeps.splice(i,1);\r\n          continue;\r\n        }\r\n        creep.update(elapsedTime);\r\n        if (isColliding(creep, this.tower, 200)) {\r\n          this.tower.setTarget(\r\n            creep.player.specs.center.x,\r\n            creep.player.specs.center.y\r\n          );\r\n          if (this.tower.canShoot) {\r\n            let direction = {\r\n              x: this.tower.specs.target.x - this.tower.specs.center.x,\r\n              y: this.tower.specs.target.y - this.tower.specs.center.y,\r\n            };\r\n            direction = normalize(direction);\r\n            let bulletStartX = this.tower.specs.center.x;\r\n            let bulletStartY = this.tower.specs.center.y;\r\n  \r\n            this.bulletController.addBullet(\r\n              bulletStartX,\r\n              bulletStartY,\r\n              creep,\r\n              this.tower.specs.power\r\n            );\r\n          }\r\n        }\r\n  \r\n      }\r\n    }\r\n    this.tower.update(elapsedTime);\r\n    this.bulletController.update(elapsedTime);\r\n    // model.update(elapsedTime);\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    this.renderScore();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    this.tower.render();\r\n    this.bulletController.render();\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    this.sound = new Sound();\r\n\r\n    this.sound.loadAudio();\r\n    this.registerKey();\r\n\r\n    // this.myKeyboard.register(\"ArrowUp\", self.playerModel.player.moveTop);\r\n    // this.myKeyboard.register(\"ArrowDown\", self.playerModel.player.moveDown);\r\n    // this.myKeyboard.register(\"ArrowLeft\", self.playerModel.player.moveLeft);\r\n    // this.myKeyboard.register(\"ArrowRight\", self.playerModel.player.moveRight);\r\n    // console.log(self.playerModel.moveRight);\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}