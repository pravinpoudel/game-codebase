{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","myMouse","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","renderCircle","sound","particlesSmoke","registerKey","Image","render","downHandler","upgrade","creeps","sell","towers","renderScore","flyingScores","tower1","firstTime","moneyRequired","Math","specs","cost","money","canPlace","undefined","level","startNewWave","totalElapsedTime","towerClicked","towerType","log","upgradeCount","elapsedTime","delay","floor","power","gameSound","playSound","towerLength","length","i","cellWidth","y","center","x","towerSold","splice","selectedTower","getAttribute","towerTypeSelected","parseInt","mouse","isActive","e","towerRadius","canCreated","push","GameState","assets","createTower","canvas","getBoundingClientRect","canvasPosition","clientX","left","findSelectedTower","towerElements","document","getElementsByClassName","style","display","myId","preventDefault","stopAllSound","unMuteSound","enemyCreator","levels","sendNextWave","wave","enemyCreators","nextWave","cancelNextRequest","life","console","add","score","Mouse","register","rows","row","j","cols","createLevels","showScreen","addEventListener","createElement","towerElements2","muteVolume","getElementById","bulletController","BulletController","startButton","update","localStorage","creepsLength","creep","player","reachRight","reachBottom","maxHealth","particleSystem","size","rotation","moveRate","PI","continousSpeed","yDirection","xDirection","textEvent","totalCreepKilled","tower","MovingEvents","flying","type","isColliding","radius","canShoot","target","direction","bulletStartX","bulletStartY","addBullet","towersLength","setTarget","scorelength","normalize","createEnemy","newEnemy","innerHTML","waveString","isVisible","maxWave","totalTowerValues","width","height","context","fillStyle","fillRect","forEach","clearRect","x1","cellSet","leftOffset","topOffset","y1","placementFlag","beginPath","moveTo","drawTower","stroke","drawRectangle","performance","now","fill","requestAnimationFrame","gameLoop","time","checkCanProceed","textAlign","setTimeout","Sound","loadAudio"],"mappings":"uZAAMA,oBACJ,SAAAA,EAAYC,EAASC,GAAOC,gBAAAC,KAAAJ,GAC1BI,KAAKC,WAAaH,EAClBE,KAAKE,QAAU,KACfF,KAAKG,cACLH,KAAKH,QAAUA,EACfG,KAAKI,MAAQ,KACbJ,KAAKK,WAAaL,KAAKK,WAAWC,KAAKN,MAPrCJ,KAAAA,IAQSI,KAAKO,IAAID,KAAKN,MACzBA,KAAKQ,YAAc,KACnBC,KAAKC,UAAY,KATnBV,KAAAW,cAAYd,EAAgBG,KAAAY,MAAA,KAY1BZ,KAAKa,eAAiB,KAXtBb,KAAKC,OAAAA,GACLD,KAAKE,OAAL,GACAF,KAAKG,YAALH,KAAAc,YAAAR,KAAAN,MACAA,KAAKH,aAAUA,GACfG,KAAKI,OAAQ,IAAbW,MACAf,KAAKK,OAAAA,IAAa,+BAClBL,KAAKO,OAAMP,KAAAgB,OAAcV,KAAzBN,MACAA,KAAKQ,WAAL,EACAC,KAAKC,YAAYV,KAAjBiB,YAAAX,KAAAN,MACAA,KAAKW,aAAe,KACpBX,KAAKY,UAAQ,EACbZ,KAAKa,QAAAA,KAALK,QAAAZ,KAAAN,MACAA,KAAKmB,KAALnB,KAAAoB,KAAAd,KAAAN,MACAA,KAAKqB,YAALrB,KAAAsB,YAAAhB,KAAAN,MACAA,KAAKc,aAAcd,KAAKc,aAAYR,KAAKN,MACzCA,KAAKuB,MAAAA,EACLvB,KAAKwB,UAAS,CAAIT,MAAlB,UAAA,MAAA,2EAGKU,GACL,IAAAC,EAAmBC,KAAKV,MAAAA,GAAYX,aAApCsB,MAAAC,MACA,GAAAH,GAAoBI,OACfC,aACL,GAAAC,MAAKd,aAAeA,iBACfE,aAAYA,iBAAjB,OAGKa,GADAC,aAALC,kBAAsC7B,EACtC,KAAA8B,aAAAD,iBAeQ,GAdHE,QAALC,IAAkB,YACnBF,aAAAD,kBAAA,IAacC,aAAaG,aAEX,CACL,GAdS,GAcLH,aAdRI,aACFd,OACAA,aAAiBI,aAAOM,aAAAG,aAAA,EACtBH,aAAcK,MAAAd,KAAAe,MAAA,GAAAN,aAAAK,OACZL,aAAaD,MAAAA,MAAbC,aAAJR,MAAgDe,MAAA,EAC9CP,OAAaD,EADfS,UAEOC,UAAA,YAMDT,aAAaG,aAAe,iCAE5B,GAAAH,aAEC,IADC,IAAAU,EAAA9C,KAAAqB,OAAA0B,OACDC,EAFD,EAAAA,EAEOF,EAAAE,IACLZ,GACAA,aACAA,KAAAA,OAAAA,GAAAA,MAAaR,OAAMe,EAAnBM,UAA2Bb,EAC3BN,KAAAA,OAAKkB,GAAItB,MAAAA,OAATwB,EAAAD,UAAA,EACAL,UACDR,aAAAR,MAAAuB,OAAAC,EAAAH,UAAA,EACFb,aAAAR,MAAAuB,OAAAD,EAAAD,UAAA,EACFA,WAOHb,OAJHN,OAAAH,KAAAe,MAAA,GAAAN,aAAAR,MAAAC,MACFwB,UAAArD,KAAAqB,OAAA2B,GAAApB,MAAAuB,OAAAC,EAAAH,UAAA,EAAAjD,KAAAqB,OAAA2B,GAAApB,MAAAuB,OAAAD,EAAAD,UAAA,GAkBOjD,KAAKqB,OAAOiC,OAAON,EAAG,GACtBJ,UAAUC,UAAU,YACpBT,aAAe,8CAFfmB,cAAKlC,KAAOiC,aAAZ,eACAV,YAAAA,KAAUC,aAAU,eACpBT,cAAAA,SAAepC,KAAfwD,aAAA,cACAC,kBAAAC,SAAA1D,KAAAwD,aAAA,cACD9B,eAAAI,QACFnB,cAAA,EACFgD,MAAAC,UAAA,uCAcSC,GAVVN,GAAAA,MAAAA,SAAgB,CAChBO,WAAW,EACXpC,MAAAA,UAAgBgC,EAChBD,cAAAA,EAYiBM,WAAW/D,KAAKqB,SAAWrB,KAAK+B,WAV/CpB,KAAAA,OAAYqD,KACZL,YACDM,UAAAC,OAAAX,eACF5B,KAAAe,MAAAiB,MAAAP,EAAAH,WAAAA,UAaStB,KAAKe,OAAOiB,MAAMT,EAAI,KAAOD,WAAaA,UAAY,IACtD,KACA,EAZJU,YACFlC,cACAkC,oBAgBE7B,OAAgBJ,cAblBA,cAAc,EACZ+B,kBACEU,EAWFrC,UAAQA,UAAQJ,QAEC0C,OAAjBC,4BACAzB,CACD,IAAA0B,EAAAF,OAAAC,wBAIDV,MAAMP,EAAIS,EAAEU,QAAUD,EAAeE,KAHrCb,MAAMW,EAAAA,EAAAA,QAAcA,EAAUD,IAC/BI,kBAAMzE,KAAAqB,4CAGAwC,GACLY,EAAAA,iBAEH,IADE,IAAAC,EAAAC,SAAAC,uBAAA,gBACF5B,EAAA,EAAAA,EAAA0B,EAAA3B,OAAAC,IAMG0B,EAAc1B,GAAG6B,MAAMC,QAAU,QAEnC,IAAIC,EAAO/E,KAAKwD,aAAa,aAL7BK,SAAEmB,eAAFD,GAAAF,MAAAC,QAAA,OACIJ,cAAJK,GAOEnC,UAAUqC,eALVP,gBAAAA,GACD9B,UAAAsC,mDAWUrB,GARXA,EAAAmB,iBACEpC,QAAAA,IAAAA,wBACD5C,KAAAmF,aAAAC,OAAApF,KAAAiC,OAAAoD,eAUGD,OAAOpF,KAAKiC,OAAOqD,MAAQF,OAAOpF,KAAKiC,OAAOsD,cAAcxC,QAThE/C,KAAI+E,QAEHS,UAAA,EACFvB,UAAAwB,mBAAA,6CAGGT,EAAAA,KAAAA,OAAFf,UAAAyB,MAAA,KACAC,UAAQrD,mBAAI,EACZsD,IAAAC,6CAgBA,IAAIpF,EAAOT,KAZXwF,eACAvB,gBACDjE,KAAAE,QAAA,IAAA4F,MAcC7B,UAAUwB,mBAAoB,EAC9BxB,UAAUyB,KAAO,GACjBjF,EAAKR,WAAW8F,SAAS,SAdT,WAChB9B,UAAShC,mBAAagC,EACpBA,EAAAA,QAAUwB,WAAAA,cAGb,IAAA,IAAAzC,EAAA,EAAAA,EAAAgD,KAAAhD,IAAA,CAgBG,IADA,IAAIiD,EAAM,GACDC,EAAI,EAAGA,EAAIC,KAAMD,IACxBD,EAAIjC,KAAK,CAdTvD,EAAAA,EACJ2F,EAAAA,IAGAnC,QAAAA,KAAUwB,GAGRxB,cAAUwB,SAAAA,uBAAV,SACAhF,IAAAA,IAAKZ,EAAAA,EAALmD,EAAaqD,cAAWtD,OAAxBC,IACD0B,cAHD1B,GAAAsD,iBAAA,QAAAtG,KAAAuG,eAAA,GAMEC,eAAA7B,SAAAC,uBAAA,gBAgBF,IAAS5B,EAAI,EAAGA,EAAIwD,eAAezD,OAAQC,IAfzCwD,eAAaxD,GAAGkD,iBAAe,QAAAlG,KAAAyG,YAAA,GAE3BrD,YADOuB,SAAA+B,eAAA,eAEPxD,YAAGgD,iBAAAA,QAAAA,KAAAA,cAENlG,KAAA2G,iBAAA,IAAAC,iBAAA5G,KAAAmB,QAOFnB,KAAAE,QAAA6F,SAAA,YAAA/F,KAAAiB,aAKAjB,KAAAE,QAAA6F,SAAA,YAAA,SAAAlC,EAAArB,GAoBC,GAAImB,MAAMC,SAAU,CAnBtBiD,IAAAA,EAAuBH,OAAAA,wBACvBG,MAAAA,EAAYP,EAAAA,QAAAA,EAA0B9B,KAEtCb,MAAKgD,EAAAA,EAAAA,QAAmBrC,EAAIsC,IAG5BjD,MAAAT,EAAA,MACAS,MAAAT,EAAA,KAEAlD,KAAAW,cAAA,0CAOA6B,GAgBAxC,KAAKC,WAAW6G,OAAOtE,GAdvBxC,KAAAE,QAAKA,OAAQ6F,yCAITpC,IAAAA,EAAK3D,KAgBLkB,EAAU6F,aAAY,QAftB3F,EAAIuC,aAAJ,KACEA,EAAAA,aAAA,MAkBNlD,EAAKR,WAAW8F,SAAS7E,EAAS,SAAUsB,GAhBxC/B,EAAAS,QAAKP,KAGVF,EAAAR,WAAA8F,SAAA3E,EAAA,SAAAoB,GAkBG/B,EAAKW,KAAKoB,KAfZ/B,EAAAR,WAAKA,SAAkBuC,EAAAA,SAAvBA,GACA/B,EAAKP,aAAQ4G,oCAKbtE,GACA,GAAAyB,UAAW8C,MAAAA,EACX9C,UAASwB,mBAAgB,MADzB,CAQEhF,eAAU+B,OAAAA,GAGZ/B,IAFC,IAFDuG,EAAAhH,KAAAmB,OAAA4B,OAIK9C,EAAAA,EAAAA,EAAW8F,EAAgB/C,IAAA,CAC9BvC,IAAAA,EAAKyB,KAAAA,OAAaM,GACnB,GAEDyE,EAAA,CACD,GAAAA,EAAAC,OAAAC,cAAAF,EAAAC,OAAAE,cAAA,CAeOpH,KAAKmB,OAAOmC,OAAON,EAAG,GACtBiB,UAAUyB,OACV,SAbJzB,GAAUwB,GAAVxB,EAAUwB,OAAAA,CAgBN,IAAIrC,EAAI6D,EAAMC,OAAOtF,MAAMuB,OAAOC,EAdtCF,EAAA+D,EAAAC,OAAAtF,MAAAuB,OAAAD,EACD2C,OAAAoB,EAAAI,UAgBKrH,KAAKmB,OAAOmC,OAAON,EAAG,GAd5BsE,UAAclE,EAAC0D,GACXE,mBAgBElF,OAASmF,EAAMI,UAfrBzE,UAAAC,UAAoBmE,OAClB,IAAIC,EAAa9F,IAAAA,aAAjB,CAiBMoG,KAAM,CAAEnE,EAAG,GAAIF,EAAG,IAhBpB+D,OAAO,CAAA7D,EAAAA,EAAAF,EAAAA,GACTsE,SAAUN,EACRO,SAAKtG,KACL8C,WAAUyB,KAAVgC,GAAA,IACAC,eAAA,GACDC,YAAA,EAkBGC,WAAY,IAhBd7H,KAAAuB,aAAc2F,KACd,IAAIhE,YAAUgE,EAAOtF,UAAbkG,GAAR,IAEA,SAEAC,EAAAA,OAAAA,GAEAnF,IADAd,IAAAA,EAAeuF,KAAAA,OAAftE,OACAH,EAAS,EAACC,EAAAA,EAAVG,IAAA,CACA,IAAAgF,EAAIF,KAASzG,OAAO4G,GAClBV,QAAM,IAAAN,EAAAiB,QAAA,GAAAF,EAAApG,MAAAuG,KAAE/E,QAAGd,IAAL,UAAAU,QAAU,QADe,IAAAiE,EAAAiB,QACPF,EAAApG,MAAAuG,KAAA,EACd/E,QAAFd,IAAA,UAAAU,QAAA,GAFuBoF,YAAAnB,EAAAe,EAAAA,EAAApG,MAAAyG,UAG/Bb,EAAAA,UACAC,EAAQP,OAAEtF,MAJqBuB,OAAAC,EAIT6D,EAAAC,OAAAtF,MAAAuB,OAAAD,GACM8E,EAAAM,UAAA,CAC5BX,IAAAA,EAN+B,CAO/BC,EAAAA,EAAahG,MAPkB2G,OAAAnF,EAAA4E,EAAApG,MAAAuB,OAAAC,EAQ/ByE,EAAAA,EAAYjG,MAAA2G,OAAArF,EAAA8E,EAAApG,MAAAuB,OAAAD,GAEdsF,EAAKjH,UACHiH,GAEF,IAAAC,EAAAT,EAAApG,MAAAuB,OAAAC,EACDsF,EAAAV,EAAApG,MAAAuB,OAAAD,EACK4D,KAAAA,iBAAN6B,UACIC,EA2BMF,EA1BLzB,EACCe,EAAQpG,MAAKP,MA4BT2G,EAAMpG,MAAMuG,MA1BlBxC,UAAY9C,UAAA,SAQVmF,EAAAA,OAAMa,KAOF3F,KAAAA,iBAAG8E,OAAMpG,GAEX4G,IAJgB,IAAAM,EAAhB9I,KAAAuB,aAAAwB,OAIAyF,EAAAA,EAAAA,EAAAA,EAAYO,IACZ/I,KAAAuB,aAAIkH,GAAAA,OAAYjG,GAChBxC,KAAAuB,aAAImH,GAAAA,YAEJ1I,KAAAuB,aAAKoF,OAAAA,EAAAA,GAOL/D,IACDkG,KAmBX,GAAI9I,KAAKmF,aAAc,CAfjB6C,IAAAA,EAAMlB,KAAOtE,aAAbwG,YAAAxG,GACDyG,GACFjJ,KAAAmB,OAAA6C,KAAAiF,2CAKHtE,SAAK+B,eAAY,gBAAgB1D,UAAK6C,MACpClB,SAAKpD,eAAayB,SAAlBkG,UAAAjF,UAAAyB,KAkBFf,SAAS+B,eAAe,SAASwC,UAAYpH,MAjB3C,IAAAqH,EAAU5H,OAAAA,KAAayB,OAAGoG,KAAW,EAAA,IAAAC,QACnC1E,SAAA+B,eAAkBpD,QAAON,UAAzBmG,EACAnG,IAAAA,EAAC2B,SAAA+B,eAAA,eACDoC,SAAAA,eAAW,SAAAI,UAAAlJ,KAAAiC,MAAA,EACZ0C,SAAA+B,eAAA,UAAAwC,UAAAnB,iBAoBCvC,WAlBJqB,EAAS1B,MAAAA,QAAc,SAqBvB,IAAImE,EAAmB,EAnBrBtJ,KAAAqB,OAAI4H,QAAU,SAAAjB,GACZsB,GAAAtB,EAAiBiB,MAAjBpH,OAEH8C,SAAA+B,eAAA,cAAAwC,UAAAI,EAsBmB,EAAhB5H,eACFiD,SAAS+B,eAAe,gBAAgB7B,MAAMC,QAAU,QACxDH,SAAS+B,eAAe,iBArBdwC,UAAAxH,cACZiD,SAAS+B,eAAe,SAAAwC,UACxBvE,KAAAA,UAAS+B,SAAejD,mBAAqBQ,KAE7CU,SAAIwE,eAAoB,gBAAPtE,MAAAC,QAAoCuE,OACrD1E,SAAS+B,eAAe,iBAAxBwC,UAA4CC,GAC5CxE,SAAIkC,eAAclC,SAAS+B,UAAe,qCAa1C,GAREG,QAAAA,UAAYhC,EAAZ,EAAkBC,OAAlByE,MAA4BnF,OAA5BoF,QACDC,QAAAC,UAAA,QAsBDD,QAAQE,SAAS,EAAG,IAAS,IAAK,KArBlCF,QAAIH,UAAAA,GAAgB,IAApB,IAAA,KACAG,QAAKpI,UAAOuI,EAAZ,IAAoB,GAAA,KAClBN,QAAAA,UAAAA,IAAgB,IAAItB,GAAMpG,KAC3B6H,QAFDI,UAAA,IAAA,IAAA,IAAA,IAGAlF,QAAAA,UAAS+B,IAAAA,IAAe,IAAA,IAExB/C,MAAIjC,SAAa,CAEfiD,IADAA,IAAAA,GAAS+B,EACT/B,EAAS+B,EAAAA,EAAAA,KAAe1D,IACxB2B,IAAAA,IAAS+B,EAAAA,EAAAA,EAAAA,KAAeR,IAAxB,CAHF,IAKO4D,EAAAC,QAAA/G,GAAAkD,GAAA9C,EACLuB,EAAS+B,QAAAA,GAAAA,GAAexD,EAExByB,KAAS+B,OAAAA,MAAAA,EAAesD,YAASd,YAAjCY,GACDnI,KAAAe,OAAAiB,MAAAT,EAAA+G,WAAAhH,YAAAiH,IAwBOC,EADAnK,KAAK+B,UAAW,EAEhB0H,QAAQW,YArBhBX,QAAQI,KACAH,EAAAA,UAAYM,WACZL,EAAAA,UAAgBM,UAChBJ,UACAA,WAERJ,QAAQI,UAINM,IAuBEnK,KAAK+B,UAAW,GAlBd0H,QAAAW,YAIEX,QAAAY,OAAKtI,EAAAA,KACLoI,QAAAA,OAAAA,OAAAA,MAAgB,KAChBV,QAAAA,SACAA,cAMAA,UAAAA,aAEHzJ,KAAAsB,cACFtB,KAAAmB,OAAAyI,QAAA,SAAA3C,GAiBDA,EAAMjG,WAdL,IADC,IAAA4H,EAAA5I,KAAgBqB,OAAhB0B,OACDC,EAAA,EAAAA,EAAA4F,EAAA5F,IAAA,CAGHhD,KAAAqB,OAAA2B,GAgBQhC,SAdRyI,cACAA,cAAA,CACAA,EAAAA,aAAerF,MAAOmF,OAAOnG,EAA7BH,UAAA,EACAwG,EAAAA,aAAA7H,MAAAuB,OAAAD,EAAAD,UAAA,EAiBIsG,MAAO,GAhBXC,OAAI7I,GACF2J,KAAAA,YACDC,OAAA,QAGCtD,KAAAA,iBAAAjG,SAEF,IADC,IAFD8H,EAAA9I,KAAAuB,aAAAwB,OAGI6F,EAAAA,EAAAA,EAAYE,EAAe/F,IAmB7B/C,KAAKuB,aAAayB,GAAGhC,SAjBrBsG,eAAStG,uCAGX,IAAAP,EAAI2B,KACFoI,UAAAA,IAAAA,MACEpH,UAAGhB,YAEHmH,KAAAA,cACAC,IAAAA,EAJYiB,YAAAC,MAKZC,UAAIlF,mBALQ,EAsDZmF,sBAtDY,SAAdC,EAAAC,GA6BErK,EAAK0E,cAnBT1E,EAAKkG,aAAAA,YAAL,GACuBpF,GAAvBd,EAAIqI,OAAAA,QAqBO,EAAPxD,MAnBFE,UAAKjE,EACN+D,SACDgC,EAAAA,aAAetG,EAAfb,GACDM,EAAAqG,OAAAgE,EAAA3K,IAwBGM,EAAKsK,kBACA9G,UAAUwB,mBAhBjBxB,QAAUwB,KAAAA,cAwBNgE,QAAQuB,UAAY,SAtBxBvB,QAASoB,SAASC,YAAM1G,OAAAmF,MAAA,EAAA,GAAAnF,OAAAoF,QAmBpB/I,YAAKO,oBAAL,QAAAhB,KAAAkC,cACD+I,WAAM,WACLxB,EAAAA,QAAApD,WAAe,aACfoD,OA9BJmB,sBAAAC,GACAjI,EAAAA,aAAgBsI,EAAhB/K,GACAyC,EAAAA,OAAUuI,EAAVhL,GAwBIA,EAAgB2K,EAtBpBrK,EAAKK,UA6BDX,EAAA2K","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.myMouse = null;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.renderCircle = false;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.creeps = [];\r\n    this.towers = [];\r\n    this.registerKey = this.registerKey.bind(this);\r\n    this.flyingScores = [];\r\n    this.tower1 = new Image();\r\n    this.tower1.src = \"assets/turret/turret-5-3.png\";\r\n    this.render = this.render.bind(this);\r\n    this.firstTime = true;\r\n    this.downHandler = this.downHandler.bind(this);\r\n    this.enemyCreator = null;\r\n    this.canPlace = false;\r\n    this.upgrade = this.upgrade.bind(this);\r\n    this.sell = this.sell.bind(this);\r\n    this.renderScore = this.renderScore.bind(this);\r\n    this.startNewWave = this.startNewWave.bind(this);\r\n    this.level = 0;\r\n    this.towerType = [\"Gun\", \"Missile\", \"Air\", \"Mix (Air + Ground)\"];\r\n  }\r\n\r\n  upgrade(elapsedTime) {\r\n    let moneyRequired = Math.floor(0.5 * towerClicked.specs.cost);\r\n    if (moneyRequired <= money) {\r\n      if (towerClicked) {\r\n        if (towerClicked.totalElapsedTime == undefined) {\r\n          towerClicked.totalElapsedTime = 0;\r\n        } else {\r\n          towerClicked.totalElapsedTime += elapsedTime;\r\n          if (towerClicked.totalElapsedTime >= 200) {\r\n            console.log(\"upgraded\");\r\n            towerClicked.totalElapsedTime -= 200;\r\n            if (!towerClicked.upgradeCount) {\r\n              towerClicked.upgradeCount = 1;\r\n            } else {\r\n              if (towerClicked.upgradeCount >= 3) {\r\n                return;\r\n              } else {\r\n                towerClicked.upgradeCount = towerClicked.upgradeCount + 1;\r\n                towerClicked.delay = Math.floor(towerClicked.delay * 0.7);\r\n                towerClicked.specs.power = towerClicked.specs.power + 1;\r\n                money -= moneyRequired;\r\n                gameSound.playSound(\"add\");\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  sell() {\r\n    if (towerClicked) {\r\n      let towerLength = this.towers.length;\r\n      for (let i = 0; i < towerLength; i++) {\r\n        if (\r\n          isColliding2(\r\n            this.towers[i].specs.center.x - cellWidth / 2,\r\n            this.towers[i].specs.center.y - cellWidth / 2,\r\n            cellWidth,\r\n            towerClicked.specs.center.x - cellWidth / 2,\r\n            towerClicked.specs.center.y - cellWidth / 2,\r\n            cellWidth\r\n          )\r\n        ) {\r\n          money += Math.floor(0.7 * towerClicked.specs.cost);\r\n          towerSold(this.towers[i].specs.center.x - cellWidth / 2, this.towers[i].specs.center.y - cellWidth / 2);\r\n          this.towers.splice(i, 1);\r\n          gameSound.playSound(\"die\");\r\n          towerClicked = null;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createElement() {\r\n    selectedTower = this.getAttribute(\"data-myName\");\r\n    towerRadius = this.getAttribute(\"data-radius\");\r\n    moneyRequired = parseInt(this.getAttribute(\"data-cost\"));\r\n    towerTypeSelected = parseInt(this.getAttribute(\"data-type\"));\r\n    if (moneyRequired <= money) {\r\n      renderCircle = true;\r\n      mouse.isActive = true;\r\n    }\r\n  }\r\n\r\n  downHandler(e, elapsedTime) {\r\n    if (mouse.isActive) {\r\n      firstTime = true;\r\n      mouse.isActive = false;\r\n      renderCircle = false;\r\n      let decision = canCreated(this.towers) && this.canPlace;\r\n      if (decision) {\r\n        this.towers.push(\r\n          createTower(\r\n            GameState.assets[selectedTower],\r\n            Math.floor(mouse.x / cellWidth) * cellWidth,\r\n            Math.floor((mouse.y - 200) / cellWidth) * cellWidth + 200,\r\n            2500,\r\n            1,\r\n            towerRadius,\r\n            moneyRequired,\r\n            towerTypeSelected\r\n          )\r\n        );\r\n        money = money - moneyRequired;\r\n        moneyRequired = 0;\r\n        towerTypeSelected = 0;\r\n        gameSound.playSound(\"add\");\r\n      }\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n    } else {\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n      mouse.x = e.clientX - canvasPosition.left;\r\n      mouse.y = e.clientY - canvasPosition.top;\r\n      findSelectedTower(this.towers);\r\n    }\r\n  }\r\n\r\n  muteVolume(e) {\r\n    e.preventDefault();\r\n    var towerElements = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].style.display = \"block\";\r\n    }\r\n    let myId = this.getAttribute(\"data-myId\");\r\n    document.getElementById(myId).style.display = \"none\";\r\n    if (myId == \"muteButton\") {\r\n      gameSound.stopAllSound();\r\n    }\r\n    if (myId == \"unmuteButton\") {\r\n      gameSound.unMuteSound();\r\n    }\r\n  }\r\n\r\n  startNewWave(e) {\r\n    e.preventDefault();\r\n    console.log(\"start button clicked\");\r\n    this.enemyCreator = levels[this.level].sendNextWave();\r\n    if (levels[this.level].wave >= levels[this.level].enemyCreators.length) {\r\n      this.level++;\r\n    }\r\n    nextWave = false;\r\n    GameState.cancelNextRequest = false;\r\n  }\r\n\r\n  checkCanProceed() {\r\n    if (this.level > 2 || GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      add(score);\r\n    }\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    createLevels();\r\n    makeParticle2();\r\n    this.myMouse = new Mouse();\r\n    GameState.cancelNextRequest = false;\r\n    GameState.life = 10;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push({\r\n          x: i,\r\n          y: j,\r\n        });\r\n      }\r\n      cellSet.push(row);\r\n    }\r\n\r\n    towerElements = document.getElementsByClassName(\"tower\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].addEventListener(\"click\", this.createElement, false);\r\n    }\r\n\r\n    towerElements2 = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements2.length; i++) {\r\n      towerElements2[i].addEventListener(\"click\", this.muteVolume, false);\r\n    }\r\n    startButton = document.getElementById(\"startButton\");\r\n    startButton.addEventListener(\"click\", this.startNewWave);\r\n\r\n    this.bulletController = new BulletController(this.creeps);\r\n\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-5-3.png\", 300, 500, 1000, 1)\r\n    // );\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-3-3.png\", 600, 500, 2000, 2)\r\n    // );\r\n\r\n    this.myMouse.register(\"mousedown\", this.downHandler);\r\n\r\n    // this.myMouse.register('mouseup', function(e, elapsedTime) {\r\n    //   mouse.isActive = false;\r\n    // });\r\n\r\n    this.myMouse.register(\"mousemove\", function (e, elapsedTime) {\r\n      if (mouse.isActive) {\r\n        const canvasPosition = canvas.getBoundingClientRect();\r\n        mouse.x = e.clientX - canvasPosition.left;\r\n        mouse.y = e.clientY - canvasPosition.top;\r\n        if (mouse.y < 200) {\r\n          mouse.y = 200;\r\n        }\r\n        this.renderCircle = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n    this.myMouse.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n\r\n    self.myKeyboard.register(upgrade, function (elapsedTime) {\r\n      self.upgrade(elapsedTime);\r\n    });\r\n\r\n    self.myKeyboard.register(sell, function (elapsedTime) {\r\n      self.sell(elapsedTime);\r\n    });\r\n\r\n    self.myKeyboard.register(start, function (elapsedTime) {\r\n      self.startNewWave(elapsedTime);\r\n    });\r\n\r\n    // self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      // this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n\r\n    particleSystem.update(elapsedTime);\r\n    let creepsLength = this.creeps.length;\r\n    for (let i = 0; i < creepsLength; i++) {\r\n      let creep = this.creeps[i];\r\n      if (creep) {\r\n        if (creep.player.reachRight() || creep.player.reachBottom()) {\r\n          this.creeps.splice(i, 1);\r\n          GameState.life--;\r\n          continue;\r\n        }\r\n        if (creep.health == 0) {\r\n          let x = creep.player.specs.center.x;\r\n          let y = creep.player.specs.center.y;\r\n          score += creep.maxHealth;\r\n          this.creeps.splice(i, 1);\r\n          creepDied(x, y);\r\n          totalCreepKilled++;\r\n          money += creep.maxHealth;\r\n          gameSound.playSound(\"die\");\r\n          let textEvent = new MovingEvents({\r\n            size: { x: 50, y: 50 }, // Size in pixels\r\n            center: { x: x, y: y },\r\n            rotation: 0,\r\n            moveRate: 125 / 1000, // Pixels per second\r\n            rotateRate: Math.PI / 1000, // Radians per second\r\n            continousSpeed: 50,\r\n            yDirection: -1,\r\n            xDirection: 0,\r\n          });\r\n          this.flyingScores.push(\r\n            new FlyingScore(creep.maxHealth, textEvent, true)\r\n          );\r\n          continue;\r\n        }\r\n        creep.update(elapsedTime);\r\n        let towersLength = this.towers.length;\r\n        for (let i = 0; i < towersLength; i++) {\r\n          let tower = this.towers[i];\r\n          if (typeof creep.flying == \"undefined\" && tower.specs.type == 3) {\r\n            console.log(\"flying\" + \" \" + i);\r\n          } else if (\r\n            typeof creep.flying != \"undefined\" &&\r\n            tower.specs.type < 3\r\n          ) {\r\n            console.log(\"flying\" + \" \" + i);\r\n          } else {\r\n            if (isColliding(creep, tower, tower.specs.radius)) {\r\n              tower.setTarget(\r\n                creep.player.specs.center.x,\r\n                creep.player.specs.center.y\r\n              );\r\n              if (tower.canShoot) {\r\n                let direction = {\r\n                  x: tower.specs.target.x - tower.specs.center.x,\r\n                  y: tower.specs.target.y - tower.specs.center.y,\r\n                };\r\n                direction = normalize(direction);\r\n                let bulletStartX = tower.specs.center.x;\r\n                let bulletStartY = tower.specs.center.y;\r\n\r\n                this.bulletController.addBullet(\r\n                  bulletStartX,\r\n                  bulletStartY,\r\n                  creep,\r\n                  tower.specs.power,\r\n                  tower.specs.type\r\n                );\r\n                gameSound.playSound(\"shoot\");\r\n              }\r\n            }\r\n          }\r\n\r\n          tower.update(elapsedTime);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.bulletController.update(elapsedTime);\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].update(elapsedTime);\r\n      if (!this.flyingScores[i].isVisible) {\r\n        this.flyingScores.splice(i, 1);\r\n        i--;\r\n        scorelength--;\r\n      }\r\n    }\r\n    if (this.enemyCreator) {\r\n      let newEnemy = this.enemyCreator.createEnemy(elapsedTime);\r\n      if (newEnemy) {\r\n        this.creeps.push(newEnemy);\r\n      }\r\n    }\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n    document.getElementById(\"money\").innerHTML = money;\r\n    let waveString = levels[this.level].wave + 1 + \"/\" + maxWave;\r\n    document.getElementById(\"wave\").innerHTML = waveString;\r\n    var startButton = document.getElementById(\"startButton\");\r\n    document.getElementById(\"level\").innerHTML = this.level + 1;\r\n    document.getElementById(\"killed\").innerHTML = totalCreepKilled;\r\n    // startButton.style.display = \"none\";\r\n    if (nextWave) {\r\n      startButton.style.display = \"block\";\r\n    }\r\n    let totalTowerValues = 0;\r\n    this.towers.forEach((tower) => {\r\n      totalTowerValues += tower.specs.cost;\r\n    });\r\n    document.getElementById(\"towerValue\").innerHTML = totalTowerValues;\r\n\r\n    if (moneyRequired > 0) {\r\n      document.getElementById(\"selectedInfo\").style.display = \"block\";\r\n      document.getElementById(\"moneyRequired\").innerHTML = moneyRequired;\r\n      document.getElementById(\"power\").innerHTML =\r\n        this.towerType[parseInt(towerTypeSelected) - 1];\r\n    } else {\r\n      document.getElementById(\"selectedInfo\").style.display = \"none\";\r\n      document.getElementById(\"moneyRequired\").innerHTML = \"\";\r\n      document.getElementById(\"power\").innerHTML = \"\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    context.fillStyle = \"green\";\r\n    context.fillRect(0, 0 + 200, 600, 800);\r\n    context.clearRect(50, 250, 500, 500);\r\n    context.clearRect(0, 400, 50, 200);\r\n    context.clearRect(550, 400, 50, 200);\r\n    context.clearRect(175, 200, 225, 50);\r\n    context.clearRect(175, 750, 225, 50);\r\n\r\n    if (mouse.isActive) {\r\n      let placementFlag = false;\r\n      for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n          let x1 = cellSet[i][j].x;\r\n          let y1 = cellSet[i][j].y;\r\n          if (\r\n            Math.floor((mouse.x - leftOffset) / cellWidth) == x1 &&\r\n            Math.floor((mouse.y - topOffset) / cellWidth) == y1\r\n          ) {\r\n            this.canPlace = true;\r\n            placementFlag = true;\r\n            context.beginPath();\r\n            context.rect(\r\n              x1 * cellWidth + leftOffset,\r\n              y1 * cellWidth + topOffset,\r\n              cellWidth,\r\n              cellWidth\r\n            );\r\n            context.stroke();\r\n          }\r\n        }\r\n      }\r\n      if (!placementFlag) {\r\n        this.canPlace = false;\r\n      }\r\n    }\r\n\r\n    // ctx.strokeRect(50, 50, 50, 50);\r\n\r\n    context.beginPath();\r\n    context.moveTo(0, 200);\r\n    context.lineTo(canvas.width, 200);\r\n    context.stroke();\r\n    if (renderCircle) {\r\n      drawTower(towerRadius);\r\n    }\r\n    this.renderScore();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    let towersLength = this.towers.length;\r\n    for (let i = 0; i < towersLength; i++) {\r\n      let tower = this.towers[i];\r\n      tower.render();\r\n    }\r\n    if (towerClicked) {\r\n      drawRectangle({\r\n        x: towerClicked.specs.center.x - cellWidth / 2,\r\n        y: towerClicked.specs.center.y - cellWidth / 2,\r\n        width: 50,\r\n        height: 50,\r\n        fill: \"#ffd63f9e\",\r\n        stroke: \"red\",\r\n      });\r\n    }\r\n\r\n    this.bulletController.render();\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].render();\r\n    }\r\n    particleSystem.render();\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    gameSound = new Sound();\r\n    gameSound.loadAudio();\r\n    // this.sound.playSound(\"end\");\r\n    this.registerKey();\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      if (\r\n        self.enemyCreator &&\r\n        self.enemyCreator.totalEnemy <= 0 &&\r\n        self.creeps.length == 0 &&\r\n        wave > 0\r\n      ) {\r\n        nextWave = true;\r\n        wave--;\r\n      } else {\r\n        self.processInput(time - lastTimeStamp);\r\n        self.update(time - lastTimeStamp);\r\n      }\r\n      self.checkCanProceed();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n        self.processInput(time - lastTimeStamp);\r\n        self.update(time - lastTimeStamp);\r\n        lastTimeStamp = time;\r\n        self.render();\r\n      } else {\r\n        context.font = \"70px roboto\";\r\n        context.textAlign = \"center\";\r\n        context.fillText(\"Game Over\", canvas.width / 2, canvas.height * 0.8);\r\n        // for (var i = 0; i < towerElements.length; i++) {\r\n        //   towerElements[i].removeEventListener(\r\n        //     \"click\",\r\n        //     this.createElement,\r\n        //     false\r\n        //   );\r\n        // }\r\n\r\n        // for (var i = 0; i < towerElements2.length; i++) {\r\n        //   towerElements2[i].removeEventListener(\r\n        //     \"click\",\r\n        //     this.muteVolume,\r\n        //     false\r\n        //   );\r\n        // }\r\n        startButton.removeEventListener(\"click\", this.startNewWave);\r\n        setTimeout(() => {\r\n          self.manager.showScreen(\"mainmenu\");\r\n        }, 2000);\r\n      }\r\n      lastTimeStamp = time;\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}