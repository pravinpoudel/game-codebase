{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","myMouse","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","renderCircle","sound","particlesSmoke","registerKey","Image","render","downHandler","upgrade","creeps","sell","towers","renderScore","flyingScores","tower1","moneyRequired","Math","floor","towerClicked","specs","cost","console","canPlace","undefined","totalElapsedTime","startNewWave","gameOverText","towerType","elapsedTime","log","upgradeCount","money","delay","power","gameSound","playSound","towerLength","length","i","cellWidth","y","center","x","towerSold","splice","selectedTower","getAttribute","towerTypeSelected","parseInt","mouse","isActive","e","towerRadius","canCreated","push","GameState","assets","firstTime","createTower","canvas","getBoundingClientRect","canvasPosition","clientX","left","findSelectedTower","towerElements","document","getElementsByClassName","style","display","myId","preventDefault","stopAllSound","unMuteSound","enemyCreator","levels","level","sendNextWave","nextWave","cancelNextRequest","add","Mouse","life","score","showScreen","rows","row","j","cols","createLevels","makeParticle2","createElement","towerElements2","addEventListener","muteVolume","startButton","getElementById","cellSet","BulletController","register","clientY","update","start","localStorage","particleSystem","creep","player","reachRight","reachBottom","health","maxHealth","creepsLength","totalCreepKilled","textEvent","MovingEvents","rotation","rotateRate","PI","continousSpeed","yDirection","xDirection","creepDied","towersLength","size","flying","tower","type","moveRate","radius","canShoot","target","direction","bulletStartY","bulletController","bulletStartX","isColliding","scorelength","isVisible","newEnemy","innerHTML","waveString","wave","maxWave","createEnemy","totalTowerValues","height","context","fillStyle","clearRect","enemyCreators","position","fillRect","placementFlag","y1","leftOffset","x1","topOffset","stroke","rect","beginPath","moveTo","lineTo","width","drawTower","fill","drawRectangle","changeVolume","performance","now","requestAnimationFrame","gameLoop","time","Sound","loadAudio","checkCanProceed","font","pauseSound","textAlign","fillText","setTimeout","processInput"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.myMouse = null;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.renderCircle = false;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.creeps = [];\r\n    this.towers = [];\r\n    this.registerKey = this.registerKey.bind(this);\r\n    this.flyingScores = [];\r\n    this.tower1 = new Image();\r\n    this.tower1.src = \"assets/turret/turret-5-3.png\";\r\n    this.render = this.render.bind(this);\r\n    this.firstTime = true;\r\n    this.downHandler = this.downHandler.bind(this);\r\n    this.enemyCreator = null;\r\n    this.canPlace = false;\r\n    this.upgrade = this.upgrade.bind(this);\r\n    this.sell = this.sell.bind(this);\r\n    this.renderScore = this.renderScore.bind(this);\r\n    this.startNewWave = this.startNewWave.bind(this);\r\n    this.level = 0;\r\n    this.towerType = [\"Gun\", \"Missile\", \"Air\", \"Mix (Air + Ground)\"];\r\n    this.gameOverText = \"Game Over\";\r\n  }\r\n\r\n  upgrade(elapsedTime) {\r\n    let moneyRequired = Math.floor(0.5 * towerClicked.specs.cost);\r\n    console.log(towerClicked)\r\n    if (moneyRequired <= money) {\r\n      if (towerClicked) {\r\n        if (towerClicked.totalElapsedTime == undefined) {\r\n          towerClicked.totalElapsedTime = 0;\r\n        } else {\r\n          towerClicked.totalElapsedTime += elapsedTime;\r\n          if (towerClicked.totalElapsedTime >= 200) {\r\n            console.log(\"upgraded\");\r\n            towerClicked.totalElapsedTime -= 200;\r\n            if (!towerClicked.upgradeCount) {\r\n              towerClicked.upgradeCount = 1;\r\n            } else {\r\n              if (towerClicked.upgradeCount >= 3) {\r\n                return;\r\n              } else {\r\n                towerClicked.upgradeCount = towerClicked.upgradeCount + 1;\r\n                towerClicked.delay = Math.floor(towerClicked.delay * 0.7);\r\n                towerClicked.specs.power = towerClicked.specs.power + 1;\r\n                money -= moneyRequired;\r\n                gameSound.playSound(\"add\");\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  sell() {\r\n    if (towerClicked) {\r\n      let towerLength = this.towers.length;\r\n      for (let i = 0; i < towerLength; i++) {\r\n        if (\r\n          isColliding2(\r\n            this.towers[i].specs.center.x - cellWidth / 2,\r\n            this.towers[i].specs.center.y - cellWidth / 2,\r\n            cellWidth,\r\n            towerClicked.specs.center.x - cellWidth / 2,\r\n            towerClicked.specs.center.y - cellWidth / 2,\r\n            cellWidth\r\n          )\r\n        ) {\r\n          money += Math.floor(0.7 * towerClicked.specs.cost);\r\n          towerSold(this.towers[i].specs.center.x - cellWidth / 2, this.towers[i].specs.center.y - cellWidth / 2);\r\n          this.towers.splice(i, 1);\r\n          gameSound.playSound(\"die\");\r\n          towerClicked = null;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createElement() {\r\n    selectedTower = this.getAttribute(\"data-myName\");\r\n    towerRadius = this.getAttribute(\"data-radius\");\r\n    moneyRequired = parseInt(this.getAttribute(\"data-cost\"));\r\n    towerTypeSelected = parseInt(this.getAttribute(\"data-type\"));\r\n    if (moneyRequired <= money) {\r\n      renderCircle = true;\r\n      mouse.isActive = true;\r\n    }\r\n  }\r\n\r\n  downHandler(e, elapsedTime) {\r\n    if (mouse.isActive) {\r\n      firstTime = true;\r\n      mouse.isActive = false;\r\n      renderCircle = false;\r\n      let decision = canCreated(this.towers) && this.canPlace;\r\n      if (decision) {\r\n        this.towers.push(\r\n          createTower(\r\n            GameState.assets[selectedTower],\r\n            Math.floor(mouse.x / cellWidth) * cellWidth,\r\n            Math.floor((mouse.y - 200) / cellWidth) * cellWidth + 200,\r\n            2500,\r\n            1,\r\n            towerRadius,\r\n            moneyRequired,\r\n            towerTypeSelected\r\n          )\r\n        );\r\n        money = money - moneyRequired;\r\n        moneyRequired = 0;\r\n        towerTypeSelected = 0;\r\n        gameSound.playSound(\"add\");\r\n      }\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n    } else {\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n      mouse.x = e.clientX - canvasPosition.left;\r\n      mouse.y = e.clientY - canvasPosition.top;\r\n      findSelectedTower(this.towers);\r\n    }\r\n  }\r\n\r\n  muteVolume(e) {\r\n    e.preventDefault();\r\n    var towerElements = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].style.display = \"block\";\r\n    }\r\n    let myId = this.getAttribute(\"data-myId\");\r\n    document.getElementById(myId).style.display = \"none\";\r\n    if (myId == \"muteButton\") {\r\n      gameSound.stopAllSound();\r\n    }\r\n    if (myId == \"unmuteButton\") {\r\n      gameSound.unMuteSound();\r\n    }\r\n  }\r\n\r\n  startNewWave(e) {\r\n    e.preventDefault();\r\n    console.log(\"start button clicked\");\r\n    this.enemyCreator = levels[this.level].sendNextWave();\r\n    nextWave = false;\r\n    GameState.cancelNextRequest = false;\r\n  }\r\n\r\n  checkCanProceed() {\r\n    if (this.level > 2){  \r\n      this.gameOverText = \"You Won !!!\";\r\n      GameState.cancelNextRequest = true;\r\n      add(score);\r\n    } \r\n    if(GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      add(score);\r\n    \r\n    }\r\n    }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    createLevels();\r\n    makeParticle2();\r\n    this.myMouse = new Mouse();\r\n    GameState.cancelNextRequest = false;\r\n    GameState.life = 10;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push({\r\n          x: i,\r\n          y: j,\r\n        });\r\n      }\r\n      cellSet.push(row);\r\n    }\r\n\r\n    towerElements = document.getElementsByClassName(\"tower\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].addEventListener(\"click\", this.createElement, false);\r\n    }\r\n\r\n    towerElements2 = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements2.length; i++) {\r\n      towerElements2[i].addEventListener(\"click\", this.muteVolume, false);\r\n    }\r\n    startButton = document.getElementById(\"startButton\");\r\n    startButton.addEventListener(\"click\", this.startNewWave);\r\n\r\n    this.bulletController = new BulletController(this.creeps);\r\n\r\n\r\n    this.myMouse.register(\"mousedown\", this.downHandler);\r\n\r\n    this.myMouse.register(\"mousemove\", function (e, elapsedTime) {\r\n      if (mouse.isActive) {\r\n        const canvasPosition = canvas.getBoundingClientRect();\r\n        mouse.x = e.clientX - canvasPosition.left;\r\n        mouse.y = e.clientY - canvasPosition.top;\r\n        if (mouse.y < 200) {\r\n          mouse.y = 200;\r\n        }\r\n        this.renderCircle = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n    this.myMouse.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n\r\n    self.myKeyboard.register(upgrade, function (elapsedTime) {\r\n      self.upgrade(elapsedTime);\r\n    });\r\n\r\n    self.myKeyboard.register(sell, function (elapsedTime) {\r\n      self.sell(elapsedTime);\r\n    });\r\n\r\n    self.myKeyboard.register(start, function (elapsedTime) {\r\n      self.startNewWave(elapsedTime);\r\n    });\r\n\r\n    // self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      // this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n\r\n    particleSystem.update(elapsedTime);\r\n    let creepsLength = this.creeps.length;\r\n    for (let i = 0; i < creepsLength; i++) {\r\n      let creep = this.creeps[i];\r\n      if (creep) {\r\n        if (creep.player.reachRight() || creep.player.reachBottom()) {\r\n          this.creeps.splice(i, 1);\r\n          GameState.life--;\r\n          continue;\r\n        }\r\n        if (creep.health == 0) {\r\n          let x = creep.player.specs.center.x;\r\n          let y = creep.player.specs.center.y;\r\n          score += creep.maxHealth;\r\n          this.creeps.splice(i, 1);\r\n          creepDied(x, y);\r\n          totalCreepKilled++;\r\n          money += creep.maxHealth;\r\n          gameSound.playSound(\"die\");\r\n          let textEvent = new MovingEvents({\r\n            size: { x: 50, y: 50 },\r\n            center: { x: x, y: y },\r\n            rotation: 0,\r\n            moveRate: 125 / 1000, \r\n            rotateRate: Math.PI / 1000, \r\n            continousSpeed: 50,\r\n            yDirection: -1,\r\n            xDirection: 0,\r\n          });\r\n          this.flyingScores.push(\r\n            new FlyingScore(creep.maxHealth, textEvent, true)\r\n          );\r\n          continue;\r\n        }\r\n        creep.update(elapsedTime);\r\n        let towersLength = this.towers.length;\r\n        for (let i = 0; i < towersLength; i++) {\r\n          let tower = this.towers[i];\r\n          if (typeof creep.flying == \"undefined\" && tower.specs.type == 3) {\r\n            // console.log(\"flying\" + \" \" + i);\r\n          } else if (\r\n            typeof creep.flying != \"undefined\" &&\r\n            tower.specs.type < 3\r\n          ) {\r\n            // console.log(\"flying\" + \" \" + i);\r\n          } else {\r\n            if (isColliding(creep, tower, tower.specs.radius)) {\r\n              tower.setTarget(\r\n                creep.player.specs.center.x,\r\n                creep.player.specs.center.y\r\n              );\r\n              if (tower.canShoot) {\r\n                let direction = {\r\n                  x: tower.specs.target.x - tower.specs.center.x,\r\n                  y: tower.specs.target.y - tower.specs.center.y,\r\n                };\r\n                direction = normalize(direction);\r\n                let bulletStartX = tower.specs.center.x;\r\n                let bulletStartY = tower.specs.center.y;\r\n\r\n                this.bulletController.addBullet(\r\n                  bulletStartX,\r\n                  bulletStartY,\r\n                  creep,\r\n                  tower.specs.power,\r\n                  tower.specs.type\r\n                );\r\n                gameSound.playSound(\"shoot\");\r\n              }\r\n            }\r\n          }\r\n\r\n          tower.update(elapsedTime);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.bulletController.update(elapsedTime);\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].update(elapsedTime);\r\n      if (!this.flyingScores[i].isVisible) {\r\n        this.flyingScores.splice(i, 1);\r\n        i--;\r\n        scorelength--;\r\n      }\r\n    }\r\n    if (this.enemyCreator) {\r\n      let newEnemy = this.enemyCreator.createEnemy(elapsedTime);\r\n      if (newEnemy) {\r\n        this.creeps.push(newEnemy);\r\n      }\r\n    }\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n    document.getElementById(\"money\").innerHTML = money;\r\n    if(this.level<3){\r\n      let waveString = (levels[this.level].wave + 1) + \"/\" + maxWave;\r\n      document.getElementById(\"wave\").innerHTML = waveString;\r\n    }\r\n    var startButton = document.getElementById(\"startButton\");\r\n    document.getElementById(\"level\").innerHTML = this.level + 1;\r\n    document.getElementById(\"killed\").innerHTML = totalCreepKilled;\r\n    // startButton.style.display = \"none\";\r\n    if (nextWave) {\r\n      startButton.style.display = \"block\";\r\n    }\r\n    let totalTowerValues = 0;\r\n    this.towers.forEach((tower) => {\r\n      totalTowerValues += tower.specs.cost;\r\n    });\r\n    document.getElementById(\"towerValue\").innerHTML = totalTowerValues;\r\n\r\n    if (moneyRequired > 0) {\r\n      document.getElementById(\"selectedInfo\").style.display = \"block\";\r\n      document.getElementById(\"moneyRequired\").innerHTML = moneyRequired;\r\n      document.getElementById(\"power\").innerHTML =\r\n        this.towerType[parseInt(towerTypeSelected) - 1];\r\n    } else {\r\n      document.getElementById(\"selectedInfo\").style.display = \"none\";\r\n      document.getElementById(\"moneyRequired\").innerHTML = \"\";\r\n      document.getElementById(\"power\").innerHTML = \"\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let self = this;\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    context.fillStyle = \"green\";\r\n    context.fillRect(0, 0 + 200, 600, 800);\r\n    context.clearRect(50, 250, 500, 500);\r\n    context.clearRect(0, 400, 50, 200);\r\n    context.clearRect(550, 400, 50, 200);\r\n    context.clearRect(175, 200, 225, 50);\r\n    context.clearRect(175, 750, 225, 50);\r\n\r\n    if (nextWave && self.level < 3) {\r\n      // console.log(\r\n      //   levels[self.level].enemyCreators[levels[self.level].wave + 1].position\r\n      // );\r\n      if (\r\n        levels[self.level].enemyCreators[levels[self.level].wave + 1]\r\n          .position == \"top\"\r\n      ) {\r\n        // console.log(\"top\");\r\n        context.fillStyle = \"#d7a20e\";\r\n        context.fillRect(175, 0 + 200, 225, 50);\r\n      } else if (\r\n        levels[self.level].enemyCreators[levels[self.level].wave + 1]\r\n          .position == \"left\"\r\n      ) {\r\n        // console.log(\"left\");\r\n        context.fillStyle = \"#d7a20e\";\r\n        context.fillRect(0, 400, 50, 200);\r\n      }\r\n    }\r\n\r\n    if (mouse.isActive) {\r\n      let placementFlag = false;\r\n      for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n          let x1 = cellSet[i][j].x;\r\n          let y1 = cellSet[i][j].y;\r\n          if (\r\n            Math.floor((mouse.x - leftOffset) / cellWidth) == x1 &&\r\n            Math.floor((mouse.y - topOffset) / cellWidth) == y1\r\n          ) {\r\n            this.canPlace = true;\r\n            placementFlag = true;\r\n            context.beginPath();\r\n            context.rect(\r\n              x1 * cellWidth + leftOffset,\r\n              y1 * cellWidth + topOffset,\r\n              cellWidth,\r\n              cellWidth\r\n            );\r\n            context.stroke();\r\n          }\r\n        }\r\n      }\r\n      if (!placementFlag) {\r\n        this.canPlace = false;\r\n      }\r\n    }\r\n\r\n    // ctx.strokeRect(50, 50, 50, 50);\r\n\r\n    context.beginPath();\r\n    context.moveTo(0, 200);\r\n    context.lineTo(canvas.width, 200);\r\n    context.stroke();\r\n    if (renderCircle) {\r\n      drawTower(towerRadius);\r\n    }\r\n    context.fillStyle = \"black\";\r\n    this.renderScore();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    let towersLength = this.towers.length;\r\n    for (let i = 0; i < towersLength; i++) {\r\n      let tower = this.towers[i];\r\n      tower.render();\r\n    }\r\n    if (towerClicked) {\r\n      drawRectangle({\r\n        x: towerClicked.specs.center.x - cellWidth / 2,\r\n        y: towerClicked.specs.center.y - cellWidth / 2,\r\n        width: 50,\r\n        height: 50,\r\n        fill: \"#ffd63f9e\",\r\n        stroke: \"red\",\r\n      });\r\n    }\r\n\r\n    this.bulletController.render();\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].render();\r\n    }\r\n    particleSystem.render();\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    gameSound = new Sound();\r\n    gameSound.loadAudio();\r\n    gameSound.playSound(\"game_play\");\r\n    gameSound.changeVolume(10);\r\n    this.registerKey();\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    context.fillStyle = \"black\";\r\n\r\n    function gameLoop(time) {\r\n      if (\r\n        self.enemyCreator &&\r\n        self.enemyCreator.totalEnemy <= 0 &&\r\n        self.creeps.length == 0 &&\r\n        wave > 0 &&\r\n        self.level < 3 &&\r\n        !nextWave\r\n      ) {\r\n        nextWave = true;\r\n        if (\r\n          levels[self.level].wave >=\r\n          levels[self.level].enemyCreators.length - 1\r\n        ) {\r\n          self.level++;\r\n          self.towers = [];\r\n        }\r\n        // if (levels[self.level].wave == -1) {\r\n\r\n        // }\r\n        //  else {\r\n        //   console.log(\"nothing\");\r\n        //   context.fillStyle = \"red\";\r\n        //   context.fillRect(0, 400, 50, 200);\r\n        // }\r\n        // wave--;\r\n      } else {\r\n        // self.processInput(time - lastTimeStamp);\r\n        // self.update(time - lastTimeStamp);\r\n      }\r\n      self.checkCanProceed();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n        self.processInput(time - lastTimeStamp);\r\n        self.update(time - lastTimeStamp);\r\n        lastTimeStamp = time;\r\n        self.render();\r\n      } else {\r\n        if (score > 0) {\r\n          add(score);\r\n        }\r\n        gameSound.pauseSound(\"game_play\");\r\n        gameSound.playSound(\"success_end\");\r\n        gameSound.changeVolume(20);\r\n        context.font = \"70px roboto\";\r\n        context.fillStyle = \"black\";\r\n        context.textAlign = \"center\";\r\n\r\n        context.fillText(\r\n          self.gameOverText,\r\n          canvas.width / 2,\r\n          canvas.height * 0.6\r\n        );\r\n        context.fillText(score, canvas.width / 2, canvas.height * 0.8);\r\n        // for (var i = 0; i < towerElements.length; i++) {\r\n        //   towerElements[i].removeEventListener(\r\n        //     \"click\",\r\n        //     this.createElement,\r\n        //     false\r\n        //   );\r\n        // }\r\n\r\n        // for (var i = 0; i < towerElements2.length; i++) {\r\n        //   towerElements2[i].removeEventListener(\r\n        //     \"click\",\r\n        //     this.muteVolume,\r\n        //     false\r\n        //   );\r\n        // }\r\n        // startButton.removeEventListener(\"click\", self.startNewWave);\r\n        setTimeout(() => {\r\n          self.manager.showScreen(\"mainmenu\");\r\n        }, 4000);\r\n      }\r\n      lastTimeStamp = time;\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}