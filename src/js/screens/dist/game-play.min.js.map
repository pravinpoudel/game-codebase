{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","myMouse","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","renderCircle","sound","particlesSmoke","registerKey","Image","render","downHandler","upgrade","creeps","sell","towers","renderScore","flyingScores","tower1","firstTime","moneyRequired","towerClicked","specs","cost","money","startNewWave","level","upgradeCount","gameOverText","alreadyUpgraded","alreadyStarted","delay","Math","floor","power","elapsedTime","playSound","towerType","i","gameSound","isColliding2","center","x","cellWidth","y","towerSold","towerLength","length","splice","selectedTower","getAttribute","towerRadius","parseInt","towerTypeSelected","e","mouse","canCreated","canPlace","push","createTower","isActive","decision","canvas","getBoundingClientRect","canvasPosition","findSelectedTower","preventDefault","document","getElementsByClassName","towerElements","style","display","getElementById","myId","stopAllSound","unMuteSound","console","log","enemyCreator","levels","sendNextWave","startButton","nextWave","GameState","cancelNextRequest","add","score","life","Mouse","register","showScreen","createLevels","rows","j","cols","cellSet","row","addEventListener","createElement","towerElements2","muteVolume","bulletController","clientX","left","clientY","top","update","localStorage","start","particleSystem1","particleSystem2","creepsLength","creep","player","reachBottom","creepDied","totalCreepKilled","textEvent","MovingEvents","size","moveRate","PI","xDirection","rotateRate","maxHealth","yDirection","towersLength","FlyingScore","tower","flying","type","isColliding","radius","setTarget","direction","target","normalize","bulletStartX","bulletStartY","addBullet","scorelength","isVisible","newEnemy","createEnemy","innerHTML","waveString","totalTowerValues","forEach","context","width","height","fillStyle","clearRect","enemyCreators","wave","position","fillRect","placementFlag","leftOffset","x1","rect","stroke","topOffset","y1","beginPath","lineTo","drawTower","drawRectangle","fill","time","now","requestAnimationFrame","setTimeout","checkCanProceed","processInput","font","changeVolume","textAlign","fillText","gameLoop"],"mappings":"uZAAMA,oBACJ,SAAAA,EAAYC,EAASC,GAAOC,gBAAAC,KAAAJ,GAC1BI,KAAKC,WAAaH,EAClBE,KAAKE,QAAU,KACfF,KAAKG,cACLH,KAAKH,QAAUA,EACfG,KAAKI,MAAQ,KACbJ,KAAKK,WAAaL,KAAKK,WAAWC,KAAKN,MAPrCJ,KAAAA,IAQSI,KAAKO,IAAID,KAAKN,MACzBA,KAAKQ,YAAc,KACnBC,KAAKC,UAAY,KATnBV,KAAAW,cAAYd,EAAgBG,KAAAY,MAAA,KAY1BZ,KAAKa,eAAiB,KAXtBb,KAAKC,OAAAA,GACLD,KAAKE,OAAL,GACAF,KAAKG,YAALH,KAAAc,YAAAR,KAAAN,MACAA,KAAKH,aAAUA,GACfG,KAAKI,OAAQ,IAAbW,MACAf,KAAKK,OAAAA,IAAa,+BAClBL,KAAKO,OAAMP,KAAAgB,OAAcV,KAAzBN,MACAA,KAAKQ,WAAL,EACAC,KAAKC,YAAYV,KAAjBiB,YAAAX,KAAAN,MACAA,KAAKW,aAAe,KACpBX,KAAKY,UAAQ,EACbZ,KAAKa,QAAAA,KAALK,QAAAZ,KAAAN,MACAA,KAAKmB,KAALnB,KAAAoB,KAAAd,KAAAN,MACAA,KAAKqB,YAALrB,KAAAsB,YAAAhB,KAAAN,MACAA,KAAKc,aAAcd,KAAKc,aAAYR,KAAKN,MACzCA,KAAKuB,MAAAA,EACLvB,KAAKwB,UAAS,CAAIT,MAAlB,UAAA,MAAA,sBACAf,KAAKwB,aAAa,YAClBxB,KAAKgB,iBAAcA,EACnBhB,KAAKyB,gBAAL,yDAIA,IAAAzB,KAAKkB,gBAAeA,CACpB,IAAAQ,EAAiBN,KAAKd,MAAV,IAAZqB,aAAAC,MAAAC,MACA,GAAAH,GAAmBI,OACdC,aACAC,GAAQL,aAAbM,aAEKC,CACAC,GAAL,GAAKA,aAAkBF,aAClBG,OAcOT,aAAaM,aAAeN,aAAaM,aAAe,EACxDN,aAAaU,MAAQC,KAAKC,MAA2B,GAArBZ,aAAaU,OAC7CV,aAAaC,MAAMY,MAAQb,aAAaC,MAAMY,MAAQ,EACtDb,aAdNc,MAAAA,KAAaH,KAAAC,MACVJ,IAAAA,aAAgBP,MAAAC,MAgBbC,OAASJ,EAdjBA,KAAAA,iBAAwB,EACtBC,UAAJe,UAAkB,YAVfC,aAAYV,aAAmB,kCAoBxBN,GAAAA,aAIA,IADAG,IAAAA,EAAK9B,KAAI0B,OAAAA,OACTkB,EAAA,EAAKT,EAAAA,EAAkBS,IACvBC,GACDC,aACF9C,KAAAqB,OAAAuB,GAAAhB,MAAAmB,OAAAC,EAAAC,UAAA,EACFjD,KAAAqB,OAAAuB,GAAAhB,MAAAmB,OAAAG,EAAAD,UAAA,EACFA,UACFtB,aAAAC,MAAAmB,OAAAC,EAAAC,UAAA,EACFtB,aAAAC,MAAAmB,OAAAG,EAAAD,UAAA,EAcOA,WAGFnB,OAbFH,OAAAA,KAAcY,MAAA,GAAAZ,aAAAC,MAAAC,MAChBsB,UAAIC,KAAW/B,OAAQA,GAAAA,MAAOgC,OAA9BL,EAAAC,UAAA,EAAAjD,KAAAqB,OAAAuB,GAAAhB,MAAAmB,OAAAG,EAAAD,UAAA,GAcIjD,KAAKqB,OAAOiC,OAAOV,EAAG,GAb1BC,UAAUH,UAAUU,YAClBzB,aACEmB,8CAgBHS,cAAAvD,KAAAwD,aAAA,eACFC,YAAAzD,KAAAwD,aAAA,eACF9B,cAAAgC,SAAA1D,KAAAwD,aAAA,cAMCG,kBAAoBD,SAAS1D,KAAKwD,aAAa,cAC3C9B,eAAiBI,QACnBnB,cAAe,EALjB4C,MAAAA,UAAgB,uCAUNK,GANV,GAAAC,MAAInC,SAAa,CACff,WAAAA,EACAkD,MAAAA,UAAA,EACDlD,cAAA,EACFmD,WAAA9D,KAAAqB,SAAArB,KAAA+D,WASK/D,KAAKqB,OAAO2C,KACVC,YAPFJ,UAAMK,OAAUX,eAClB9B,KAASc,MAAGsB,MAAZb,EAAAC,WAAAA,UACAY,KAAMK,OAANL,MAAAX,EAAA,KAAAD,WAAAA,UAAA,IACAtC,KACIwD,EASEV,YARFU,cACFR,oBAcAA,OAAAA,cACAd,cAAUH,EACXiB,kBAAA,EADCd,UAAUH,UAAU,QAGjB0B,OAAAC,4BACL,CAAA,IAAMC,EAAiBF,OAAOC,wBAC9BR,MAAAA,EAAAD,EAAUA,QAAAU,EAAYA,KACtBT,MAAAA,EAAAD,EAAUA,QAAAU,EAAYA,IACtBC,kBAAAA,KAAkBlD,4CAIXuC,GACTA,EAAEY,iBACF,IADAZ,IAAEY,EAAFC,SAAAC,uBAAA,gBACIC,EAAAA,EAAAA,EAAaA,EAAYD,OAAAA,IAE3BC,EAAc/B,GAAGgC,MAAMC,QAAU,QAAjCF,IAAAA,EAAAA,KAAAA,aAAuBE,aACxBJ,SAAAK,eAAAC,GAAAH,MAAAC,QAAA,OAGW,cAARE,GAFJlC,UAAQmC,eAKI,gBAARD,GAHJlC,UAAQoC,qDAYRC,QAAQC,IAAI,wBACZnF,KAAKoF,aAAeC,OAAOrF,KAAKgC,OAAOsD,eACvCC,YAAYX,MAAMC,QAAU,OAL5BW,UAAA,EACAC,UAAAC,mBAAA,4CAIYd,EAAZW,KAAAA,QACAC,KAAAA,aAAA,cACAC,UAAUC,mBAAoB,EAC/BC,IAAAC,QAQIH,UAAUI,MAAQ,IACnBJ,UAAUC,mBAAoB,EANhCC,IAAIC,6CAKJ,IAAAnF,EAAGgF,KACDA,eACAE,gBAED3F,KAAAE,QAAA,IAAA4F,MACAL,UAAAC,mBAAA,EAQDD,UAAUI,KAAO,GACjBpF,EAAKR,WAAW8F,SAAS,SAAU,WACjCN,UAAUC,mBARD,EACXjF,EAAIA,QAAOuF,WAAX,aACAC,cAEA,IAAA,IAAK/F,EAAAA,EAAL0C,EAAesD,KAAAtD,IAAf,CAEA6C,IADAA,IAAAA,EAAUC,GACDS,EAACN,EAAVM,EAAAC,KAAAD,IACA1F,EAAKR,KAAAA,CACHwF,EAAAA,EACAhF,EAAKZ,IAGPwG,QAAKrC,KAAKsC,GAER3B,cAAUF,SAAU2B,uBAAW,SAC7BE,IAAAA,IAAG1D,EAACoB,EAAKpB,EAAA+B,cAAAtB,OAAAT,IACPI,cADOJ,GAAA2D,iBAAA,QAAAvG,KAAAwG,eAAA,GAIVC,eAAAhC,SAAAC,uBAAA,gBAUH,IAAS9B,EAAI,EAAGA,EAAI6D,eAAepD,OAAQT,IATzCyD,eAAaC,GAAbC,iBAAA,QAAAvG,KAAA0G,YAAA,GAYFnB,YAAcd,SAASK,eAAe,eATtCH,YAAAA,iBAAyBD,QAAAA,KAAAA,cACzB1E,KAAA2G,iBAAoBhC,IAAAA,iBAAuB3E,KAAImB,QAc/CnB,KAAKE,QAAQ6F,SAAS,YAAa/F,KAAKiB,aAExCjB,KAAKE,QAAQ6F,SAAS,YAAa,SAAUnC,EAAGnB,GAXhD,GAAAoB,MAAUK,SAAUuC,CAClBA,IAAAA,EAAkBF,OAAAA,wBACnB1C,MAAAb,EAAAY,EAAAgD,QAAAtC,EAAAuC,KAaGhD,MAAMX,EAAIU,EAAEkD,QAAUxC,EAAeyC,IAZzCxB,MAAWrC,EAAGuB,MACdc,MAAAA,EAAYgB,KAKZvG,KAAKE,cAAiB,0CAMbuC,GAUTzC,KAAKC,WAAW+G,OAAOvE,GATnBzC,KAAAE,QAAI2D,OAAUpB,yCAGd,IAAAhC,EAAKE,KACNO,EAAA+F,aAAA,QATH7F,EAAA6F,aAAA,KAWDC,EAAAD,aAAA,MAaCxG,EAAKR,WAAW8F,SACd7E,EAXF,SAAKjB,GACLQ,EAAKP,QAAQ8G,IAcX,SAAUvE,GACRhC,EAAK0B,iBAAkB,IAT3B1B,EAAAR,WAAWgH,SACX7F,EAEAX,SAAKR,GAGDQ,EAAKS,KAAAA,IAGLT,cAOAA,QAAI0E,IAAC/D,GACNX,EACDR,WAAA8F,SAGFb,EACAzE,SAAKR,GAGIQ,EAAK2B,iBACR3B,EAAKsB,aAAaU,GAClBhC,EAAK2B,gBAAiB,IAO7B,SAAAK,qCAEMA,GAIH,GAAAgD,UAAAI,MAAA,EACDJ,UAAAC,mBAAA,MADC,CAGFyB,gBAAgBH,OAAOvE,GAGvB2E,gBAAAJ,OAAoBK,GAApB,IACE,IAAAA,EAAYrH,KAAKmB,OAAjBkC,OADOT,EAAI,EAAGA,EAAIyE,EAAczE,IAAK,CAErC,IAAA0E,EAAAtH,KAAWmB,OAAAyB,GACT,GAAA0E,EAAIA,CACF,GAAAA,EAAKnG,OAAOmC,cAAZgE,EAAAC,OAAAC,cAAA,CACA/B,KAAAA,OAAUI,OAAVjD,EAAA,GACA6C,UAAAI,OACD,SACD,GAAI,GAAJyB,EAAIA,OAAJ,CACE,IAAAtE,EAAKsE,EAAGA,OAAMC,MAAO3F,OAAMmB,EAC3BG,EAAKoE,EAAGA,OAAMC,MAAO3F,OAAMmB,EAC3B6C,OAAK0B,EAAIA,UACTtH,KAAAmB,OAAKA,OAAOmC,EAAZ,GACAmE,UAAAA,EAASvE,GACTwE,mBACA5F,OAAKwF,EAAIA,UACTzE,UAAAA,UAAUH,OACV,IAAAiF,EAAa,IAAGC,aAAIA,CAClBC,KAAI,CAAE7E,EAAA,GAAAE,EAAA,IAAEF,OAAG,CAALA,EAAAA,EAAAE,EAAAA,GAASA,SAAG,EAAZ4E,SADyB,KAE/B/E,WAAQT,KAAAyF,GAAA,IAAE/E,eAAF,GAAQE,YAAGA,EAAX8E,WAFuB,IAI/BF,KAAAA,aAAU9D,KACViE,IAAAA,YAAY3F,EAAA4F,UALmBP,GAAA,IAO/BQ,SAP+Bb,EAAjCN,OAAAvE,GAaA,IAHA,IAAA2F,EAAK7G,KAAayC,OACZqE,OAENzF,EAAA,EAAAA,EAAAwF,EAAAxF,IAAA,CACD,IAAA0F,EAAAtI,KAAAqB,OAAAuB,GAKC,SAA2B,IAAhB0E,EAAMiB,QAA6C,GAApBD,EAAM1G,MAAM4G,cAG7B,IAAhBlB,EAAMiB,QALjBD,EAAK1G,MAAK4G,KAAO,IAEfC,YAGEnB,EAAYgB,EAAZA,EAAuB1G,MAAA8G,UADlBJ,EAKAK,UACLrB,EAAImB,OAAW7G,MAAAmB,OAAAC,EACbsF,EAAMK,OAAAA,MACJrB,OAAMC,GAGRe,EAAIA,UAAJ,CACEA,EAAAA,SAAA,EACA,IAAAM,EAAa,CACX5F,EAACsF,EAAEA,MAAM1G,OAAMiH,EAAZP,EAAuBA,MAAM1G,OAAMmB,EACtCG,EAACoF,EAAEA,MAAM1G,OAAMiH,EAAZP,EAAuBA,MAAM1G,OAAMmB,GAExC6F,EAASE,UAAGA,GACZ,IAAAC,EAAgBT,EAAGA,MAAM1G,OAAMmB,EAC/BiG,EAAgBV,EAAGA,MAAM1G,OAAMmB,EAS/BF,KAAAA,iBAAoBoG,UACrBF,EACFC,EACF1B,EANOgB,EAAM1G,MAAMY,MAQdwE,EAANpF,MAAaa,MAEhBI,UAAAH,UAAA,SAFG4F,EAAMtB,OAAOvE,KAUfzC,KAAA2G,iBAAKpF,OAAa+B,GAElB4F,IADAtG,IAAAA,EAAC5C,KAAAuB,aAAA8B,OACD6F,EAAAA,EAAAA,EAAWA,EAAAtG,IACZ5C,KAAAuB,aAAAqB,GAAAoE,OAAAvE,GACFzC,KAAAuB,aAAAqB,GAAAuG,YAJGnJ,KAAKuB,aAAa+B,OAAOV,EAAG,GAKhCA,IACEsG,KAEE,GAAAlJ,KAAAoF,aAAiBgE,CAClB,IAAAA,EAAApJ,KAAAoF,aAAAiE,YAAA5G,GACF2G,GACFpJ,KAAAmB,OAAA6C,KAAAoF,2CAOG,GAFF3E,SAAAA,eAASK,gBAAwBwE,UAAjC1D,MADAnB,SAASK,eAAe,SAASwE,UAAY7D,UAAUI,KAEvDpB,SAAGK,eAAa,SAAAwE,UAAAxH,MACd9B,KAAIuJ,MAAAA,EAAAA,CACJ9E,IAAAA,EAASK,OAAT9E,KAAwBgC,OAAQsH,KAAhC,EAA4CC,IAAAA,QAC7C9E,SAAAK,eAAA,QAAAwE,UAAAC,EACc9E,SAAGA,eAASK,eAC3BL,SAAAA,eAASK,SAATwE,UAAAtJ,KAA6CgC,MAAA,EAC7CyC,SAAAA,eAASK,UAATwE,UAAA5B,iBAKA,IAAA8B,EAAoB,EACpBxJ,KAAAqB,OAAKA,QAAOoI,SAAZnB,GACEkB,GAAgBlB,EAAIA,MAAM1G,OAE5B6C,SAAAA,eAASK,cAATwE,UAAAE,EAEiB,EAAjB9H,eAAIC,cACFA,eACED,cAAaY,KAAGA,MAAKC,IAAMZ,aAAMA,MAAaC,MAC9C+B,kBAAiBhC,aAAGA,MAAaC,MAEnC6C,SAASK,eAAe,gBAAgBF,MAAMC,QAAU,QAAxDJ,SAAAA,eAASK,iBAATwE,UAA8CzE,cAC9CJ,SAAAA,eAASK,SAAewE,UACxB7E,KAAAA,UAASK,SAAenB,mBACtB,KAEFc,SAAAA,eAASK,gBAATF,MAAwCA,QAAxC,OACAH,SAAAA,eAASK,iBAATwE,UAAA,GACA7E,SAAAA,eAASK,SAATwE,UAAA,qCAKF,IAAI7I,EAAOT,KAmCL,GAnCN0J,QAAIjJ,UAAJ,EAAA,EAAA2D,OAAAuF,MAAAvF,OAAAwF,QACAF,QAAAA,UAAkB,QAClBA,QAAAA,SAAQG,EAAR,IAAA,IAAA,KACAH,QAAAA,UAAA,GAAoB,IAAI,IAAK,KAC7BA,QAAAA,UAAQI,EAAU,IAAI,GAAK,KAC3BJ,QAAAA,UAAQI,IAAa,IAAK,GAAI,KAC9BJ,QAAAA,UAAQI,IAAR,IAAA,IAAA,IACAJ,QAAAA,UAAQI,IAAR,IAAA,IAAA,IAGItE,UAAY/E,EAAKuB,MAAQ,IAQzB,OAJFqD,OACEA,EAAO5E,OAAKuB,cAAO+H,OAAc1E,EAAO5E,OAAKuB,KAAOgI,GAGpDC,UAGDP,QAAMG,UACEpJ,UAGPiJ,QAAAQ,SAAA,IAAA,IAAA,IAAA,KAGD,QADCR,OAAAA,EAAQQ,OAASH,cAAY1E,OAA7B5E,EAAAuB,OAAAgI,KAAA,GACDC,WAGHP,QAAUxF,UAAU,UAClBwF,QAAIS,SAAa,EAAG,IAApB,GAAA,OAGItG,MAAAK,SAASmC,CAFb,IAGI,IAAA8D,GAAS9D,EAHJzD,EAAI,EAAGA,EAAIsD,KAAMtD,IAItB,IAAA,IACEN,EAAKC,EAAAA,EAAOsB,KAAMb,IAAIoH,CAGtB,IAAAC,EAAKtG,QAALnB,GAAgBuD,GAAAnD,EAChBmH,EAAAA,QAAavH,GAAGuD,GAAAjD,EAEhBwG,KAAAA,OAAQY,MACJtH,EAAGC,YAAYmH,YACZnH,GAIPyG,KAAAA,OAAQa,MAARrH,EAAAsH,WAAAvH,YAAAwH,IAGLN,EADEnK,KAAA+D,UAAA,EATG2F,QAAQgB,YAWVhB,QAACS,KACHE,EAAKtG,UAALqG,WACDK,EAAAxH,UAAAuH,UAGHvH,UAXUA,WAaVyG,QAAQgB,UAPDP,IAWPnK,KAAIW,UAAc,GAKlB+I,QAAKvI,YACHmG,QAAAA,OAAMtG,EAAN,KACD0I,QAFDiB,OAAAvG,OAAAuF,MAAA,KAGAD,QAAItB,SARAzH,cASJiK,UAAShI,aAEP0F,QAAAA,UAAA,QACDtI,KAAAsB,cAPDtB,KAAKmB,OAAOsI,QAAQ,SAACnC,GAQrBA,EAAI3F,WAGAuB,IADAF,IAAAA,EAAGrB,KAAaC,OAAMmB,OACnBpB,EAAAA,EAAAA,EAAAA,EAAAiB,IAA8BK,CAC1BjD,KAHKqB,OAAAuB,GAIZgH,SAEAW,cANYM,cAAd,CAQD7H,EAAArB,aAAAC,MAAAmB,OAAAC,EAAAC,UAAA,EANGC,EAAGvB,aAAaC,MAAMmB,OAAOG,EAAID,UAAY,EAQjD0G,MAAKhD,GACLiD,OAAIV,GANA4B,KAAM,YAOVP,OAAS3H,QAGTuE,KAAAA,iBAAgBnG,SAEjB,IADCoG,IAAAA,EAAgBpG,KAAAA,aAAhBqC,OACDT,EAAA,EAAAA,EAAAsG,EAAAtG,IAJG5C,KAAKuB,aAAaqB,GAAG5B,SAEvBmG,gBAAgBnG,SAKhBoG,gBAAWpG,uCAIX6B,IAAAA,EAAS7C,KACT6C,UAAK/B,IAAAA,MACL+B,UAAI1C,YACJsF,UAAAA,UAAUC,aAEVgE,UAAQG,aAAY,IAJpB7J,KAAKc,cAML,IAAAX,EAAkB4K,YAAMC,MACtBvF,UACEhF,mBACAA,EALJiJ,QAAQG,UAAY,QA0DpBoB,sBA1CMxK,SAAAA,EAAAsK,GAEAxF,EAAAA,cACA9E,EAAAA,aAAK2B,YAAL,GAEE,GADH3B,EARDU,OASIkC,QACF6H,EAAAA,MACEzK,EAAAA,MAAKsB,IACNyD,WAEJA,UAAA,EAED/E,OAAK0K,EAAAA,OAALnB,MAdI3E,OAAO5E,EAAKuB,OAAO+H,cAAc1G,OAAS,GAgB5C4H,EAAAA,QACAxK,EAAK2K,OAAAA,GACL3K,YAAYsK,MAAIlG,QAAG1E,QACnBA,EAAAA,gBAAA,GAGA+K,WAAS,WACPvF,EAAIC,gBACL,MAGD/C,EAAAA,kBACA6G,UAAQ2B,mBAUR,EAAUzF,OAGXD,IAAAC,OACDzF,UAAAA,WAAA,aACD0C,UAAAH,UAAA,eAhBGG,UAAUyI,aAAa,IAiB3BL,QAAAA,KAAAA,cACDvB,QAAAG,UAAA,QAfKH,QAAQ6B,UAAY,SAEpB7B,QAAQ8B,SACN/K,EAAKyB,aACLkC,OAAOuF,MAAQ,EACC,GAAhBvF,OAAOwF,QAETF,QAAQ8B,SAAS5F,MAAOxB,OAAOuF,MAAQ,EAAmB,GAAhBvF,OAAOwF,QACjDsB,WAAW,WACTzK,EAAKZ,QAAQmG,WAAW,aACvB,OAXH0D,sBAAoB+B,GACpB/B,EAAAA,aAAQ6B,EAAYpL,GAEpBuJ,EAAAA,OAAQ8B,EACN/K,GAIFiJ,EAAQ8B,EACRN,EAAAA,UAIF/K,EAAgB4K","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.myMouse = null;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.renderCircle = false;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.creeps = [];\r\n    this.towers = [];\r\n    this.registerKey = this.registerKey.bind(this);\r\n    this.flyingScores = [];\r\n    this.tower1 = new Image();\r\n    this.tower1.src = \"assets/turret/turret-5-3.png\";\r\n    this.render = this.render.bind(this);\r\n    this.firstTime = true;\r\n    this.downHandler = this.downHandler.bind(this);\r\n    this.enemyCreator = null;\r\n    this.canPlace = false;\r\n    this.upgrade = this.upgrade.bind(this);\r\n    this.sell = this.sell.bind(this);\r\n    this.renderScore = this.renderScore.bind(this);\r\n    this.startNewWave = this.startNewWave.bind(this);\r\n    this.level = 0;\r\n    this.towerType = [\"Gun\", \"Missile\", \"Air\", \"Mix (Air + Ground)\"];\r\n    this.gameOverText = \"Game Over\";\r\n    this.alreadyUpgraded = false;\r\n    this.alreadyStarted = false;\r\n  }\r\n\r\n  upgrade(elapsedTime) {\r\n    if(!this.alreadyUpgraded){\r\n    let moneyRequired = Math.floor(1.2 * towerClicked.specs.cost);\r\n    if (moneyRequired <= money) {\r\n      if (towerClicked) {\r\n            if (!towerClicked.upgradeCount) {\r\n              towerClicked.upgradeCount = 1;\r\n            } else {\r\n              if (towerClicked.upgradeCount >= 3) {\r\n                return;\r\n              } else {\r\n                towerClicked.upgradeCount = towerClicked.upgradeCount + 1;\r\n                towerClicked.delay = Math.floor(towerClicked.delay * 0.7);\r\n                towerClicked.specs.power = towerClicked.specs.power + 1;\r\n                towerClicked.specs.cost = Math.floor(\r\n                  1.2 * towerClicked.specs.cost\r\n                );\r\n                money -= moneyRequired;\r\n                this.alreadyUpgraded = true;\r\n                gameSound.playSound(\"add\");\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n  sell() {\r\n    if (towerClicked) {\r\n      let towerLength = this.towers.length;\r\n      for (let i = 0; i < towerLength; i++) {\r\n        if (\r\n          isColliding2(\r\n            this.towers[i].specs.center.x - cellWidth / 2,\r\n            this.towers[i].specs.center.y - cellWidth / 2,\r\n            cellWidth,\r\n            towerClicked.specs.center.x - cellWidth / 2,\r\n            towerClicked.specs.center.y - cellWidth / 2,\r\n            cellWidth\r\n          )\r\n        ) {\r\n          money += Math.floor(0.7 * towerClicked.specs.cost);\r\n          towerSold(this.towers[i].specs.center.x - cellWidth / 2, this.towers[i].specs.center.y - cellWidth / 2);\r\n          this.towers.splice(i, 1);\r\n          gameSound.playSound(\"die\");\r\n          towerClicked = null;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createElement() {\r\n    selectedTower = this.getAttribute(\"data-myName\");\r\n    towerRadius = this.getAttribute(\"data-radius\");\r\n    moneyRequired = parseInt(this.getAttribute(\"data-cost\"));\r\n    towerTypeSelected = parseInt(this.getAttribute(\"data-type\"));\r\n    if (moneyRequired <= money) {\r\n      renderCircle = true;\r\n      mouse.isActive = true;\r\n    }\r\n  }\r\n\r\n  downHandler(e, elapsedTime) {\r\n    if (mouse.isActive) {\r\n      firstTime = true;\r\n      mouse.isActive = false;\r\n      renderCircle = false;\r\n      let decision = canCreated(this.towers) && this.canPlace;\r\n      if (decision) {\r\n        this.towers.push(\r\n          createTower(\r\n            GameState.assets[selectedTower],\r\n            Math.floor(mouse.x / cellWidth) * cellWidth,\r\n            Math.floor((mouse.y - 200) / cellWidth) * cellWidth + 200,\r\n            2500,\r\n            1,\r\n            towerRadius,\r\n            moneyRequired,\r\n            towerTypeSelected\r\n          )\r\n        );\r\n        money = money - moneyRequired;\r\n        moneyRequired = 0;\r\n        towerTypeSelected = 0;\r\n        gameSound.playSound(\"add\");\r\n      }\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n    } else {\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n      mouse.x = e.clientX - canvasPosition.left;\r\n      mouse.y = e.clientY - canvasPosition.top;\r\n      findSelectedTower(this.towers);\r\n    }\r\n  }\r\n\r\n  muteVolume(e) {\r\n    e.preventDefault();\r\n    var towerElements = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].style.display = \"block\";\r\n    }\r\n    let myId = this.getAttribute(\"data-myId\");\r\n    document.getElementById(myId).style.display = \"none\";\r\n    if (myId == \"muteButton\") {\r\n      gameSound.stopAllSound();\r\n    }\r\n    if (myId == \"unmuteButton\") {\r\n      gameSound.unMuteSound();\r\n    }\r\n  }\r\n\r\n  startNewWave(e) {\r\n    // if(e){\r\n    //   e.preventDefault();\r\n    // }\r\n    console.log(\"start button clicked\");\r\n    this.enemyCreator = levels[this.level].sendNextWave();\r\n    startButton.style.display = \"none\";\r\n    nextWave = false;\r\n    GameState.cancelNextRequest = false;\r\n  }\r\n\r\n  checkCanProceed() {\r\n    if (this.level > 2){  \r\n      this.gameOverText = \"You Won !!!\";\r\n      GameState.cancelNextRequest = true;\r\n      add(score);\r\n    } \r\n    if(GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      add(score);\r\n    \r\n    }\r\n    }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    createLevels();\r\n    makeParticle2();\r\n    this.myMouse = new Mouse();\r\n    GameState.cancelNextRequest = false;\r\n    GameState.life = 10;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    }, ()=>{});\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push({\r\n          x: i,\r\n          y: j,\r\n        });\r\n      }\r\n      cellSet.push(row);\r\n    }\r\n\r\n    towerElements = document.getElementsByClassName(\"tower\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].addEventListener(\"click\", this.createElement, false);\r\n    }\r\n\r\n    towerElements2 = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements2.length; i++) {\r\n      towerElements2[i].addEventListener(\"click\", this.muteVolume, false);\r\n    }\r\n    startButton = document.getElementById(\"startButton\");\r\n    startButton.addEventListener(\"click\", this.startNewWave);\r\n\r\n    this.bulletController = new BulletController(this.creeps);\r\n\r\n\r\n    this.myMouse.register(\"mousedown\", this.downHandler);\r\n\r\n    this.myMouse.register(\"mousemove\", function (e, elapsedTime) {\r\n      if (mouse.isActive) {\r\n        const canvasPosition = canvas.getBoundingClientRect();\r\n        mouse.x = e.clientX - canvasPosition.left;\r\n        mouse.y = e.clientY - canvasPosition.top;\r\n        if (mouse.y < 200) {\r\n          mouse.y = 200;\r\n        }\r\n        this.renderCircle = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n    this.myMouse.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n\r\n    self.myKeyboard.register(\r\n      upgrade,\r\n      function (elapsedTime) {\r\n        self.upgrade(elapsedTime);\r\n      },\r\n      function (elapsedTime) {\r\n        self.alreadyUpgraded = false;\r\n      }\r\n    );\r\n\r\n    self.myKeyboard.register(\r\n      sell,\r\n      function (elapsedTime) {\r\n        self.sell(elapsedTime);\r\n      },\r\n      () => {}\r\n    );\r\n\r\n    console.log(start);\r\n    self.myKeyboard.register(\r\n      start,\r\n      function (elapsedTime) {\r\n        if (!self.alreadyStarted) {\r\n          self.startNewWave(elapsedTime);\r\n          self.alreadyStarted = true;\r\n        }\r\n      },\r\n      function (elapsedTime) {}\r\n    );\r\n\r\n    // self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      // this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n\r\n    particleSystem1.update(elapsedTime);\r\n    particleSystem2.update(elapsedTime);\r\n    let creepsLength = this.creeps.length;\r\n    for (let i = 0; i < creepsLength; i++) {\r\n      let creep = this.creeps[i];\r\n      if (creep) {\r\n        if (creep.player.reachRight() || creep.player.reachBottom()) {\r\n          this.creeps.splice(i, 1);\r\n          GameState.life--;\r\n          continue;\r\n        }\r\n        if (creep.health == 0) {\r\n          let x = creep.player.specs.center.x;\r\n          let y = creep.player.specs.center.y;\r\n          score += creep.maxHealth;\r\n          this.creeps.splice(i, 1);\r\n          creepDied(x, y);\r\n          totalCreepKilled++;\r\n          money += creep.maxHealth;\r\n          gameSound.playSound(\"die\");\r\n          let textEvent = new MovingEvents({\r\n            size: { x: 50, y: 50 },\r\n            center: { x: x, y: y },\r\n            rotation: 0,\r\n            moveRate: 125 / 1000, \r\n            rotateRate: Math.PI / 1000, \r\n            continousSpeed: 50,\r\n            yDirection: -1,\r\n            xDirection: 0,\r\n          });\r\n          this.flyingScores.push(\r\n            new FlyingScore(creep.maxHealth, textEvent, true)\r\n          );\r\n          continue;\r\n        }\r\n        creep.update(elapsedTime);\r\n        let towersLength = this.towers.length;\r\n        for (let i = 0; i < towersLength; i++) {\r\n          let tower = this.towers[i];\r\n          if (typeof creep.flying == \"undefined\" && tower.specs.type == 3) {\r\n            // console.log(\"flying\" + \" \" + i);\r\n          } else if (\r\n            typeof creep.flying != \"undefined\" &&\r\n            tower.specs.type < 3\r\n          ) {\r\n            // console.log(\"flying\" + \" \" + i);\r\n          } else {\r\n            if (isColliding(creep, tower, tower.specs.radius)) {\r\n              tower.setTarget(\r\n                creep.player.specs.center.x,\r\n                creep.player.specs.center.y\r\n              );\r\n              if (tower.canShoot) {\r\n                tower.isFirst = false;\r\n                let direction = {\r\n                  x: tower.specs.target.x - tower.specs.center.x,\r\n                  y: tower.specs.target.y - tower.specs.center.y,\r\n                };\r\n                direction = normalize(direction);\r\n                let bulletStartX = tower.specs.center.x;\r\n                let bulletStartY = tower.specs.center.y;\r\n\r\n                this.bulletController.addBullet(\r\n                  bulletStartX,\r\n                  bulletStartY,\r\n                  creep,\r\n                  tower.specs.power,\r\n                  tower.specs.type\r\n                );\r\n                gameSound.playSound(\"shoot\");\r\n              }\r\n            }\r\n          }\r\n\r\n          tower.update(elapsedTime);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.bulletController.update(elapsedTime);\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].update(elapsedTime);\r\n      if (!this.flyingScores[i].isVisible) {\r\n        this.flyingScores.splice(i, 1);\r\n        i--;\r\n        scorelength--;\r\n      }\r\n    }\r\n    if (this.enemyCreator) {\r\n      let newEnemy = this.enemyCreator.createEnemy(elapsedTime);\r\n      if (newEnemy) {\r\n        this.creeps.push(newEnemy);\r\n      }\r\n    }\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n    document.getElementById(\"money\").innerHTML = money;\r\n    if(this.level<3){\r\n      let waveString = (levels[this.level].wave + 1) + \"/\" + maxWave;\r\n      document.getElementById(\"wave\").innerHTML = waveString;\r\n    }\r\n    var startButton = document.getElementById(\"startButton\");\r\n    document.getElementById(\"level\").innerHTML = this.level + 1;\r\n    document.getElementById(\"killed\").innerHTML = totalCreepKilled;\r\n    // startButton.style.display = \"none\";\r\n    // if (nextWave) {\r\n    //   startButton.style.display = \"block\";\r\n    // }\r\n    let totalTowerValues = 0;\r\n    this.towers.forEach((tower) => {\r\n      totalTowerValues += tower.specs.cost;\r\n    });\r\n    document.getElementById(\"towerValue\").innerHTML = totalTowerValues;\r\n\r\n    if (moneyRequired > 0 || towerClicked) {\r\n      if (towerClicked) {\r\n        moneyRequired = Math.floor(1.2 * towerClicked.specs.cost);\r\n        towerTypeSelected = towerClicked.specs.type;\r\n      }\r\n      document.getElementById(\"selectedInfo\").style.display = \"block\";\r\n      document.getElementById(\"moneyRequired\").innerHTML = moneyRequired;\r\n      document.getElementById(\"power\").innerHTML =\r\n        this.towerType[parseInt(towerTypeSelected) - 1];\r\n    } else {\r\n      document.getElementById(\"selectedInfo\").style.display = \"none\";\r\n      document.getElementById(\"moneyRequired\").innerHTML = \"\";\r\n      document.getElementById(\"power\").innerHTML = \"\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let self = this;\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    context.fillStyle = \"green\";\r\n    context.fillRect(0, 0 + 200, 600, 800);\r\n    context.clearRect(50, 250, 500, 500);\r\n    context.clearRect(0, 400, 50, 200);\r\n    context.clearRect(550, 400, 50, 200);\r\n    context.clearRect(175, 200, 225, 50);\r\n    context.clearRect(175, 750, 225, 50);\r\n\r\n    if (nextWave && self.level < 3) {\r\n      // console.log(\r\n      //   levels[self.level].enemyCreators[levels[self.level].wave + 1].position\r\n      // );\r\n      if (\r\n        levels[self.level].enemyCreators[levels[self.level].wave + 1]\r\n          .position == \"top\"\r\n      ) {\r\n        // console.log(\"top\");\r\n        context.fillStyle = \"#d7a20e\";\r\n        context.fillRect(175, 0 + 200, 225, 50);\r\n      } else if (\r\n        levels[self.level].enemyCreators[levels[self.level].wave + 1]\r\n          .position == \"left\"\r\n      ) {\r\n        // console.log(\"left\");\r\n        context.fillStyle = \"#d7a20e\";\r\n        context.fillRect(0, 400, 50, 200);\r\n      }\r\n    }\r\n\r\n    if (mouse.isActive) {\r\n      let placementFlag = false;\r\n      for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n          let x1 = cellSet[i][j].x;\r\n          let y1 = cellSet[i][j].y;\r\n          if (\r\n            Math.floor((mouse.x - leftOffset) / cellWidth) == x1 &&\r\n            Math.floor((mouse.y - topOffset) / cellWidth) == y1\r\n          ) {\r\n            this.canPlace = true;\r\n            placementFlag = true;\r\n            context.beginPath();\r\n            context.rect(\r\n              x1 * cellWidth + leftOffset,\r\n              y1 * cellWidth + topOffset,\r\n              cellWidth,\r\n              cellWidth\r\n            );\r\n            context.stroke();\r\n          }\r\n        }\r\n      }\r\n      if (!placementFlag) {\r\n        this.canPlace = false;\r\n      }\r\n    }\r\n\r\n    // ctx.strokeRect(50, 50, 50, 50);\r\n\r\n    context.beginPath();\r\n    context.moveTo(0, 200);\r\n    context.lineTo(canvas.width, 200);\r\n    context.stroke();\r\n    if (renderCircle) {\r\n      drawTower(towerRadius);\r\n    }\r\n    context.fillStyle = \"black\";\r\n    this.renderScore();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    let towersLength = this.towers.length;\r\n    for (let i = 0; i < towersLength; i++) {\r\n      let tower = this.towers[i];\r\n      tower.render();\r\n    }\r\n    if (towerClicked) {\r\n      drawRectangle({\r\n        x: towerClicked.specs.center.x - cellWidth / 2,\r\n        y: towerClicked.specs.center.y - cellWidth / 2,\r\n        width: 50,\r\n        height: 50,\r\n        fill: \"#ffd63f9e\",\r\n        stroke: \"red\",\r\n      });\r\n    } \r\n\r\n    this.bulletController.render();\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].render();\r\n    }\r\n    particleSystem1.render();\r\n    particleSystem2.render();\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    gameSound = new Sound();\r\n    gameSound.loadAudio();\r\n    gameSound.playSound(\"game_play\");\r\n    gameSound.changeVolume(10);\r\n    this.registerKey();\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    context.fillStyle = \"black\";\r\n\r\n    function gameLoop(time) {\r\n      if (\r\n        self.enemyCreator &&\r\n        self.enemyCreator.totalEnemy <= 0 &&\r\n        self.creeps.length == 0 &&\r\n        wave > 0 &&\r\n        self.level < 3 &&\r\n        !nextWave\r\n      ) {\r\n        nextWave = true;\r\n        if (\r\n          levels[self.level].wave >=\r\n          levels[self.level].enemyCreators.length - 1\r\n        ) {\r\n          self.level++;\r\n          self.towers = [];\r\n          startButton.style.display = \"block\";\r\n          self.alreadyStarted = false;\r\n        }\r\n        else{\r\n          setTimeout(() => {\r\n            self.startNewWave();\r\n          }, 1000);  \r\n        }\r\n      }\r\n\r\n      self.checkCanProceed();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n        self.processInput(time - lastTimeStamp);\r\n        self.update(time - lastTimeStamp);\r\n        lastTimeStamp = time;\r\n        self.render();\r\n      } else {\r\n        if (score > 0) {\r\n          add(score);\r\n        }\r\n        gameSound.pauseSound(\"game_play\");\r\n        gameSound.playSound(\"success_end\");\r\n        gameSound.changeVolume(20);\r\n        context.font = \"70px roboto\";\r\n        context.fillStyle = \"black\";\r\n        context.textAlign = \"center\";\r\n\r\n        context.fillText(\r\n          self.gameOverText,\r\n          canvas.width / 2,\r\n          canvas.height * 0.6\r\n        );\r\n        context.fillText(score, canvas.width / 2, canvas.height * 0.8);\r\n        setTimeout(() => {\r\n          self.manager.showScreen(\"mainmenu\");\r\n        }, 4000);\r\n      }\r\n      lastTimeStamp = time;\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}