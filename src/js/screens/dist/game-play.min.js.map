{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","myMouse","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","renderCircle","sound","particlesSmoke","registerKey","Image","render","downHandler","EnemyCreator","upgrade","creeps","sell","flyingScores","moneyRequired","floor","towerClicked","specs","cost","money","undefined","firstTime","lotalElapsedTime","elapsedTime","console","log","delay","Math","power","towerLength","towers","length","i","center","x","cellWidth","y","myTower","getAttribute","parseInt","selectedTower","mouse","isActive","canCreated","canPlace","push","canvas","getBoundingClientRect","canvasPosition","left","decision","findSelectedTower","towerElements","document","getElementsByClassName","myId","getElementById","style","display","Mouse","register","GameState","cancelNextRequest","showScreen","rows","j","addEventListener","createElement","towerElements2","row","muteVolume","bulletController","BulletController","e","clientY","top","update","localStorage","life","creepsLength","creep","reachRight","splice","start","health","player","maxHealth","textEvent","MovingEvents","size","rotation","rotateRate","PI","continousSpeed","xDirection","FlyingScore","towersLength","tower","isColliding","score","setTarget","canShoot","direction","target","normalize","bulletStartX","bulletStartY","moveRate","addBullet","scorelength","newEnemy","innerHTML","wave","wavesDeno","wavesNeno","context","height","fillStyle","fillRect","clearRect","isVisible","cols","x1","cellSet","enemyCreator","leftOffset","topOffset","y1","placementFlag","beginPath","rect","stroke","lineTo","width","drawTower","renderScore","drawRectangle","fill","Sound","performance","now","requestAnimationFrame","time","gameLoop"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.myMouse = null;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.renderCircle = false;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.creeps = [];\r\n    this.towers = [];\r\n    this.registerKey = this.registerKey.bind(this);\r\n    this.flyingScores = [];\r\n    this.tower1 = new Image();\r\n    this.tower1.src = \"assets/turret/turret-5-3.png\";\r\n    this.render = this.render.bind(this);\r\n    this.firstTime = true;\r\n    this.downHandler = this.downHandler.bind(this);\r\n    this.enemyCreator = new EnemyCreator(10);\r\n    this.canPlace = false;\r\n    this.upgrade = this.upgrade.bind(this);\r\n    this.sell = this.sell.bind(this);\r\n  }\r\n\r\n  upgrade(elapsedTime) {\r\n    let moneyRequired = Math.floor(0.5*towerClicked.specs.cost);\r\n    if(moneyRequired<=money){\r\n      if(towerClicked){\r\n        if(towerClicked.lotalElapsedTime == undefined){\r\n          towerClicked.lotalElapsedTime = 0;\r\n        }\r\n        else{\r\n          towerClicked.lotalElapsedTime += elapsedTime;\r\n          if(towerClicked.lotalElapsedTime >=500){    \r\n            console.log(\"upgraded\")\r\n            towerClicked.lotalElapsedTime -= 500;\r\n            towerClicked.delay = Math.floor(towerClicked.delay * 0.7);\r\n            towerClicked.specs.power = towerClicked.specs.power + 1;  \r\n            money -= moneyRequired;  \r\n          }\r\n        }\r\n      }  \r\n    }\r\n  }\r\n\r\n   sell() {\r\n     if(towerClicked){\r\n      let towerLength = this.towers.length;\r\n      for(let i=0; i<towerLength; i++){\r\n        if(isColliding2(this.towers[i].specs.center.x - cellWidth/2,this.towers[i].specs.center.y- cellWidth/2, cellWidth,towerClicked.specs.center.x - cellWidth/2, towerClicked.specs.center.y- cellWidth/2, cellWidth)){\r\n         money += Math.floor(0.7*towerClicked.specs.cost);\r\n         this.towers.splice(i, 1);\r\n         towerClicked = null;\r\n        }\r\n      }\r\n     }\r\n\r\n    }\r\n\r\n  createElement() {\r\n    let myTower = this.getAttribute(\"data-myName\");\r\n    moneyRequired = parseInt(this.getAttribute(\"data-cost\"));\r\n    selectedTower = \"assets/turret/\" + myTower;\r\n    if(moneyRequired<=money){\r\n      renderCircle = true;\r\n      mouse.isActive = true;  \r\n    }\r\n  }\r\n\r\n  downHandler(e, elapsedTime) {\r\n    if (mouse.isActive) {\r\n      firstTime = true;\r\n      mouse.isActive = false;\r\n      renderCircle = false;\r\n      let decision = canCreated(this.towers) && this.canPlace;\r\n      if (decision) {\r\n        this.towers.push(\r\n          createTower(\r\n            selectedTower,\r\n            Math.floor(mouse.x / cellWidth) * cellWidth,\r\n            Math.floor((mouse.y - 200) / cellWidth) * cellWidth + 200,\r\n            1000,\r\n            1,\r\n            moneyRequired\r\n          )\r\n        );\r\n        money = money- moneyRequired;\r\n        console.log(moneyRequired)\r\n      }\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n    } else {\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n      mouse.x = e.clientX - canvasPosition.left;\r\n      mouse.y = e.clientY - canvasPosition.top;\r\n      findSelectedTower(this.towers);\r\n    }\r\n  }\r\n\r\n  muteVolume(e) {\r\n    var towerElements = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].style.display = \"block\";\r\n    }\r\n    let myId = this.getAttribute(\"data-myId\");\r\n    document.getElementById(myId).style.display = \"none\";\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    this.myMouse = new Mouse();\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    self.myKeyboard.register(\"s\", function(elapsedTime){\r\n      self.sell(elapsedTime);\r\n    });\r\n\r\n    self.myKeyboard.register(\"u\", function(elapsedTime){\r\n      self.upgrade(elapsedTime);\r\n    });\r\n\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push({\r\n          x: i,\r\n          y: j,\r\n        });\r\n      }\r\n      cellSet.push(row);\r\n    }\r\n\r\n    var towerElements = document.getElementsByClassName(\"tower\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].addEventListener(\"click\", this.createElement, false);\r\n    }\r\n\r\n    var towerElements2 = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements2.length; i++) {\r\n      towerElements2[i].addEventListener(\"click\", this.muteVolume, false);\r\n    }\r\n\r\n    this.bulletController = new BulletController();\r\n\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-5-3.png\", 300, 500, 1000, 1)\r\n    // );\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-3-3.png\", 600, 500, 2000, 2)\r\n    // );\r\n\r\n    this.myMouse.register(\"mousedown\", this.downHandler);\r\n\r\n    // this.myMouse.register('mouseup', function(e, elapsedTime) {\r\n    //   mouse.isActive = false;\r\n    // });\r\n\r\n    this.myMouse.register(\"mousemove\", function (e, elapsedTime) {\r\n      if (mouse.isActive) {\r\n        const canvasPosition = canvas.getBoundingClientRect();\r\n        mouse.x = e.clientX - canvasPosition.left;\r\n        mouse.y = e.clientY - canvasPosition.top;\r\n        if (mouse.y < 200) {\r\n          mouse.y = 200;\r\n        }\r\n        this.renderCircle = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n    this.myMouse.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n    // self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      // this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n    let creepsLength = this.creeps.length;\r\n    for (let i = 0; i < creepsLength; i++) {\r\n      let creep = this.creeps[i];\r\n      if (creep) {\r\n        if (creep.reachRight()) {\r\n          this.creeps.splice(i, 1);\r\n          GameState.life--;\r\n          console.log(GameState.life);\r\n          continue;\r\n        }\r\n        if (creep.health == 0) {\r\n          let x = creep.player.specs.center.x;\r\n          let y = creep.player.specs.center.y;\r\n          score += creep.maxHealth;\r\n          this.creeps.splice(i, 1);\r\n          let textEvent = new MovingEvents({\r\n            size: { x: 50, y: 50 }, // Size in pixels\r\n            center: { x: x, y: y },\r\n            rotation: 0,\r\n            moveRate: 125 / 1000, // Pixels per second\r\n            rotateRate: Math.PI / 1000, // Radians per second\r\n            continousSpeed: 50,\r\n            yDirection: -1,\r\n            xDirection: 0,\r\n          });\r\n          this.flyingScores.push(\r\n            new FlyingScore(creep.maxHealth, textEvent, true)\r\n          );\r\n          continue;\r\n        }\r\n        creep.update(elapsedTime);\r\n        let towersLength = this.towers.length;\r\n        for (let i = 0; i < towersLength; i++) {\r\n          let tower = this.towers[i];\r\n          if (isColliding(creep, tower, 100)) {\r\n            tower.setTarget(\r\n              creep.player.specs.center.x,\r\n              creep.player.specs.center.y\r\n            );\r\n            if (tower.canShoot) {\r\n              let direction = {\r\n                x: tower.specs.target.x - tower.specs.center.x,\r\n                y: tower.specs.target.y - tower.specs.center.y,\r\n              };\r\n              direction = normalize(direction);\r\n              let bulletStartX = tower.specs.center.x;\r\n              let bulletStartY = tower.specs.center.y;\r\n\r\n              this.bulletController.addBullet(\r\n                bulletStartX,\r\n                bulletStartY,\r\n                creep,\r\n                tower.specs.power\r\n              );\r\n            }\r\n          }\r\n\r\n          tower.update(elapsedTime);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.bulletController.update(elapsedTime);\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].update(elapsedTime);\r\n      if (!this.flyingScores[i].isVisible) {\r\n        this.flyingScores.splice(i, 1);\r\n        i--;\r\n        scorelength--;\r\n      }\r\n    }\r\n    let newEnemy = this.enemyCreator.createEnemy(elapsedTime);\r\n    if (newEnemy) {\r\n      this.creeps.push(newEnemy);\r\n    }\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n    document.getElementById(\"money\").innerHTML = money;\r\n    let wave = wavesDeno + \"/\" + wavesNeno;\r\n    document.getElementById(\"wave\").innerHTML = wave;\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    context.fillStyle = \"green\";\r\n    context.fillRect(0, 0 + 200, 600, 800);\r\n    context.clearRect(50, 250, 500, 500);\r\n    context.clearRect(0, 400, 50, 200);\r\n    context.clearRect(550, 400, 50, 200);\r\n\r\n    if (mouse.isActive) {\r\n      let placementFlag = false;\r\n      for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n          let x1 = cellSet[i][j].x;\r\n          let y1 = cellSet[i][j].y;\r\n          if (\r\n            Math.floor((mouse.x - leftOffset) / cellWidth) == x1 &&\r\n            Math.floor((mouse.y - topOffset) / cellWidth) == y1\r\n          ) {\r\n            this.canPlace = true;\r\n            placementFlag = true;\r\n            context.beginPath();\r\n            context.rect(\r\n              x1 * cellWidth + leftOffset,\r\n              y1 * cellWidth + topOffset,\r\n              cellWidth,\r\n              cellWidth\r\n            );\r\n            context.stroke();\r\n          }\r\n        }\r\n      }\r\n      if (!placementFlag) {\r\n        this.canPlace = false;\r\n      }\r\n    }\r\n\r\n    // ctx.strokeRect(50, 50, 50, 50);\r\n\r\n    context.beginPath();\r\n    context.moveTo(0, 200);\r\n    context.lineTo(canvas.width, 200);\r\n    context.stroke();\r\n    if (renderCircle) {\r\n      drawTower(100);\r\n    }\r\n    this.renderScore();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    let towersLength = this.towers.length;\r\n    for (let i = 0; i < towersLength; i++) {\r\n      let tower = this.towers[i];\r\n      tower.render();\r\n    }\r\n    if (towerClicked) {\r\n      drawRectangle({\r\n        x: towerClicked.specs.center.x - cellWidth / 2,\r\n        y: towerClicked.specs.center.y - cellWidth / 2,\r\n        width: 50,\r\n        height: 50,\r\n        fill: \"#ffd63f9e\",\r\n        stroke: \"red\",\r\n      });\r\n    }\r\n\r\n    this.bulletController.render();\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].render();\r\n    }\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    this.sound = new Sound();\r\n    this.sound.loadAudio();\r\n    // this.sound.playSound(\"end\");\r\n    this.registerKey();\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}