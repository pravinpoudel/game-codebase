{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","lastTimeStamp","model","initialize","bind","run","self","wallModel","sound","particlesSmoke","tower","creeps","makeCreateCreep1","makeCreateCreep2","makeCreateCreep3","GameState","cancelNextRequest","Tower","baseSprite","weaponSprite","center","x","y","target","register","elapsedTime","update","localStorage","cleanAll","_this","life","forEach","creep","isColliding","setTarget","upgrade","sell","player","document","getElementById","innerHTML","score","context","clearRect","canvas","width","height","renderScore","render","Sound","requestAnimationFrame","processInput","time","gameLoop"],"mappings":"uZAAMA,oBACJ,SAAAA,EAAYC,EAASC,GAAOC,gBAAAC,KAAAJ,GAC1BI,KAAKC,WAAaH,EAClBE,KAAKE,cACLF,KAAKH,QAAUA,EACfG,KAAKG,MAAQ,KACbH,KAAKI,WAAaJ,KAAKI,WAAWC,KAAKL,MACvCA,KAAKM,IAAMN,KAAKM,IAAID,KAAKL,MAPvBJ,KAAAA,YAQiB,KACnBW,KAAKC,UAAY,KACjBR,KAAKS,MAAQ,KATfT,KAAAU,eAAYb,KAAgBG,KAAAW,MAAA,KAY1BX,KAAKY,OAAS,CAXdC,iBAAkBf,GAAlB,KACAgB,iBAAA,IAAA,KACAC,iBAAelB,IAAf,MAEAG,KAAKI,YAAaJ,KAAKI,YAAWC,KAAKL,gEAIvC,IAAAO,EAAAP,KACAO,EAAKG,WAAAA,SAAiB,SAAtB,WACAM,UAAAC,mBAAA,EACAV,EAAKK,QACHC,WAAAA,cAcFb,KAAKW,MAAQ,IAAIO,MAAM,CACrBC,WAAY,2BACZC,aAAc,+BACdC,OAAQ,CAAEC,EAAG,IAAKC,EAAG,KATvBC,OAAQ,CAAAF,EAAG,IAAXC,EAAA,KACAhB,WAAKN,EAAWwB,QAAS,2CASjBC,GAAIJ,KAAAA,WAAFK,OAAAD,yCAIVE,aAAA,QACAA,aAAA,KACAA,aAAA,MAWW5B,KAVXC,WAAA4B,0CAGDH,GAAA,IAAAI,EAAA9B,KAeC,GAAIgB,UAAUe,MAAQ,EAZtB,OAaEf,UAAUC,mBAAoB,OAC9BjB,KAAKU,eAAeiB,OAfXD,GAkBX1B,KAAKY,OAAOoB,QAAQ,SAACC,GACnBA,EAAMN,OAAOD,GACTQ,YAAYD,EAAOH,EAhBbnB,MAAA,MACZmB,EAAIvB,MAAO4B,UACPC,EAAAA,OAAUR,MAAAA,OAAaN,EACvBe,EAAIC,OAAGV,MAAYP,OAAAE,KAqBvBvB,KAAKW,MAAMgB,OAAOD,yCAZhBa,SAAAC,eAAA,gBAAAC,UAAAC,MACDH,SAAAC,eAAA,SAAAC,UAAAzB,UAAAe,sCAuBDY,QAAQC,UAAU,EAAG,EAAGC,OAAOC,MAAOD,OAAOE,QApB3C/C,KAAAgD,cAKChD,KAAAY,OAAAoB,QAAA,SAAAC,GACFA,EACDgB,WACAjD,KAAAW,MAAKA,uCAsBL,IAAIJ,EAAOP,KACXA,KAAKS,MAAQ,IAAIyC,MAhBjBX,KAAAA,MAASC,YACTD,KAAAA,cAOA,IAAArC,EAAY8B,YAASC,MACnBA,UAAMgB,mBAAN,EAYFE,sBAVA,SAAKxC,EAAMsC,GACZ1C,EAAA6C,aAAAC,EAAAnD,GAmBGK,EAAKoB,OAAO0B,EAAOnD,GACnBA,EAAgBmD,EAChB9C,EAAK0C,SAlBH1C,UAAJU,mBACAkC,sBAAAG","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.tower = null;\r\n    this.creeps = [\r\n      makeCreateCreep1(20, 300),\r\n      makeCreateCreep2(100, 300),\r\n      makeCreateCreep3(300, 300),\r\n    ];\r\n    this.registerKey = this.registerKey.bind(this);\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    this.tower = new Tower({\r\n      baseSprite: \"assets/tile-1-center.gif\",\r\n      weaponSprite: \"assets/turret/turret-5-3.png\",\r\n      center: { x: 300, y: 400 },\r\n      target: { x: 300, y: 100 },\r\n      rotateRate: (6 * 3.14159) / 1000, // radians per second\r\n    });\r\n\r\n    // this.playerModel = this.createEnemy(\r\n    //   100,\r\n    //   100,\r\n    //   \"assets/spritesheet-bird.png\"\r\n    // );\r\n    // self.enemycontroller = new EnemyController(self.playerModel);\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n    self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n    this.creeps.forEach((creep) => {\r\n      creep.update(elapsedTime);\r\n      if (isColliding(creep, this.tower, 200)) {\r\n        this.tower.setTarget(\r\n          creep.player.specs.center.x,\r\n          creep.player.specs.center.y\r\n        );\r\n      }\r\n    });\r\n    // this.playerModel.update(elapsedTime);\r\n    this.tower.update(elapsedTime);\r\n   \r\n    // this.enemycontroller.update(elapsedTime);\r\n    // model.update(elapsedTime);\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    this.renderScore();\r\n    // this.playerModel.render();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    this.tower.render();\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    this.sound = new Sound();\r\n    this.sound.loadAudio();\r\n    this.registerKey();\r\n\r\n    // this.myKeyboard.register(\"ArrowUp\", self.playerModel.player.moveTop);\r\n    // this.myKeyboard.register(\"ArrowDown\", self.playerModel.player.moveDown);\r\n    // this.myKeyboard.register(\"ArrowLeft\", self.playerModel.player.moveLeft);\r\n    // this.myKeyboard.register(\"ArrowRight\", self.playerModel.player.moveRight);\r\n    // console.log(self.playerModel.moveRight);\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}