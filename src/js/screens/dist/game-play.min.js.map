{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","myMouse","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","renderCircle","sound","particlesSmoke","registerKey","Image","src","render","downHandler","EnemyCreator","myTower","flyingScores","getAttribute","selectedTower","console","tower1","mouse","firstTime","canPlace","isActive","log","canCreated","Math","floor","x","cellWidth","y","canvas","getBoundingClientRect","canvasPosition","elapsedTime","left","clientY","top","towers","towerElements","document","getElementsByClassName","i","push","length","style","display","myId","getElementById","findSelectedTower","register","GameState","cancelNextRequest","showScreen","rows","row","cellSet","createElement","towerElements2","addEventListener","muteVolume","BulletController","e","bulletController","update","localStorage","cleanAll","life","creepsLength","creep","creeps","reachRight","splice","upgrade","sell","start","health","player","specs","center","score","maxHealth","size","rotation","moveRate","PI","continousSpeed","yDirection","textEvent","towersLength","isColliding","tower","setTarget","canShoot","direction","target","normalize","bulletStartX","bulletStartY","addBullet","rotateRate","power","scorelength","isVisible","newEnemy","innerHTML","money","wave","context","clearRect","width","height","placementFlag","j","cols","x1","y1","enemyCreator","createEnemy","topOffset","beginPath","rect","leftOffset","wavesDeno","moveTo","drawTower","renderScore","Sound","performance","now","requestAnimationFrame","gameLoop","time","processInput","forEach"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.myMouse = null;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.renderCircle = false;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.creeps = [\r\n      ];\r\n    this.towers = [];\r\n    this.registerKey = this.registerKey.bind(this);\r\n    this.flyingScores = [];\r\n    this.tower1 = new Image();\r\n    this.tower1.src = \"assets/turret/turret-5-3.png\";\r\n    this.render = this.render.bind(this);\r\n    this.firstTime = true;\r\n    this.downHandler = this.downHandler.bind(this);\r\n    this.enemyCreator = new EnemyCreator(10);\r\n    this.canPlace = false;\r\n  }\r\n\r\n  createElement() {\r\n    let myTower = this.getAttribute(\"data-myName\");\r\n    selectedTower = \"assets/turret/\" + myTower;\r\n    console.log(selectedTower);\r\n    renderCircle = true;\r\n    mouse.isActive = true;\r\n  }\r\n\r\n  downHandler(e, elapsedTime) {\r\n    if (mouse.isActive) {\r\n      firstTime = true;\r\n      mouse.isActive = false;\r\n      renderCircle = false;\r\n      console.log(selectedTower);\r\n      let decision= canCreated(this.towers)&& this.canPlace;\r\n      if(decision){\r\n      this.towers.push(createTower(selectedTower, Math.floor(mouse.x/cellWidth)*cellWidth, Math.floor((mouse.y-200)/cellWidth)*cellWidth +200, 1000, 1));\r\n      }\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n      \r\n    }\r\n    else{\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n      mouse.x = e.clientX - canvasPosition.left;\r\n      mouse.y = e.clientY - canvasPosition.top;\r\n      findSelectedTower(this.towers)\r\n    }\r\n  }\r\n\r\n  muteVolume(e) {\r\n    var towerElements = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].style.display = \"block\";\r\n    }\r\n    let myId = this.getAttribute(\"data-myId\");\r\n    document.getElementById(myId).style.display = \"none\";\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    this.myMouse = new Mouse();\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push(\r\n          {\r\n            x: i,\r\n            y: j ,\r\n          },\r\n        );\r\n      }\r\n      cellSet.push(row);\r\n    }\r\n\r\n    var towerElements = document.getElementsByClassName(\"tower\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].addEventListener(\"click\", this.createElement, false);\r\n    }\r\n\r\n    var towerElements2 = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements2.length; i++) {\r\n      towerElements2[i].addEventListener(\"click\", this.muteVolume, false);\r\n    }\r\n\r\n    this.bulletController = new BulletController();\r\n\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-5-3.png\", 300, 500, 1000, 1)\r\n    // );\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-3-3.png\", 600, 500, 2000, 2)\r\n    // );\r\n\r\n    this.myMouse.register(\"mousedown\", this.downHandler);\r\n\r\n    // this.myMouse.register('mouseup', function(e, elapsedTime) {\r\n    //   mouse.isActive = false;\r\n    // });\r\n\r\n\r\n\r\n    this.myMouse.register(\"mousemove\", function (e, elapsedTime) {\r\n      if (mouse.isActive) {\r\n        const canvasPosition = canvas.getBoundingClientRect();\r\n        mouse.x = e.clientX - canvasPosition.left;\r\n        mouse.y = e.clientY - canvasPosition.top;\r\n        if (mouse.y < 200) {\r\n          mouse.y = 200;\r\n        }\r\n        this.renderCircle = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n    this.myMouse.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n    self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      // this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n    let creepsLength = this.creeps.length;\r\n    for (let i = 0; i < creepsLength; i++) {\r\n      let creep = this.creeps[i];\r\n      if (creep) {\r\n        if (creep.reachRight()) {\r\n          this.creeps.splice(i, 1);\r\n          GameState.life--;\r\n          console.log(GameState.life);\r\n          continue;\r\n        }\r\n        if (creep.health == 0) {\r\n          let x = creep.player.specs.center.x;\r\n          let y = creep.player.specs.center.y;\r\n          score += creep.maxHealth;\r\n          this.creeps.splice(i, 1);\r\n          let textEvent = new MovingEvents({\r\n            size: { x: 50, y: 50 }, // Size in pixels\r\n            center: { x: x, y: y },\r\n            rotation: 0,\r\n            moveRate: 125 / 1000, // Pixels per second\r\n            rotateRate: Math.PI / 1000, // Radians per second\r\n            continousSpeed: 50,\r\n            yDirection: -1,\r\n            xDirection: 0,\r\n          });\r\n          this.flyingScores.push(\r\n            new FlyingScore(creep.maxHealth, textEvent, true)\r\n          );\r\n          continue;\r\n        }\r\n        creep.update(elapsedTime);\r\n        let towersLength = this.towers.length;\r\n        for (let i = 0; i < towersLength; i++) {\r\n          let tower = this.towers[i];\r\n          if (isColliding(creep, tower, 100)) {\r\n            tower.setTarget(\r\n              creep.player.specs.center.x,\r\n              creep.player.specs.center.y\r\n            );\r\n            if (tower.canShoot) {\r\n              let direction = {\r\n                x: tower.specs.target.x - tower.specs.center.x,\r\n                y: tower.specs.target.y - tower.specs.center.y,\r\n              };\r\n              direction = normalize(direction);\r\n              let bulletStartX = tower.specs.center.x;\r\n              let bulletStartY = tower.specs.center.y;\r\n\r\n              this.bulletController.addBullet(\r\n                bulletStartX,\r\n                bulletStartY,\r\n                creep,\r\n                tower.specs.power\r\n              );\r\n            }\r\n          }\r\n\r\n          tower.update(elapsedTime);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.bulletController.update(elapsedTime);\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].update(elapsedTime);\r\n      if (!this.flyingScores[i].isVisible) {\r\n        this.flyingScores.splice(i, 1);\r\n        i--;\r\n        scorelength--;\r\n      }\r\n    }\r\n    let newEnemy = this.enemyCreator.createEnemy(elapsedTime);\r\n    if (newEnemy) {\r\n      this.creeps.push(newEnemy);\r\n    }\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n    document.getElementById(\"money\").innerHTML = money;\r\n    let wave = wavesDeno + \"/\" + wavesNeno;\r\n    document.getElementById(\"wave\").innerHTML = wave;\r\n  }\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    context.fillStyle = \"green\";\r\n    context.fillRect(0, 0+200, 600, 800);\r\n    context.clearRect(50, 250, 500, 500);\r\n    context.clearRect(0, 400, 50, 200);\r\n    context.clearRect(550, 400, 50, 200);\r\n\r\n    if (mouse.isActive) {\r\n      let placementFlag = false;\r\n      for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n          let x1 = cellSet[i][j].x;\r\n          let y1 = cellSet[i][j].y;\r\n          if (\r\n            Math.floor((mouse.x -leftOffset) / cellWidth) == x1 &&\r\n            Math.floor((mouse.y - topOffset) / cellWidth) == y1\r\n          ) {\r\n            this.canPlace = true;\r\n            placementFlag = true;\r\n            context.beginPath();\r\n            context.rect(\r\n              x1 * cellWidth + leftOffset,\r\n              y1 * cellWidth + topOffset,\r\n              cellWidth,\r\n              cellWidth\r\n            );\r\n            context.stroke();\r\n          }\r\n        }\r\n      }\r\n      if(!placementFlag){\r\n        this.canPlace = false;\r\n      }\r\n    }\r\n\r\n    // ctx.strokeRect(50, 50, 50, 50);\r\n\r\n    context.beginPath();\r\n    context.moveTo(0, 200);\r\n    context.lineTo(canvas.width, 200);\r\n    context.stroke();\r\n    if (renderCircle) {\r\n      drawTower(100);\r\n    }\r\n    this.renderScore();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    let towersLength = this.towers.length;\r\n    for (let i = 0; i < towersLength; i++) {\r\n      let tower = this.towers[i];\r\n      tower.render();\r\n    }\r\n    this.bulletController.render();\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].render();\r\n    }\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    this.sound = new Sound();\r\n    this.sound.loadAudio();\r\n    // this.sound.playSound(\"end\");\r\n    this.registerKey();\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}