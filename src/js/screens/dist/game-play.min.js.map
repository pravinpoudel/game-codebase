{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","cancelNextRequest","lastTimeStamp","model","initialize","bind","run","playerModel","self","register","player","MovingObject","size","x","center","y","rotation","moveRate","rotateRate","Math","PI","ModelAnimation","showScreen","moveForward","rotateLeft","rotateRight","elapsedTime","log","update","spriteCount","spriteTime","render","turnUp","turnDown","console","turnLeft","turnRight","performance","now","requestAnimationFrame","time","processInput","gameLoop"],"mappings":"uZAAMA,oBACJ,SAAAA,EAAYC,EAASC,GAAOC,gBAAAC,KAAAJ,GAC1BI,KAAKC,WAAaH,EAClBE,KAAKE,mBAAoB,EACzBF,KAAKG,cACLH,KAAKH,QAAUA,EACfG,KAAKI,MAAQ,KACbJ,KAAKK,WAAaL,KAAKK,WAAWC,KAAKN,MAPrCJ,KAAAA,IAQSI,KAAKO,IAAID,KAAKN,MACzBA,KAAKQ,YAAc,+DAInB,IAAIC,EAAOT,KAXXS,EAAKR,WAALS,SAAA,SAAA,WACAR,mBAAA,EACAO,EAAKN,QAAAA,WAAL,cAGA,IAAAQ,EAAKN,IAALO,aAAuBP,CACvBQ,KAAA,CAAAC,EAAW,GAAKP,EAAID,IACpBS,OAAKP,CAAAA,EAAAA,GAAcQ,EAAA,KACpBC,SAAA,EAaGC,SAAU,KACVC,WAAYC,KAAKC,GAAK,MAJtBR,EAAAA,YAAM,IAAAS,eAPR,CACAb,YAAKR,8BACHC,YAAAA,GACAO,WAAKZ,CAAAA,GAAQ0B,GAAAA,GAAb,GAAwB,GAAA,GAAxB,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAIMZ,GAAEG,EAAAA,WAAFJ,SAAA,IAAAC,EAAAa,aAASR,EAAAA,WAAGN,SAAA,IAAAC,EAAAc,YAAZhB,EADsBR,WAAAS,SAAA,IAAAC,EAAAe,kDAEpBC,GAASX,QAACY,IAAE,iBAAZnB,KAFoBR,WAAA4B,OAAAF,kCAINA,GACtBR,KAAAA,YAAYC,OAAAO,oCAKZG,QAAAA,IAAAA,kBACAC,KAAAA,YAAaC,uCA4Bf,IAAIvB,EAAOT,KACXA,KAAKC,WAAWS,SAAS,UAAWD,EAAKD,YAAYyB,QACrDjC,KAAKC,WAAWS,SAAS,YArBdiB,EAAanB,YAAA0B,UACxBC,KAAAA,WAAYzB,SAAA,YAAZD,EAAAD,YAAA4B,UACA3B,KAAAA,WAAKR,SAAkB0B,aAAvBlB,EAAAD,YAAA6B,WAuBAlC,cAAgBmC,YAAYC,MAC5BvC,KAAKE,mBAAoB,EAV1BsC,sBAVC,SAAKhC,EAALiC,GAEDC,aAAAD,EAAAtC,eAsBG0B,OAAOY,EAAOtC,eACdA,cAAgBsC,EAChBT,SArBFG,mBACAK,sBAAAG","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.cancelNextRequest = false;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    let player = new MovingObject({\r\n      size: { x: 50, y: 50 }, // Size in pixels\r\n      center: { x: 50, y: 150 },\r\n      rotation: 0,\r\n      moveRate: 125 / 1000, // Pixels per second\r\n      rotateRate: Math.PI / 1000, // Radians per second\r\n    });\r\n\r\n    let playerSpecs = {\r\n      spriteSheet: \"assets/spritesheet-bird.png\",\r\n      spriteCount: 14,\r\n      spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    };\r\n\r\n    self.playerModel = new ModelAnimation(playerSpecs, player);\r\n    self.myKeyboard.register(\"w\", player.moveForward);\r\n    self.myKeyboard.register(\"a\", player.rotateLeft);\r\n    self.myKeyboard.register(\"d\", player.rotateRight);\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    console.log(\"input pressed\");\r\n    self.myKeyboard.update(elapsedTime);\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    this.playerModel.update(elapsedTime);\r\n    // model.update(elapsedTime);\r\n  }\r\n\r\n  render() {\r\n    console.log(\"i am rendering\");\r\n    this.playerModel.render();\r\n    //draw things\r\n    // graphics.clear();\r\n    // renderGame(model, graphics); // draw background, obstacles, scene and player here\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    this.myKeyboard.register(\"ArrowUp\", self.playerModel.turnUp);\r\n    this.myKeyboard.register(\"ArrowDown\", self.playerModel.turnDown);\r\n    this.myKeyboard.register(\"ArrowLeft\", self.playerModel.turnLeft);\r\n    this.myKeyboard.register(\"ArrowRight\", self.playerModel.turnRight);\r\n\r\n    lastTimeStamp = performance.now();\r\n    this.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      processInput(time - lastTimeStamp);\r\n      update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      render();\r\n      if (!cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}