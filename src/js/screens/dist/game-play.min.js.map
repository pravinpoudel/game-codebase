{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","lastTimeStamp","model","initialize","bind","run","self","wallModel","sound","tower","registerKey","register","GameState","showScreen","playerSpecs","spriteSheet","spriteCount","spriteTime","wallEvent","MovingEvents","size","x","y","rotateRate","Math","PI","continousSpeed","dir","Tower","baseSprite","weaponSprite","center","playerModel","gameModel","playerEvent","wallSpecs","enemycontroller","EnemyController","elapsedTime","update","start","localStorage","upgrade","moveForward","sell","rotateLeft","rotateRight","life","cancelNextRequest","isColliding","playSound","document","getElementById","innerHTML","context","clearRect","canvas","width","height","renderScore","render","player","moveTop","moveDown","moveLeft","moveRight","performance","now","requestAnimationFrame","processInput","time","gameLoop"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.sound = null;\r\n    this.tower = null;\r\n    this.registerKey = this.registerKey.bind(this);\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    // all the specs of the player sprite\r\n    let playerSpecs = {\r\n      spriteSheet: dir + \"assets/spritesheet-bird.png\",\r\n      spriteCount: 14,\r\n      spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    };\r\n\r\n    this.wallEvent = new MovingEvents({\r\n      size: { x: 50, y: 50 }, // Size in pixels\r\n      center: { x: 250, y: 250 },\r\n      rotation: 0,\r\n      moveRate: 125 / 1000, // Pixels per second\r\n      rotateRate: Math.PI / 1000, // Radians per second\r\n      continousSpeed: 1,\r\n    });\r\n\r\n    let wallSpecs = {\r\n      spriteSheet: dir + \"assets/spritesheet-bird.png\",\r\n      spriteCount: 14,\r\n      spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    };\r\n\r\n    this.tower = new Tower({\r\n      baseSprite: \"assets/turret-base.gif\",\r\n      weaponSprite: \"assets/turret-1-1.png\",\r\n      center: { x: 500, y: 500 },\r\n      target: { x: 300, y: 200 },\r\n      rotateRate: (6 * 3.14159) / 1000, // radians per second\r\n    });\r\n\r\n    //make a playerModel\r\n    self.playerModel = new gameModel(playerSpecs, this.playerEvent, true);\r\n    self.wallModel = new gameModel(wallSpecs, this.wallEvent, true);\r\n\r\n    //register that event to event handler\r\n    self.enemycontroller = new EnemyController(self.playerModel);\r\n    // self.enemycontroller.createEnemy({\r\n    //   size: { x: 50, y: 50 }, // Size in pixels\r\n    //   center: { x: 50, y: 150 },\r\n    //   rotation: 0,\r\n    //   moveRate: 125 / 1000,\r\n    //   rotateRate: Math.PI / 1000,\r\n    //   continousSpeed: 100,\r\n    //   image: GameState.assets[\"bird\"],\r\n    //   spriteSheet: dir + \"assets/spritesheet-bird.png\",\r\n    //   spriteCount: 14,\r\n    //   spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    // });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n    self.myKeyboard.cleanAll();\r\n    \r\n    self.myKeyboard.register(upgrade, self.playerEvent.moveForward);\r\n    self.myKeyboard.register(sell, self.playerEvent.rotateLeft);\r\n    self.myKeyboard.register(start, self.playerEvent.rotateRight);\r\n\r\n    // self.myKeyboard.register(\"3\", playerEvent.runRight);\r\n    // self.myKeyboard.register(\"1\", playerEvent.runLeft);\r\n    // self.myKeyboard.register(\"5\", playerEvent.runTop);\r\n    // self.myKeyboard.register(\"2\", playerEvent.runDown);\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      return;\r\n    }\r\n    this.playerModel.update(elapsedTime);\r\n    this.wallModel.update(elapsedTime);\r\n    this.tower.update(elapsedTime)\r\n    if(isColliding(this.playerModel, this.wallModel, 100)){\r\n      this.sound.playSound(\"end\");\r\n    }\r\n    // this.enemycontroller.update(elapsedTime);\r\n    // model.update(elapsedTime);\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    this.renderScore();\r\n    this.playerModel.render();\r\n    this.wallModel.render();\r\n    this.tower.render();\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    this.sound = new Sound();\r\n    this.sound.loadAudio();\r\n    this.registerKey();\r\n\r\n    this.myKeyboard.register(\"ArrowUp\", self.playerModel.player.moveTop);\r\n    this.myKeyboard.register(\"ArrowDown\", self.playerModel.player.moveDown);\r\n    this.myKeyboard.register(\"ArrowLeft\", self.playerModel.player.moveLeft);\r\n    this.myKeyboard.register(\"ArrowRight\", self.playerModel.player.moveRight);\r\n    // console.log(self.playerModel.moveRight);\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}