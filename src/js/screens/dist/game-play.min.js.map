{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","lastTimeStamp","model","initialize","bind","run","self","wallModel","sound","particlesSmoke","tower","registerKey","createEnemy","x","y","url","playerEvent","size","playerModel","rotation","moveRate","rotateRate","Math","PI","continousSpeed","playerSpecs","spriteSheet","dir","spriteCount","spriteTime","gameModel","center","register","showScreen","wallEvent","MovingEvents","wallSpecs","Tower","baseSprite","weaponSprite","GameState","cancelNextRequest","enemycontroller","EnemyController","update","elapsedTime","localStorage","cleanAll","life","isColliding","console","specs","setTarget","player","document","getElementById","innerHTML","score","context","clearRect","canvas","width","height","renderScore","render","Sound","moveTop","moveDown","moveLeft","moveRight","performance","now","requestAnimationFrame","gameLoop","time","processInput"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.tower = null;\r\n    this.registerKey = this.registerKey.bind(this);\r\n    this.createEnemy = this.createEnemy.bind(this);\r\n  }\r\n\r\n  createEnemy(x, y, url) {\r\n    //all the event to handle movement\r\n    let playerEvent = new MovingEvents({\r\n      size: { x: 50, y: 50 }, // Size in pixels\r\n      center: { x: x, y: y },\r\n      rotation: 0,\r\n      moveRate: 125 / 1000, // Pixels per second\r\n      rotateRate: Math.PI / 1000, // Radians per second\r\n      continousSpeed: 50,\r\n    });\r\n\r\n    let playerSpecs = {\r\n      spriteSheet: dir + url,\r\n      spriteCount: 14,\r\n      spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    };\r\n    //make a playerModel\r\n    let playerModel = new gameModel(playerSpecs, playerEvent, true);\r\n    return playerModel;\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    this.wallEvent = new MovingEvents({\r\n      size: { x: 50, y: 50 }, // Size in pixels\r\n      center: { x: 250, y: 250 },\r\n      rotation: 0,\r\n      moveRate: 125 / 1000, // Pixels per second\r\n      rotateRate: Math.PI / 1000, // Radians per second\r\n      continousSpeed: 1,\r\n    });\r\n\r\n    let wallSpecs = {\r\n      spriteSheet: dir + \"assets/spritesheet-bird.png\",\r\n      spriteCount: 14,\r\n      spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    };\r\n\r\n    this.tower = new Tower({\r\n      baseSprite: \"assets/turret-base.gif\",\r\n      weaponSprite: \"assets/turret-1-1.png\",\r\n      center: { x: 300, y: 400 },\r\n      target: { x: 300, y: 100 },\r\n      rotateRate: (6 * 3.14159) / 1000, // radians per second\r\n    });\r\n\r\n    self.wallModel = new gameModel(wallSpecs, this.wallEvent, true);\r\n\r\n    this.playerModel = this.createEnemy(\r\n      100,\r\n      100,\r\n      \"assets/spritesheet-bird.png\"\r\n    );\r\n    //register that event to event handler\r\n    self.enemycontroller = new EnemyController(self.playerModel);\r\n    // self.enemycontroller.createEnemy({\r\n    //   size: { x: 50, y: 50 }, // Size in pixels\r\n    //   center: { x: 50, y: 150 },\r\n    //   rotation: 0,\r\n    //   moveRate: 125 / 1000,\r\n    //   rotateRate: Math.PI / 1000,\r\n    //   continousSpeed: 100,\r\n    //   image: GameState.assets[\"bird\"],\r\n    //   spriteSheet: dir + \"assets/spritesheet-bird.png\",\r\n    //   spriteCount: 14,\r\n    //   spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    // });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n    self.myKeyboard.cleanAll();\r\n\r\n    // self.myKeyboard.register(upgrade, self.playerEvent.moveForward);\r\n    // self.myKeyboard.register(sell, self.playerEvent.rotateLeft);\r\n    // self.myKeyboard.register(start, self.playerEvent.rotateRight);\r\n\r\n    // self.myKeyboard.register(\"3\", playerEvent.runRight);\r\n    // self.myKeyboard.register(\"1\", playerEvent.runLeft);\r\n    // self.myKeyboard.register(\"5\", playerEvent.runTop);\r\n    // self.myKeyboard.register(\"2\", playerEvent.runDown);\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n    this.playerModel.update(elapsedTime);\r\n    this.wallModel.update(elapsedTime);\r\n    this.tower.update(elapsedTime);\r\n    if (isColliding(this.playerModel, this.tower, 500)) {\r\n      console.log(this.playerModel.player.specs.center.x);\r\n      this.tower.setTarget(\r\n        this.playerModel.player.specs.center.x,\r\n        this.playerModel.player.specs.center.y\r\n      );\r\n    }\r\n    // this.enemycontroller.update(elapsedTime);\r\n    // model.update(elapsedTime);\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    this.renderScore();\r\n    this.playerModel.render();\r\n    this.wallModel.render();\r\n    this.tower.render();\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    this.sound = new Sound();\r\n    this.sound.loadAudio();\r\n    this.registerKey();\r\n\r\n    this.myKeyboard.register(\"ArrowUp\", self.playerModel.player.moveTop);\r\n    this.myKeyboard.register(\"ArrowDown\", self.playerModel.player.moveDown);\r\n    this.myKeyboard.register(\"ArrowLeft\", self.playerModel.player.moveLeft);\r\n    this.myKeyboard.register(\"ArrowRight\", self.playerModel.player.moveRight);\r\n    // console.log(self.playerModel.moveRight);\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}