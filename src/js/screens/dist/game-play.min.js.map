{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","myMouse","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","renderCircle","sound","particlesSmoke","registerKey","Image","render","downHandler","EnemyCreator","creepGoing","upgrade","creeps","sell","flyingScores","moneyRequired","floor","towerClicked","specs","cost","money","undefined","firstTime","totalElapsedTime","canPlace","elapsedTime","log","upgradeCount","delay","Math","power","gameSound","playSound","towerLength","towers","length","i","cellWidth","y","center","x","splice","getAttribute","mouse","isActive","e","selectedTower","parseInt","towerTypeSelected","canCreated","push","GameState","assets","console","decision","createTower","canvas","getBoundingClientRect","clientX","canvasPosition","left","clientY","top","findSelectedTower","towerElements","style","display","myId","document","getElementById","Mouse","stopAllSound","cancelNextRequest","showScreen","rows","row","j","cols","getElementsByClassName","addEventListener","createElement","towerElements2","bulletController","BulletController","register","update","localStorage","creepsLength","creep","player","reachRight","reachBottom","life","health","score","maxHealth","textEvent","moveRate","rotateRate","xDirection","towersLength","MovingEvents","size","flying","tower","type","setTarget","yDirection","canShoot","target","FlyingScore","direction","normalize","bulletStartX","addBullet","scorelength","bulletStartY","isVisible","newEnemy","enemyCreator","createEnemy","innerHTML","wave","width","height","context","wavesDeno","wavesNeno","placementFlag","clearRect","fillStyle","fillRect","leftOffset","x1","topOffset","y1","beginPath","rect","cellSet","stroke","lineTo","drawTower","renderScore","forEach","moveTo","drawRectangle","fill","Sound","performance","now","requestAnimationFrame","time","processInput","gameLoop"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.myMouse = null;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.renderCircle = false;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.creeps = [];\r\n    this.towers = [];\r\n    this.registerKey = this.registerKey.bind(this);\r\n    this.flyingScores = [];\r\n    this.tower1 = new Image();\r\n    this.tower1.src = \"assets/turret/turret-5-3.png\";\r\n    this.render = this.render.bind(this);\r\n    this.firstTime = true;\r\n    this.downHandler = this.downHandler.bind(this);\r\n    this.enemyCreator = new EnemyCreator(10, creepGoing, 3);\r\n    this.canPlace = false;\r\n    this.upgrade = this.upgrade.bind(this);\r\n    this.sell = this.sell.bind(this);\r\n  }\r\n\r\n  upgrade(elapsedTime) {\r\n    let moneyRequired = Math.floor(0.5 * towerClicked.specs.cost);\r\n    if (moneyRequired <= money) {\r\n      if (towerClicked) {\r\n        if (towerClicked.totalElapsedTime == undefined) {\r\n          towerClicked.totalElapsedTime = 0;\r\n        } else {\r\n          towerClicked.totalElapsedTime += elapsedTime;\r\n          if (towerClicked.totalElapsedTime >= 200) {\r\n            console.log(\"upgraded\");\r\n            towerClicked.totalElapsedTime -= 200;\r\n            if (!towerClicked.upgradeCount) {\r\n              towerClicked.upgradeCount = 1;\r\n            } else {\r\n              if (towerClicked.upgradeCount >= 3) {\r\n                return;\r\n              } else {\r\n                towerClicked.upgradeCount = towerClicked.upgradeCount + 1;\r\n                towerClicked.delay = Math.floor(towerClicked.delay * 0.7);\r\n                towerClicked.specs.power = towerClicked.specs.power + 1;\r\n                money -= moneyRequired;\r\n                gameSound.playSound(\"add\");\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  sell() {\r\n    if (towerClicked) {\r\n      let towerLength = this.towers.length;\r\n      for (let i = 0; i < towerLength; i++) {\r\n        if (\r\n          isColliding2(\r\n            this.towers[i].specs.center.x - cellWidth / 2,\r\n            this.towers[i].specs.center.y - cellWidth / 2,\r\n            cellWidth,\r\n            towerClicked.specs.center.x - cellWidth / 2,\r\n            towerClicked.specs.center.y - cellWidth / 2,\r\n            cellWidth\r\n          )\r\n        ) {\r\n          money += Math.floor(0.7 * towerClicked.specs.cost);\r\n          this.towers.splice(i, 1);\r\n          gameSound.playSound(\"die\");\r\n          towerClicked = null;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createElement() {\r\n    selectedTower = this.getAttribute(\"data-myName\");\r\n    moneyRequired = parseInt(this.getAttribute(\"data-cost\"));\r\n    towerTypeSelected = parseInt(this.getAttribute(\"data-type\"));\r\n    if (moneyRequired <= money) {\r\n      renderCircle = true;\r\n      mouse.isActive = true;\r\n    }\r\n  }\r\n\r\n  downHandler(e, elapsedTime) {\r\n    if (mouse.isActive) {\r\n      firstTime = true;\r\n      mouse.isActive = false;\r\n      renderCircle = false;\r\n      let decision = canCreated(this.towers) && this.canPlace;\r\n      if (decision) {\r\n        this.towers.push(\r\n          createTower(\r\n            GameState.assets[selectedTower],\r\n            Math.floor(mouse.x / cellWidth) * cellWidth,\r\n            Math.floor((mouse.y - 200) / cellWidth) * cellWidth + 200,\r\n            2500,\r\n            1,\r\n            moneyRequired,\r\n            towerTypeSelected\r\n          )\r\n        );\r\n        console.log(this.towers)\r\n        money = money - moneyRequired;\r\n        moneyRequired = 0;\r\n        towerTypeSelected = 0;\r\n        gameSound.playSound(\"add\");\r\n      }\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n    } else {\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n      mouse.x = e.clientX - canvasPosition.left;\r\n      mouse.y = e.clientY - canvasPosition.top;\r\n      findSelectedTower(this.towers);\r\n    }\r\n  }\r\n\r\n  muteVolume(e) {\r\n    var towerElements = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].style.display = \"block\";\r\n    }\r\n    let myId = this.getAttribute(\"data-myId\");\r\n    document.getElementById(myId).style.display = \"none\";\r\n    if(myId == \"muteButton\"){\r\n      gameSound.stopAllSound();\r\n    }\r\n    if(myId == \"unmuteButton\"){\r\n      gameSound.unMuteSound();\r\n    }\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    this.myMouse = new Mouse();\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push({\r\n          x: i,\r\n          y: j,\r\n        });\r\n      }\r\n      cellSet.push(row);\r\n    }\r\n\r\n    var towerElements = document.getElementsByClassName(\"tower\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].addEventListener(\"click\", this.createElement, false);\r\n    }\r\n\r\n    var towerElements2 = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements2.length; i++) {\r\n      towerElements2[i].addEventListener(\"click\", this.muteVolume, false);\r\n    }\r\n\r\n    this.bulletController = new BulletController(this.creeps);\r\n\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-5-3.png\", 300, 500, 1000, 1)\r\n    // );\r\n    // this.towers.push(\r\n    //   createTower(\"assets/turret/turret-3-3.png\", 600, 500, 2000, 2)\r\n    // );\r\n\r\n    this.myMouse.register(\"mousedown\", this.downHandler);\r\n\r\n    // this.myMouse.register('mouseup', function(e, elapsedTime) {\r\n    //   mouse.isActive = false;\r\n    // });\r\n\r\n    this.myMouse.register(\"mousemove\", function (e, elapsedTime) {\r\n      if (mouse.isActive) {\r\n        const canvasPosition = canvas.getBoundingClientRect();\r\n        mouse.x = e.clientX - canvasPosition.left;\r\n        mouse.y = e.clientY - canvasPosition.top;\r\n        if (mouse.y < 200) {\r\n          mouse.y = 200;\r\n        }\r\n        this.renderCircle = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n    this.myMouse.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    console.log(upgrade);\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n\r\n    self.myKeyboard.register(upgrade, function (elapsedTime) {\r\n      self.upgrade(elapsedTime);\r\n    });\r\n\r\n    self.myKeyboard.register(sell, function (elapsedTime) {\r\n      self.sell(elapsedTime);\r\n    });\r\n\r\n    // self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      // this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n    let creepsLength = this.creeps.length;\r\n    for (let i = 0; i < creepsLength; i++) {\r\n      let creep = this.creeps[i];\r\n      if (creep) {\r\n        if (creep.player.reachRight() || creep.player.reachBottom()) {\r\n          this.creeps.splice(i, 1);\r\n          GameState.life--;\r\n          console.log(GameState.life);\r\n          continue;\r\n        }\r\n        if (creep.health == 0) {\r\n          let x = creep.player.specs.center.x;\r\n          let y = creep.player.specs.center.y;\r\n          score += creep.maxHealth;\r\n          this.creeps.splice(i, 1);\r\n          gameSound.playSound(\"die\");\r\n          let textEvent = new MovingEvents({\r\n            size: { x: 50, y: 50 }, // Size in pixels\r\n            center: { x: x, y: y },\r\n            rotation: 0,\r\n            moveRate: 125 / 1000, // Pixels per second\r\n            rotateRate: Math.PI / 1000, // Radians per second\r\n            continousSpeed: 50,\r\n            yDirection: -1,\r\n            xDirection: 0,\r\n          });\r\n          this.flyingScores.push(\r\n            new FlyingScore(creep.maxHealth, textEvent, true)\r\n          );\r\n          continue;\r\n        }\r\n        creep.update(elapsedTime);\r\n        let towersLength = this.towers.length;\r\n        for (let i = 0; i < towersLength; i++) {\r\n          let tower = this.towers[i];\r\n          if((typeof creep.flying ==  \"undefined\") && tower.specs.type == 3){\r\n            console.log(\"flying\" + \" \" + i);\r\n          }\r\n\r\n          else if((typeof creep.flying !=  \"undefined\") && tower.specs.type < 3){\r\n            console.log(\"flying\" + \" \" + i);\r\n          }\r\n\r\n          else{\r\n            if (isColliding(creep, tower, 100)) {\r\n              tower.setTarget(\r\n                creep.player.specs.center.x,\r\n                creep.player.specs.center.y\r\n              );\r\n              if (tower.canShoot) {\r\n                let direction = {\r\n                  x: tower.specs.target.x - tower.specs.center.x,\r\n                  y: tower.specs.target.y - tower.specs.center.y,\r\n                };\r\n                direction = normalize(direction);\r\n                let bulletStartX = tower.specs.center.x;\r\n                let bulletStartY = tower.specs.center.y;\r\n\r\n                this.bulletController.addBullet(\r\n                  bulletStartX,\r\n                  bulletStartY,\r\n                  creep,\r\n                  tower.specs.power,\r\n                  tower.specs.type\r\n                );\r\n                gameSound.playSound(\"shoot\");\r\n              }\r\n            }\r\n          }\r\n         \r\n\r\n          tower.update(elapsedTime);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.bulletController.update(elapsedTime);\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].update(elapsedTime);\r\n      if (!this.flyingScores[i].isVisible) {\r\n        this.flyingScores.splice(i, 1);\r\n        i--;\r\n        scorelength--;\r\n      }\r\n    }\r\n    let newEnemy = this.enemyCreator.createEnemy(elapsedTime);\r\n    if (newEnemy) {\r\n      this.creeps.push(newEnemy);\r\n    }\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n    document.getElementById(\"money\").innerHTML = money;\r\n    let wave = wavesDeno + \"/\" + wavesNeno;\r\n    document.getElementById(\"wave\").innerHTML = wave;\r\n    if (moneyRequired > 0) {\r\n      document.getElementById(\"selectedInfo\").style.display = \"block\";\r\n      document.getElementById(\"moneyRequired\").innerHTML = moneyRequired;\r\n      document.getElementById(\"power\").innerHTML = towerTypeSelected;\r\n    }\r\n    else{\r\n      document.getElementById(\"selectedInfo\").style.display = \"none\";\r\n      document.getElementById(\"money\").innerHTML = \"\";\r\n      document.getElementById(\"power\").innerHTML = \"\";   \r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    context.fillStyle = \"green\";\r\n    context.fillRect(0, 0 + 200, 600, 800);\r\n    context.clearRect(50, 250, 500, 500);\r\n\r\n    if (creepGoing == \"left\") {\r\n      context.clearRect(0, 400, 50, 200);\r\n      context.clearRect(550, 400, 50, 200);\r\n    }\r\n\r\n    if(creepGoing == \"top\"){\r\n      context.clearRect(175, 200, 225, 50);\r\n      context.clearRect(175, 750, 225, 50);\r\n    }\r\n\r\n    if (mouse.isActive) {\r\n      let placementFlag = false;\r\n      for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n          let x1 = cellSet[i][j].x;\r\n          let y1 = cellSet[i][j].y;\r\n          if (\r\n            Math.floor((mouse.x - leftOffset) / cellWidth) == x1 &&\r\n            Math.floor((mouse.y - topOffset) / cellWidth) == y1\r\n          ) {\r\n            this.canPlace = true;\r\n            placementFlag = true;\r\n            context.beginPath();\r\n            context.rect(\r\n              x1 * cellWidth + leftOffset,\r\n              y1 * cellWidth + topOffset,\r\n              cellWidth,\r\n              cellWidth\r\n            );\r\n            context.stroke();\r\n          }\r\n        }\r\n      }\r\n      if (!placementFlag) {\r\n        this.canPlace = false;\r\n      }\r\n    }\r\n\r\n    // ctx.strokeRect(50, 50, 50, 50);\r\n\r\n    context.beginPath();\r\n    context.moveTo(0, 200);\r\n    context.lineTo(canvas.width, 200);\r\n    context.stroke();\r\n    if (renderCircle) {\r\n      drawTower(100);\r\n    }\r\n    this.renderScore();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    let towersLength = this.towers.length;\r\n    for (let i = 0; i < towersLength; i++) {\r\n      let tower = this.towers[i];\r\n      tower.render();\r\n    }\r\n    if (towerClicked) {\r\n      drawRectangle({\r\n        x: towerClicked.specs.center.x - cellWidth / 2,\r\n        y: towerClicked.specs.center.y - cellWidth / 2,\r\n        width: 50,\r\n        height: 50,\r\n        fill: \"#ffd63f9e\",\r\n        stroke: \"red\",\r\n      });\r\n    }\r\n\r\n    this.bulletController.render();\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].render();\r\n    }\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    gameSound = new Sound();\r\n    gameSound.loadAudio();\r\n    // this.sound.playSound(\"end\");\r\n    this.registerKey();\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}