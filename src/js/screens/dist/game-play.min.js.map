{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","myMouse","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","renderCircle","sound","particlesSmoke","makeCreateCreep1","makeCreateCreep2","makeCreateCreep3","registerKey","Image","render","creeps","myTower","selectedTower","console","mouse","downHandler","e","isActive","firstTime","log","push","createTower","x","y","towers","length","canvas","getBoundingClientRect","document","getElementsByClassName","i","towerElements","myId","canvasPosition","getElementById","style","display","Mouse","register","GameState","showScreen","getAttribute","createElement","towerElements2","addEventListener","muteVolume","BulletController","elapsedTime","bulletController","left","top","update","localStorage","cleanAll","life","cancelNextRequest","creepsLength","sell","start","creep","reachRight","splice","player","specs","center","score","maxHealth","textEvent","MovingEvents","size","rotation","rotateRate","continousSpeed","flyingScores","FlyingScore","towersLength","tower","setTarget","canShoot","direction","target","normalize","bulletStartY","yDirection","addBullet","xDirection","power","isColliding","scorelength","isVisible","innerHTML","money","wave","wavesDeno","wavesNeno","context","height","beginPath","moveTo","lineTo","stroke","drawTower","forEach","Sound","performance","now","requestAnimationFrame","renderScore","time"],"mappings":"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","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.myMouse = null;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.renderCircle = false;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.creeps = [\r\n      makeCreateCreep1(520, 300),\r\n      makeCreateCreep2(700, 300),\r\n      makeCreateCreep3(800, 300),\r\n    ];\r\n    this.towers = [];\r\n    this.registerKey = this.registerKey.bind(this);\r\n    this.flyingScores = [];\r\n    this.tower1 = new Image();\r\n    this.tower1.src = \"assets/turret/turret-5-3.png\";\r\n    this.render = this.render.bind(this);\r\n    this.firstTime = true;\r\n    this.downHandler = this.downHandler.bind(this);\r\n  }\r\n\r\n  createElement() {\r\n    let myTower = this.getAttribute(\"data-myName\");\r\n    selectedTower = \"assets/turret/\" + myTower;\r\n    console.log(selectedTower);\r\n    renderCircle = true;\r\n    mouse.isActive = true;\r\n  }\r\n\r\n  downHandler(e, elapsedTime) {\r\n    if (mouse.isActive) {\r\n      firstTime = true;\r\n      mouse.isActive = false;\r\n      renderCircle = false;\r\n      console.log(selectedTower);\r\n      this.towers.push(createTower(selectedTower, mouse.x, mouse.y, 1000, 1));\r\n      console.log(this.towers.length);\r\n      const canvasPosition = canvas.getBoundingClientRect();\r\n      mouse.x = e.x;\r\n      mouse.y = e.y;\r\n    }\r\n  }\r\n\r\n  muteVolume(e) {\r\n    var towerElements = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].style.display = \"block\";\r\n    }\r\n    let myId = this.getAttribute(\"data-myId\");\r\n    document.getElementById(myId).style.display = \"none\";\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    this.myMouse = new Mouse();\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    var towerElements = document.getElementsByClassName(\"tower\");\r\n    for (var i = 0; i < towerElements.length; i++) {\r\n      towerElements[i].addEventListener(\"click\", this.createElement, false);\r\n    }\r\n\r\n    var towerElements2 = document.getElementsByClassName(\"volumeButton\");\r\n    for (var i = 0; i < towerElements2.length; i++) {\r\n      towerElements2[i].addEventListener(\"click\", this.muteVolume, false);\r\n    }\r\n\r\n    this.bulletController = new BulletController();\r\n\r\n    this.towers.push(\r\n      createTower(\"assets/turret/turret-5-3.png\", 300, 500, 1000, 1)\r\n    );\r\n    this.towers.push(\r\n      createTower(\"assets/turret/turret-3-3.png\", 600, 500, 2000, 2)\r\n    );\r\n\r\n    this.myMouse.register(\"mousedown\", this.downHandler);\r\n\r\n    // this.myMouse.register('mouseup', function(e, elapsedTime) {\r\n    //   mouse.isActive = false;\r\n    // });\r\n\r\n    this.myMouse.register(\"mousemove\", function (e, elapsedTime) {\r\n      if (mouse.isActive) {\r\n        const canvasPosition = canvas.getBoundingClientRect();\r\n        mouse.x = e.clientX - canvasPosition.left;\r\n        mouse.y = e.clientY - canvasPosition.top;\r\n        if (mouse.y < 200) {\r\n          mouse.y = 200;\r\n        }\r\n        this.renderCircle = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n    this.myMouse.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n    self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n    let creepsLength = this.creeps.length;\r\n    for (let i = 0; i < creepsLength; i++) {\r\n      let creep = this.creeps[i];\r\n      if (creep) {\r\n        if (creep.reachRight()) {\r\n          this.creeps.splice(i, 1);\r\n          GameState.life--;\r\n          console.log(GameState.life);\r\n          continue;\r\n        }\r\n        if (creep.health == 0) {\r\n          let x = creep.player.specs.center.x;\r\n          let y = creep.player.specs.center.y;\r\n          score += creep.maxHealth;\r\n          this.creeps.splice(i, 1);\r\n          let textEvent = new MovingEvents({\r\n            size: { x: 50, y: 50 }, // Size in pixels\r\n            center: { x: x, y: y },\r\n            rotation: 0,\r\n            moveRate: 125 / 1000, // Pixels per second\r\n            rotateRate: Math.PI / 1000, // Radians per second\r\n            continousSpeed: 50,\r\n            yDirection: -1,\r\n            xDirection: 0,\r\n          });\r\n          this.flyingScores.push(\r\n            new FlyingScore(creep.maxHealth, textEvent, true)\r\n          );\r\n          continue;\r\n        }\r\n        creep.update(elapsedTime);\r\n        let towersLength = this.towers.length;\r\n        for (let i = 0; i < towersLength; i++) {\r\n          let tower = this.towers[i];\r\n          if (isColliding(creep, tower, 200)) {\r\n            tower.setTarget(\r\n              creep.player.specs.center.x,\r\n              creep.player.specs.center.y\r\n            );\r\n            if (tower.canShoot) {\r\n              let direction = {\r\n                x: tower.specs.target.x - tower.specs.center.x,\r\n                y: tower.specs.target.y - tower.specs.center.y,\r\n              };\r\n              direction = normalize(direction);\r\n              let bulletStartX = tower.specs.center.x;\r\n              let bulletStartY = tower.specs.center.y;\r\n\r\n              this.bulletController.addBullet(\r\n                bulletStartX,\r\n                bulletStartY,\r\n                creep,\r\n                tower.specs.power\r\n              );\r\n            }\r\n          }\r\n          tower.update(elapsedTime);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.bulletController.update(elapsedTime);\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].update(elapsedTime);\r\n      if (!this.flyingScores[i].isVisible) {\r\n        this.flyingScores.splice(i, 1);\r\n        i--;\r\n        scorelength--;\r\n      }\r\n    }\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n    document.getElementById(\"money\").innerHTML = money;\r\n    let wave = wavesDeno + \"/\" + wavesNeno;\r\n    document.getElementById(\"wave\").innerHTML = wave;\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    context.beginPath();\r\n    context.moveTo(0, 200);\r\n    context.lineTo(canvas.width, 200);\r\n    context.stroke();\r\n    if (renderCircle) {\r\n      drawTower(50);\r\n    }\r\n    this.renderScore();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    let towersLength = this.towers.length;\r\n    for (let i = 0; i < towersLength; i++) {\r\n      let tower = this.towers[i];\r\n      tower.render();\r\n    }\r\n    this.bulletController.render();\r\n    let scorelength = this.flyingScores.length;\r\n    for (let i = 0; i < scorelength; i++) {\r\n      this.flyingScores[i].render();\r\n    }\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    this.sound = new Sound();\r\n    this.sound.loadAudio();\r\n    // this.sound.playSound(\"end\");\r\n    this.registerKey();\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}