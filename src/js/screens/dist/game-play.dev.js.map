{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","myKeyboard","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","sound","particlesSmoke","tower","registerKey","createEnemy","x","y","url","playerEvent","MovingEvents","size","center","rotation","moveRate","rotateRate","Math","PI","continousSpeed","playerSpecs","spriteSheet","dir","spriteCount","spriteTime","gameModel","register","GameState","cancelNextRequest","showScreen","wallEvent","wallSpecs","Tower","baseSprite","weaponSprite","target","enemycontroller","EnemyController","elapsedTime","update","upgrade","localStorage","sell","start","cleanAll","life","isColliding","setTarget","player","specs","document","getElementById","innerHTML","score","context","clearRect","canvas","width","height","renderScore","render","Sound","loadAudio","moveTop","moveDown","moveLeft","moveRight","performance","now","gameLoop","time","processInput","requestAnimationFrame"],"mappings":"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","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.tower = null;\r\n    this.registerKey = this.registerKey.bind(this);\r\n    this.createEnemy = this.createEnemy.bind(this);\r\n  }\r\n\r\n  createEnemy(x, y, url) {\r\n    //all the event to handle movement\r\n    let playerEvent = new MovingEvents({\r\n      size: { x: 50, y: 50 }, // Size in pixels\r\n      center: { x: x, y: y },\r\n      rotation: 0,\r\n      moveRate: 125 / 1000, // Pixels per second\r\n      rotateRate: Math.PI / 1000, // Radians per second\r\n      continousSpeed: 50,\r\n    });\r\n\r\n    let playerSpecs = {\r\n      spriteSheet: dir + url,\r\n      spriteCount: 14,\r\n      spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    };\r\n    //make a playerModel\r\n    let playerModel = new gameModel(playerSpecs, playerEvent, true);\r\n    return playerModel;\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    this.wallEvent = new MovingEvents({\r\n      size: { x: 50, y: 50 }, // Size in pixels\r\n      center: { x: 250, y: 250 },\r\n      rotation: 0,\r\n      moveRate: 125 / 1000, // Pixels per second\r\n      rotateRate: Math.PI / 1000, // Radians per second\r\n      continousSpeed: 1,\r\n    });\r\n\r\n    let wallSpecs = {\r\n      spriteSheet: dir + \"assets/spritesheet-bird.png\",\r\n      spriteCount: 14,\r\n      spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    };\r\n\r\n    this.tower = new Tower({\r\n      baseSprite: \"assets/turret-base.gif\",\r\n      weaponSprite: \"assets/turret-1-1.png\",\r\n      center: { x: 200, y: 400 },\r\n      target: { x: 300, y: 100 },\r\n      rotateRate: (6 * 3.14159) / 1000, // radians per second\r\n    });\r\n\r\n    self.wallModel = new gameModel(wallSpecs, this.wallEvent, true);\r\n\r\n    this.playerModel = this.createEnemy(\r\n      100,\r\n      100,\r\n      \"assets/spritesheet-bird.png\"\r\n    );\r\n    //register that event to event handler\r\n    self.enemycontroller = new EnemyController(self.playerModel);\r\n    // self.enemycontroller.createEnemy({\r\n    //   size: { x: 50, y: 50 }, // Size in pixels\r\n    //   center: { x: 50, y: 150 },\r\n    //   rotation: 0,\r\n    //   moveRate: 125 / 1000,\r\n    //   rotateRate: Math.PI / 1000,\r\n    //   continousSpeed: 100,\r\n    //   image: GameState.assets[\"bird\"],\r\n    //   spriteSheet: dir + \"assets/spritesheet-bird.png\",\r\n    //   spriteCount: 14,\r\n    //   spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    // });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n    self.myKeyboard.cleanAll();\r\n\r\n    // self.myKeyboard.register(upgrade, self.playerEvent.moveForward);\r\n    // self.myKeyboard.register(sell, self.playerEvent.rotateLeft);\r\n    // self.myKeyboard.register(start, self.playerEvent.rotateRight);\r\n\r\n    // self.myKeyboard.register(\"3\", playerEvent.runRight);\r\n    // self.myKeyboard.register(\"1\", playerEvent.runLeft);\r\n    // self.myKeyboard.register(\"5\", playerEvent.runTop);\r\n    // self.myKeyboard.register(\"2\", playerEvent.runDown);\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n    this.playerModel.update(elapsedTime);\r\n    this.wallModel.update(elapsedTime);\r\n    this.tower.update(elapsedTime);\r\n    if (isColliding(this.playerModel, this.tower, 200)) {\r\n      this.tower.setTarget(\r\n        this.playerModel.player.specs.center.x,\r\n        this.playerModel.player.specs.center.y\r\n      );\r\n    }\r\n    // this.enemycontroller.update(elapsedTime);\r\n    // model.update(elapsedTime);\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    this.renderScore();\r\n    this.playerModel.render();\r\n    this.wallModel.render();\r\n    this.tower.render();\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    this.sound = new Sound();\r\n    this.sound.loadAudio();\r\n    this.registerKey();\r\n\r\n    this.myKeyboard.register(\"ArrowUp\", self.playerModel.player.moveTop);\r\n    this.myKeyboard.register(\"ArrowDown\", self.playerModel.player.moveDown);\r\n    this.myKeyboard.register(\"ArrowLeft\", self.playerModel.player.moveLeft);\r\n    this.myKeyboard.register(\"ArrowRight\", self.playerModel.player.moveRight);\r\n    // console.log(self.playerModel.moveRight);\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"],"file":"game-play.dev.js"}