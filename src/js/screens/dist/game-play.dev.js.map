{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","myKeyboard","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","sound","tower","registerKey","register","GameState","cancelNextRequest","showScreen","playerSpecs","spriteSheet","dir","spriteCount","spriteTime","wallEvent","MovingEvents","size","x","y","center","rotation","moveRate","rotateRate","Math","PI","continousSpeed","wallSpecs","Tower","baseSprite","weaponSprite","target","gameModel","playerEvent","enemycontroller","EnemyController","elapsedTime","update","upgrade","localStorage","sell","start","cleanAll","moveForward","rotateLeft","rotateRight","life","isColliding","playSound","document","getElementById","innerHTML","score","context","clearRect","canvas","width","height","renderScore","render","Sound","loadAudio","player","moveTop","moveDown","moveLeft","moveRight","performance","now","gameLoop","time","processInput","requestAnimationFrame"],"mappings":"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","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.sound = null;\r\n    this.tower = null;\r\n    this.registerKey = this.registerKey.bind(this);\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    // all the specs of the player sprite\r\n    let playerSpecs = {\r\n      spriteSheet: dir + \"assets/spritesheet-bird.png\",\r\n      spriteCount: 14,\r\n      spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    };\r\n\r\n    this.wallEvent = new MovingEvents({\r\n      size: { x: 50, y: 50 }, // Size in pixels\r\n      center: { x: 250, y: 250 },\r\n      rotation: 0,\r\n      moveRate: 125 / 1000, // Pixels per second\r\n      rotateRate: Math.PI / 1000, // Radians per second\r\n      continousSpeed: 1,\r\n    });\r\n\r\n    let wallSpecs = {\r\n      spriteSheet: dir + \"assets/spritesheet-bird.png\",\r\n      spriteCount: 14,\r\n      spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    };\r\n\r\n    this.tower = new Tower({\r\n      baseSprite: \"assets/turret-base.gif\",\r\n      weaponSprite: \"assets/turret-1-1.png\",\r\n      center: { x: 500, y: 500 },\r\n      target: { x: 300, y: 200 },\r\n      rotateRate: (6 * 3.14159) / 1000, // radians per second\r\n    });\r\n\r\n    //make a playerModel\r\n    self.playerModel = new gameModel(playerSpecs, this.playerEvent, true);\r\n    self.wallModel = new gameModel(wallSpecs, this.wallEvent, true);\r\n\r\n    //register that event to event handler\r\n    self.enemycontroller = new EnemyController(self.playerModel);\r\n    // self.enemycontroller.createEnemy({\r\n    //   size: { x: 50, y: 50 }, // Size in pixels\r\n    //   center: { x: 50, y: 150 },\r\n    //   rotation: 0,\r\n    //   moveRate: 125 / 1000,\r\n    //   rotateRate: Math.PI / 1000,\r\n    //   continousSpeed: 100,\r\n    //   image: GameState.assets[\"bird\"],\r\n    //   spriteSheet: dir + \"assets/spritesheet-bird.png\",\r\n    //   spriteCount: 14,\r\n    //   spriteTime: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\r\n    // });\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n    self.myKeyboard.cleanAll();\r\n    \r\n    self.myKeyboard.register(upgrade, self.playerEvent.moveForward);\r\n    self.myKeyboard.register(sell, self.playerEvent.rotateLeft);\r\n    self.myKeyboard.register(start, self.playerEvent.rotateRight);\r\n\r\n    // self.myKeyboard.register(\"3\", playerEvent.runRight);\r\n    // self.myKeyboard.register(\"1\", playerEvent.runLeft);\r\n    // self.myKeyboard.register(\"5\", playerEvent.runTop);\r\n    // self.myKeyboard.register(\"2\", playerEvent.runDown);\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      return;\r\n    }\r\n    this.playerModel.update(elapsedTime);\r\n    this.wallModel.update(elapsedTime);\r\n    this.tower.update(elapsedTime)\r\n    if(isColliding(this.playerModel, this.wallModel, 100)){\r\n      this.sound.playSound(\"end\");\r\n    }\r\n    // this.enemycontroller.update(elapsedTime);\r\n    // model.update(elapsedTime);\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    this.renderScore();\r\n    this.playerModel.render();\r\n    this.wallModel.render();\r\n    this.tower.render();\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    this.sound = new Sound();\r\n    this.sound.loadAudio();\r\n    this.registerKey();\r\n\r\n    this.myKeyboard.register(\"ArrowUp\", self.playerModel.player.moveTop);\r\n    this.myKeyboard.register(\"ArrowDown\", self.playerModel.player.moveDown);\r\n    this.myKeyboard.register(\"ArrowLeft\", self.playerModel.player.moveLeft);\r\n    this.myKeyboard.register(\"ArrowRight\", self.playerModel.player.moveRight);\r\n    // console.log(self.playerModel.moveRight);\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"],"file":"game-play.dev.js"}