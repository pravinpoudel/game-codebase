{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","myKeyboard","lastTimeStamp","model","initialize","bind","run","playerModel","self","wallModel","sound","particlesSmoke","tower","creeps","makeCreateCreep1","makeCreateCreep2","makeCreateCreep3","registerKey","register","GameState","cancelNextRequest","showScreen","Tower","baseSprite","weaponSprite","center","x","y","target","rotateRate","elapsedTime","update","upgrade","localStorage","sell","start","cleanAll","life","forEach","creep","isColliding","setTarget","player","specs","document","getElementById","innerHTML","score","context","clearRect","canvas","width","height","renderScore","render","Sound","loadAudio","performance","now","gameLoop","time","processInput","requestAnimationFrame"],"mappings":"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","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.model = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.playerModel = null;\r\n    self.wallModel = null;\r\n    this.sound = null;\r\n    this.particlesSmoke = null;\r\n    this.tower = null;\r\n    this.creeps = [\r\n      makeCreateCreep1(20, 300),\r\n      makeCreateCreep2(100, 300),\r\n      makeCreateCreep3(300, 300),\r\n    ];\r\n    this.registerKey = this.registerKey.bind(this);\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n\r\n    this.tower = new Tower({\r\n      baseSprite: \"assets/tile-1-center.gif\",\r\n      weaponSprite: \"assets/turret/turret-5-3.png\",\r\n      center: { x: 300, y: 400 },\r\n      target: { x: 300, y: 100 },\r\n      rotateRate: (6 * 3.14159) / 1000, // radians per second\r\n    });\r\n\r\n    // this.playerModel = this.createEnemy(\r\n    //   100,\r\n    //   100,\r\n    //   \"assets/spritesheet-bird.png\"\r\n    // );\r\n    // self.enemycontroller = new EnemyController(self.playerModel);\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n  }\r\n\r\n  registerKey() {\r\n    let self = this;\r\n    let upgrade = localStorage[\"upgrade\"];\r\n    let sell = localStorage[\"sell\"];\r\n    let start = localStorage[\"start\"];\r\n    self.myKeyboard.cleanAll();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (GameState.life <= 0) {\r\n      GameState.cancelNextRequest = true;\r\n      this.particlesSmoke.update(elapsedTime);\r\n      return;\r\n    }\r\n    this.creeps.forEach((creep) => {\r\n      creep.update(elapsedTime);\r\n      if (isColliding(creep, this.tower, 200)) {\r\n        this.tower.setTarget(\r\n          creep.player.specs.center.x,\r\n          creep.player.specs.center.y\r\n        );\r\n      }\r\n    });\r\n    // this.playerModel.update(elapsedTime);\r\n    this.tower.update(elapsedTime);\r\n   \r\n    // this.enemycontroller.update(elapsedTime);\r\n    // model.update(elapsedTime);\r\n  }\r\n\r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n    document.getElementById(\"lives\").innerHTML = GameState.life;\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    this.renderScore();\r\n    // this.playerModel.render();\r\n    this.creeps.forEach((creep) => {\r\n      creep.render();\r\n    });\r\n    this.tower.render();\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n    this.sound = new Sound();\r\n    this.sound.loadAudio();\r\n    this.registerKey();\r\n\r\n    // this.myKeyboard.register(\"ArrowUp\", self.playerModel.player.moveTop);\r\n    // this.myKeyboard.register(\"ArrowDown\", self.playerModel.player.moveDown);\r\n    // this.myKeyboard.register(\"ArrowLeft\", self.playerModel.player.moveLeft);\r\n    // this.myKeyboard.register(\"ArrowRight\", self.playerModel.player.moveRight);\r\n    // console.log(self.playerModel.moveRight);\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"],"file":"game-play.dev.js"}