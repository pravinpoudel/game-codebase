{"version":3,"sources":["initialize.js"],"names":["context","canvas","document","getElementById","manager","window","Manager","href","activeButton","lastIndexOf","renderCircle","substring","firstTime","selectedTower","mouseCapture","moneyRequired","cellWidth","rows","cols","topOffset","leftOffset","undefined","y","towerClicked","width","height","isActive","towerTypeSelected","cellSet","canvasPosition","getBoundingClientRect","localStorage","setItem","getItem","console","GameState","control","mainmenu","about","About","menu","screens","help","Help","highscores","HighScoreMenu","Control","MainMenu","isColliding2","x1","y1","width1","x2","y2","width2","fillRect","strokeStyle","strokeRect","image","assets","drawImage","mouse","center","x","specs","size","beginPath","Math","floor","r1","player","radius","min","r2","baseSprite","max","r2Width","difference","random","r1Width","r2X","r1X","r1Y","r2Y","drawRectangle","spec","fillStyle","fill","normalize","direction","stroke","distance","drawTower","testTolerance","value","test","computeAngle","arc","PI","generateRandom","arguments","length","ptCenter","v2","crossProduct2d","v1","angle","acos","crossProduct","cp","mouseOverTower","tolerance","i","towersLength","rotation","ptTarget","cos","findSelectedTower","canCreated","len","sqrt","dp","input","Keyboard","log","gameplay","towers"],"mappings":"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","file":"initialize.min.js","sourcesContent":["let canvas = document.getElementById(\"canvas-main\");\r\nlet context;\r\nlet manager = new Manager();\r\nlet activeButton = null;\r\nvar href = window.location.href;\r\nvar dir = href.substring(0, href.lastIndexOf(\"/\")) + \"/\";\r\n\r\nrenderCircle = false;\r\nfirstTime = true;\r\nselectedTower = null;\r\nmouseCapture = false;\r\ntowerClicked = null;\r\nmoneyRequired = 0;\r\ntowerTypeSelected = 1;\r\nbombAffectRadius = 150;\r\n\r\nconst cellWidth = 50;\r\nconst rows = 10;\r\nconst cols = 10;\r\nlet topOffset = 250;\r\nlet leftOffset = 50;\r\n\r\nconst mouse = {\r\n  x: undefined,\r\n  y: undefined,\r\n  width: 0.1,\r\n  height: 0.1,\r\n  isActive: false,\r\n};\r\n\r\nconst cellSet = [];\r\nconst canvasPosition = canvas.getBoundingClientRect();\r\n\r\n// canvas.addEventListener(\"mousedown\", function (e) {\r\n//   mouse.isActive = true;\r\n// });\r\n\r\n// canvas.addEventListener(\"mousemove\", function (e) {\r\n//   mouse.x = e.x - canvasPosition.left;\r\n//   mouse.y = e.y - canvasPosition.top;\r\n// });\r\n\r\n// canvas.addEventListener(\"click\", handleClick);\r\n\r\n// function handleClick(event) {\r\n//   mouse.x = event.offsetX;\r\n//   mouse.y = event.offsetY;\r\n//   console.log(mouse.x, mouse.y);\r\n// }\r\n\r\n// canvas.addEventListener(\"mouseleave\", function () {\r\n//   mouse.x = undefined;\r\n//   mouse.y = undefined;\r\n// });\r\n\r\nif (localStorage[\"upgrade\"] == \"null\") {\r\n  localStorage.setItem(\"upgrade\", \"u\");\r\n}\r\nif (!localStorage.getItem(\"sell\")) {\r\n  localStorage.setItem(\"sell\", \"s\");\r\n}\r\nif (!localStorage.getItem(\"start\")) {\r\n  localStorage.setItem(\"start\", \"s\");\r\n}\r\n\r\nconsole.log(\r\n  localStorage[\"upgrade\"],\r\n  localStorage[\"shell\"],\r\n  localStorage[\"start\"]\r\n);\r\n\r\n// window.addEventListener(\"resize\", resizeCanvas, false);\r\n\r\nGameState.menu = manager;\r\n\r\nlet screens = {\r\n  help: new Help(manager),\r\n  highscores: new HighScoreMenu(manager),\r\n  control: new Control(manager),\r\n  mainmenu: new MainMenu(manager),\r\n  about: new About(manager),\r\n};\r\n\r\nGameState.input = new Keyboard();\r\nconsole.log(GameState.input);\r\nscreens.gameplay = new GamePlay(manager, GameState.input);\r\nGameState.screens = screens;\r\n\r\n// function resizeCanvas() {\r\n//   if (canvas) {\r\n//     canvas.width = window.innerWidth;\r\n//     canvas.height = window.innerHeight;\r\n//     context = canvas.getContext(\"2d\");\r\n//     console.log(canvas);\r\n//   }\r\n// }\r\n// resizeCanvas();\r\n\r\n//------------------------------------------------------\r\n// r2.specs.center.y > r1.specs.y + r1.specs.size.y ||\r\n// r2.specs.center.y + r2.specs.size.y < r1.specs.center.y\r\n\r\nfunction isColliding2(x1, y1, width1, x2, y2, width2) {\r\n  return !(\r\n    x1 + width1 <= x2 ||\r\n    x1 >= x2 + width2 ||\r\n    y1 + width1 <= y2 ||\r\n    y1 >= width2 + y2\r\n  );\r\n}\r\n\r\nfunction isColliding(r1, r2, radius) {\r\n  console.log(r2);\r\n  let r1X = r1.player.specs.center.x - Math.floor(r1.player.specs.size.x / 2);\r\n  let r1Y = r1.player.specs.center.y - Math.floor(r1.player.specs.size.y / 2);\r\n  let r1Width = r1.player.specs.size.x;\r\n\r\n  // let r2X = r2.player.specs.center.x - Math.floor(r2.player.specs.size.x / 2);\r\n  // let r2Y = r2.player.specs.center.y - Math.floor(r2.player.specs.size.y / 2);\r\n  // let r2Width = r2.player.specs.size.x;\r\n  let r2Width = r2.baseSprite.image.width;\r\n  let r2X = r2.specs.center.x - r2Width;\r\n  let r2Y = r2.specs.center.y - r2Width;\r\n  return !(\r\n    r1X + r1Width <= r2X - radius ||\r\n    r1X >= r2X + r2Width + radius ||\r\n    r1Y + r1Width <= r2Y - radius ||\r\n    r1Y >= r2Width + r2Y + radius\r\n  );\r\n}\r\nfunction drawRectangle(spec) {\r\n  context.fillStyle = spec.fill;\r\n  context.fillRect(spec.x, spec.y, spec.width, spec.height);\r\n\r\n  context.strokeStyle = spec.stroke;\r\n  context.strokeRect(spec.x, spec.y, spec.width, spec.height);\r\n}\r\n\r\nfunction drawTower(radius) {\r\n  let image = GameState.assets[selectedTower];\r\n  context.drawImage(\r\n    image,\r\n    mouse.x - image.width / 2, // Where to draw the sub-texture\r\n    mouse.y - image.height / 2,\r\n    image.width,\r\n    image.height\r\n  );\r\n  context.beginPath();\r\n  context.arc(mouse.x, mouse.y, radius, 0, 2 * Math.PI, false);\r\n  context.stroke();\r\n}\r\n\r\nfunction generateRandom(min = 4, max = 7) {\r\n  let difference = max - min;\r\n  let random = Math.random();\r\n  random = Math.floor(random * difference) + min;\r\n  return random;\r\n}\r\n\r\nfunction crossProduct2d(v1, v2) {\r\n  return v1.x * v2.y - v1.y * v2.x;\r\n}\r\n\r\nfunction normalize(direction) {\r\n  let distance = Math.sqrt(\r\n    direction.x * direction.x + direction.y * direction.y\r\n  );\r\n  direction.x = direction.x / distance;\r\n  direction.y = direction.y / distance;\r\n  return direction;\r\n}\r\n\r\nfunction testTolerance(value, test, tolerance) {\r\n  if (Math.abs(value - test) < tolerance) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction computeAngle(rotation, ptCenter, ptTarget) {\r\n  let v1 = {\r\n    x: Math.cos(rotation),\r\n    y: Math.sin(rotation),\r\n  };\r\n  let v2 = {\r\n    x: ptTarget.x - ptCenter.x,\r\n    y: ptTarget.y - ptCenter.y,\r\n  };\r\n\r\n  v2.len = Math.sqrt(v2.x * v2.x + v2.y * v2.y);\r\n  v2.x /= v2.len;\r\n  v2.y /= v2.len;\r\n\r\n  let dp = v1.x * v2.x + v1.y * v2.y;\r\n  let angle = Math.acos(dp);\r\n\r\n  let cp = crossProduct2d(v1, v2);\r\n\r\n  return {\r\n    angle: angle,\r\n    crossProduct: cp,\r\n  };\r\n}\r\nlet mouseOverTower = null;\r\n\r\nfunction canCreated(towers) {\r\n  let towersLength = towers.length;\r\n  for (let i = 0; i < towersLength; i++) {\r\n    if (\r\n      isColliding2(\r\n        mouse.x,\r\n        mouse.y,\r\n        mouse.width,\r\n        towers[i].specs.center.x - 25,\r\n        towers[i].specs.center.y - 25,\r\n        50\r\n      )\r\n    ) {\r\n      mouseOverTower = towers[i];\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction findSelectedTower(towers) {\r\n  if (!mouse.isActive) {\r\n    if (!canCreated(towers)) {\r\n      towerClicked = mouseOverTower;\r\n    }\r\n  }\r\n}\r\n\r\n"]}