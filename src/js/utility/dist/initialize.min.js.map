{"version":3,"sources":["initialize.js"],"names":["context","canvas","document","getElementById","manager","window","Manager","href","activeButton","lastIndexOf","dir","x","mouse","undefined","y","width","height","canvasPosition","getBoundingClientRect","console","handleClick","event","offsetX","offsetY","addEventListener","localStorage","getItem","setItem","log","GameState","help","Help","menu","screens","gameplay","HighScoreMenu","control","Control","mainmenu","MainMenu","about","About","isColliding","r1","r2","radius","r1X","drawRectangle","specs","center","Math","floor","player","size","fillStyle","spec","fill","fillRect","r2Width","crossProduct2d","image","r2X","r2Y","testTolerance","value","abs","r1Y","r1Width","computeAngle","rotation","ptCenter","ptTarget","stroke","v2","test","tolerance","len","v1","cos","sin","sqrt","dp","angle","acos","crossProduct","input","Keyboard","GamePlay"],"mappings":"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","file":"initialize.min.js","sourcesContent":["let canvas = document.getElementById(\"canvas-main\");\r\nlet context;\r\nlet manager = new Manager();\r\nlet activeButton = null;\r\nvar href = window.location.href;\r\nvar dir = href.substring(0, href.lastIndexOf(\"/\")) + \"/\";\r\n\r\nconst mouse = {\r\n  x: undefined,\r\n  y: undefined,\r\n  width: 0.1,\r\n  height: 0.1,\r\n  isActive: false,\r\n};\r\n\r\nconst canvasPosition = canvas.getBoundingClientRect();\r\n\r\n// canvas.addEventListener(\"mousedown\", function (e) {\r\n//   mouse.isActive = true;\r\n// });\r\n\r\n// canvas.addEventListener(\"mousemove\", function (e) {\r\n//   mouse.x = e.x - canvasPosition.left;\r\n//   mouse.y = e.y - canvasPosition.top;\r\n// });\r\n\r\ncanvas.addEventListener(\"click\", handleClick);\r\n\r\nfunction handleClick(event) {\r\n  mouse.x = event.offsetX;\r\n  mouse.y = event.offsetY;\r\n  console.log(mouse.x, mouse.y);\r\n}\r\n\r\ncanvas.addEventListener(\"mouseleave\", function () {\r\n  mouse.x = undefined;\r\n  mouse.y = undefined;\r\n});\r\n\r\nif (!localStorage.getItem(\"upgrade\")) {\r\n  localStorage.setItem(\"upgrade\", \"u\");\r\n}\r\nif (!localStorage.getItem(\"sell\")) {\r\n  localStorage.setItem(\"sell\", \"s\");\r\n}\r\nif (!localStorage.getItem(\"start\")) {\r\n  localStorage.setItem(\"start\", \"g\");\r\n}\r\n\r\nconsole.log(\r\n  localStorage[\"upgrade\"],\r\n  localStorage[\"shell\"],\r\n  localStorage[\"start\"]\r\n);\r\n\r\n// window.addEventListener(\"resize\", resizeCanvas, false);\r\n\r\nGameState.menu = manager;\r\n\r\nlet screens = {\r\n  help: new Help(manager),\r\n  highscores: new HighScoreMenu(manager),\r\n  control: new Control(manager),\r\n  mainmenu: new MainMenu(manager),\r\n  about: new About(manager),\r\n};\r\n\r\nGameState.input = new Keyboard();\r\nconsole.log(GameState.input);\r\nscreens.gameplay = new GamePlay(manager, GameState.input);\r\nGameState.screens = screens;\r\n\r\n// function resizeCanvas() {\r\n//   if (canvas) {\r\n//     canvas.width = window.innerWidth;\r\n//     canvas.height = window.innerHeight;\r\n//     context = canvas.getContext(\"2d\");\r\n//     console.log(canvas);\r\n//   }\r\n// }\r\n// resizeCanvas();\r\n\r\n//------------------------------------------------------\r\n// r2.specs.center.y > r1.specs.y + r1.specs.size.y ||\r\n// r2.specs.center.y + r2.specs.size.y < r1.specs.center.y\r\n\r\nfunction isColliding(r1, r2, radius) {\r\n  let r1X = r1.player.specs.center.x - Math.floor(r1.player.specs.size.x / 2);\r\n  let r1Y = r1.player.specs.center.y - Math.floor(r1.player.specs.size.y / 2);\r\n  let r1Width = r1.player.specs.size.x;\r\n\r\n  // let r2X = r2.player.specs.center.x - Math.floor(r2.player.specs.size.x / 2);\r\n  // let r2Y = r2.player.specs.center.y - Math.floor(r2.player.specs.size.y / 2);\r\n  // let r2Width = r2.player.specs.size.x;\r\n  let r2Width = r2.baseSprite.image.width;\r\n  let r2X = r2.specs.center.x - r2Width;\r\n  let r2Y = r2.specs.center.y - r2Width;\r\n  return !(\r\n    r1X + r1Width <= r2X - radius ||\r\n    r1X >= r2X + r2Width + radius ||\r\n    r1Y + r1Width <= r2Y - radius ||\r\n    r1Y >= r2Width + r2Y + radius\r\n  );\r\n}\r\nfunction drawRectangle(spec) {\r\n  context.fillStyle = spec.fill;\r\n  context.fillRect(spec.x, spec.y, spec.width, spec.height);\r\n\r\n  context.strokeStyle = spec.stroke;\r\n  context.strokeRect(spec.x, spec.y, spec.width, spec.height);\r\n}\r\n\r\nfunction crossProduct2d(v1, v2) {\r\n  return v1.x * v2.y - v1.y * v2.x;\r\n}\r\n\r\nfunction testTolerance(value, test, tolerance) {\r\n  if (Math.abs(value - test) < tolerance) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction computeAngle(rotation, ptCenter, ptTarget) {\r\n  let v1 = {\r\n    x: Math.cos(rotation),\r\n    y: Math.sin(rotation),\r\n  };\r\n  let v2 = {\r\n    x: ptTarget.x - ptCenter.x,\r\n    y: ptTarget.y - ptCenter.y,\r\n  };\r\n\r\n  v2.len = Math.sqrt(v2.x * v2.x + v2.y * v2.y);\r\n  v2.x /= v2.len;\r\n  v2.y /= v2.len;\r\n\r\n  let dp = v1.x * v2.x + v1.y * v2.y;\r\n  let angle = Math.acos(dp);\r\n\r\n  let cp = crossProduct2d(v1, v2);\r\n\r\n  return {\r\n    angle: angle,\r\n    crossProduct: cp,\r\n  };\r\n}"]}