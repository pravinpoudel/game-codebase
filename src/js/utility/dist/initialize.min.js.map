{"version":3,"sources":["initialize.js"],"names":["context","canvas","document","getElementById","manager","window","Manager","href","activeButton","lastIndexOf","undefined","y","width","height","isActive","mouseCapture","renderCircle","substring","canvasPosition","getBoundingClientRect","localStorage","getItem","setItem","console","GameState","control","mainmenu","about","About","menu","screens","help","Help","highscores","HighScoreMenu","Control","MainMenu","drawRectangle","x1","spec","width1","x2","y2","width2","strokeStyle","strokeRect","y1","mouse","isColliding","r2","radius","beginPath","specs","center","x","Math","floor","r1","player","size","arc","PI","r2Width","baseSprite","image","r2X","r2Y","normalize","direction","r1Y","test","fillStyle","fill","fillRect","stroke","drawTower","ptTarget","v2","len","crossProduct2d","v1","distance","sqrt","testTolerance","value","tolerance","abs","computeAngle","rotation","ptCenter","cos","sin","dp","angle","acos","crossProduct","input","Keyboard","log","gameplay","isColliding2"],"mappings":"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","file":"initialize.min.js","sourcesContent":["let canvas = document.getElementById(\"canvas-main\");\r\nlet context;\r\nlet manager = new Manager();\r\nlet activeButton = null;\r\nvar href = window.location.href;\r\nvar dir = href.substring(0, href.lastIndexOf(\"/\")) + \"/\";\r\n\r\nrenderCircle = true;\r\nfirstTime = true;\r\n\r\nmouseCapture = false;\r\n\r\nconst mouse = {\r\n  x: undefined,\r\n  y: undefined,\r\n  width: 0.1,\r\n  height: 0.1,\r\n  isActive: false,\r\n};\r\n\r\nconst canvasPosition = canvas.getBoundingClientRect();\r\n\r\n// canvas.addEventListener(\"mousedown\", function (e) {\r\n//   mouse.isActive = true;\r\n// });\r\n\r\n// canvas.addEventListener(\"mousemove\", function (e) {\r\n//   mouse.x = e.x - canvasPosition.left;\r\n//   mouse.y = e.y - canvasPosition.top;\r\n// });\r\n\r\n// canvas.addEventListener(\"click\", handleClick);\r\n\r\n// function handleClick(event) {\r\n//   mouse.x = event.offsetX;\r\n//   mouse.y = event.offsetY;\r\n//   console.log(mouse.x, mouse.y);\r\n// }\r\n\r\n// canvas.addEventListener(\"mouseleave\", function () {\r\n//   mouse.x = undefined;\r\n//   mouse.y = undefined;\r\n// });\r\n\r\nif (!localStorage.getItem(\"upgrade\")) {\r\n  localStorage.setItem(\"upgrade\", \"u\");\r\n}\r\nif (!localStorage.getItem(\"sell\")) {\r\n  localStorage.setItem(\"sell\", \"s\");\r\n}\r\nif (!localStorage.getItem(\"start\")) {\r\n  localStorage.setItem(\"start\", \"g\");\r\n}\r\n\r\nconsole.log(\r\n  localStorage[\"upgrade\"],\r\n  localStorage[\"shell\"],\r\n  localStorage[\"start\"]\r\n);\r\n\r\n// window.addEventListener(\"resize\", resizeCanvas, false);\r\n\r\nGameState.menu = manager;\r\n\r\nlet screens = {\r\n  help: new Help(manager),\r\n  highscores: new HighScoreMenu(manager),\r\n  control: new Control(manager),\r\n  mainmenu: new MainMenu(manager),\r\n  about: new About(manager),\r\n};\r\n\r\nGameState.input = new Keyboard();\r\nconsole.log(GameState.input);\r\nscreens.gameplay = new GamePlay(manager, GameState.input);\r\nGameState.screens = screens;\r\n\r\n// function resizeCanvas() {\r\n//   if (canvas) {\r\n//     canvas.width = window.innerWidth;\r\n//     canvas.height = window.innerHeight;\r\n//     context = canvas.getContext(\"2d\");\r\n//     console.log(canvas);\r\n//   }\r\n// }\r\n// resizeCanvas();\r\n\r\n//------------------------------------------------------\r\n// r2.specs.center.y > r1.specs.y + r1.specs.size.y ||\r\n// r2.specs.center.y + r2.specs.size.y < r1.specs.center.y\r\n\r\nfunction isColliding2(x1, y1, width1, x2, y2, width2) {\r\n  return !(\r\n    x1 + width1 <= x2 ||\r\n    x1 >= x2 + width2 ||\r\n    y1 + width1 <= y2 ||\r\n    y1 >= width2 + y2\r\n  );\r\n}\r\n\r\nfunction isColliding(r1, r2, radius) {\r\n  let r1X = r1.player.specs.center.x - Math.floor(r1.player.specs.size.x / 2);\r\n  let r1Y = r1.player.specs.center.y - Math.floor(r1.player.specs.size.y / 2);\r\n  let r1Width = r1.player.specs.size.x;\r\n\r\n  // let r2X = r2.player.specs.center.x - Math.floor(r2.player.specs.size.x / 2);\r\n  // let r2Y = r2.player.specs.center.y - Math.floor(r2.player.specs.size.y / 2);\r\n  // let r2Width = r2.player.specs.size.x;\r\n  let r2Width = r2.baseSprite.image.width;\r\n  let r2X = r2.specs.center.x - r2Width;\r\n  let r2Y = r2.specs.center.y - r2Width;\r\n  return !(\r\n    r1X + r1Width <= r2X - radius ||\r\n    r1X >= r2X + r2Width + radius ||\r\n    r1Y + r1Width <= r2Y - radius ||\r\n    r1Y >= r2Width + r2Y + radius\r\n  );\r\n}\r\nfunction drawRectangle(spec) {\r\n  context.fillStyle = spec.fill;\r\n  context.fillRect(spec.x, spec.y, spec.width, spec.height);\r\n\r\n  context.strokeStyle = spec.stroke;\r\n  context.strokeRect(spec.x, spec.y, spec.width, spec.height);\r\n}\r\n\r\nfunction drawTower(image, radius) {\r\n  context.drawImage(\r\n    image,\r\n    mouse.x - image.width / 2, // Where to draw the sub-texture\r\n    mouse.y - image.height / 2,\r\n    image.width,\r\n    image.height\r\n  );\r\n  context.beginPath();\r\n  context.arc(mouse.x, mouse.y, radius, 0, 2 * Math.PI, false);\r\n  context.stroke();\r\n}\r\n\r\nfunction crossProduct2d(v1, v2) {\r\n  return v1.x * v2.y - v1.y * v2.x;\r\n}\r\n\r\nfunction normalize(direction) {\r\n  let distance = Math.sqrt(\r\n    direction.x * direction.x + direction.y * direction.y\r\n  );\r\n  direction.x = direction.x / distance;\r\n  direction.y = direction.y / distance;\r\n  return direction;\r\n}\r\n\r\nfunction testTolerance(value, test, tolerance) {\r\n  if (Math.abs(value - test) < tolerance) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction computeAngle(rotation, ptCenter, ptTarget) {\r\n  let v1 = {\r\n    x: Math.cos(rotation),\r\n    y: Math.sin(rotation),\r\n  };\r\n  let v2 = {\r\n    x: ptTarget.x - ptCenter.x,\r\n    y: ptTarget.y - ptCenter.y,\r\n  };\r\n\r\n  v2.len = Math.sqrt(v2.x * v2.x + v2.y * v2.y);\r\n  v2.x /= v2.len;\r\n  v2.y /= v2.len;\r\n\r\n  let dp = v1.x * v2.x + v1.y * v2.y;\r\n  let angle = Math.acos(dp);\r\n\r\n  let cp = crossProduct2d(v1, v2);\r\n\r\n  return {\r\n    angle: angle,\r\n    crossProduct: cp,\r\n  };\r\n}\r\n\r\n"]}