{"version":3,"sources":["initialize.js"],"names":["context","canvas","document","getElementById","manager","window","Manager","href","activeButton","lastIndexOf","renderCircle","substring","firstTime","selectedTower","moneyRequired","towerTypeSelected","bombAffectRadius","mouseCapture","gameSound","maxWave","wave","cellWidth","rows","totalCreepKilled","cols","topOffset","leftOffset","undefined","y","creepGoing","towerClicked","width","height","isActive","nextWave","cellSet","canvasPosition","getBoundingClientRect","localStorage","setItem","getItem","GameState","input","screens","help","Help","highscores","HighScoreMenu","control","Control","mainmenu","MainMenu","about","About","isColliding2","center","width1","r2Width","y2","width2","x1","x2","y1","drawRectangle","fillStyle","isColliding","r1","r2","radius","r1X","player","specs","x","Math","floor","size","r1Y","drawTower","image","assets","baseSprite","r2X","r2Y","r1Width","difference","max","min","random","spec","fill","crossProduct2d","v1","strokeStyle","stroke","strokeRect","direction","distance","mouse","testTolerance","beginPath","arc","PI","generateRandom","arguments","length","rotation","v2","sqrt","normalize","angle","acos","crossProduct","cp","mouseOverTower","value","test","tolerance","abs","computeAngle","ptCenter","ptTarget","cos","sin","findSelectedTower","towers","len","dp","Keyboard","gameplay","GamePlay","canCreated","towersLength","i"],"mappings":"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","file":"initialize.min.js","sourcesContent":["let canvas = document.getElementById(\"canvas-main\");\r\nlet context;\r\nlet manager = new Manager();\r\nlet activeButton = null;\r\nvar href = window.location.href;\r\nvar dir = href.substring(0, href.lastIndexOf(\"/\")) + \"/\";\r\n\r\nrenderCircle = false;\r\nfirstTime = true;\r\nselectedTower = null;\r\nmouseCapture = false;\r\ntowerClicked = null;\r\nmoneyRequired = 0;\r\ntowerTypeSelected = 1;\r\nbombAffectRadius = 150;\r\ngameSound = null;\r\ncreepGoing = \"top\";\r\ntotalCreepKilled = 0;\r\nwave = 10;\r\nmaxWave = 3;\r\nnextWave = false;\r\ntowerRadius = 100;\r\n\r\nconst cellWidth = 50;\r\nconst rows = 10;\r\nconst cols = 10;\r\nlet topOffset = 250;\r\nlet leftOffset = 50;\r\n\r\nconst mouse = {\r\n  x: undefined,\r\n  y: undefined,\r\n  width: 0.1,\r\n  height: 0.1,\r\n  isActive: false,\r\n};\r\n\r\nconst cellSet = [];\r\nconst canvasPosition = canvas.getBoundingClientRect();\r\n\r\n// canvas.addEventListener(\"mousedown\", function (e) {\r\n//   mouse.isActive = true;\r\n// });\r\n\r\n// canvas.addEventListener(\"mousemove\", function (e) {\r\n//   mouse.x = e.x - canvasPosition.left;\r\n//   mouse.y = e.y - canvasPosition.top;\r\n// });\r\n\r\n// canvas.addEventListener(\"click\", handleClick);\r\n\r\n// function handleClick(event) {\r\n//   mouse.x = event.offsetX;\r\n//   mouse.y = event.offsetY;\r\n//   console.log(mouse.x, mouse.y);\r\n// }\r\n\r\n// canvas.addEventListener(\"mouseleave\", function () {\r\n//   mouse.x = undefined;\r\n//   mouse.y = undefined;\r\n// });\r\n\r\nif (localStorage[\"upgrade\"] == \"null\") {\r\n  localStorage.setItem(\"upgrade\", \"u\");\r\n}\r\nif (!localStorage.getItem(\"sell\")) {\r\n  localStorage.setItem(\"sell\", \"s\");\r\n}\r\nif (!localStorage.getItem(\"start\")) {\r\n  localStorage.setItem(\"start\", \"s\");\r\n}\r\n\r\n// console.log(\r\n//   localStorage[\"upgrade\"],\r\n//   localStorage[\"shell\"],\r\n//   localStorage[\"start\"]\r\n// );\r\n\r\n// window.addEventListener(\"resize\", resizeCanvas, false);\r\n\r\nGameState.menu = manager;\r\n\r\nlet screens = {\r\n  help: new Help(manager),\r\n  highscores: new HighScoreMenu(manager),\r\n  control: new Control(manager),\r\n  mainmenu: new MainMenu(manager),\r\n  about: new About(manager),\r\n};\r\n\r\nGameState.input = new Keyboard();\r\nscreens.gameplay = new GamePlay(manager, GameState.input);\r\nGameState.screens = screens;\r\n\r\n// function resizeCanvas() {\r\n//   if (canvas) {\r\n//     canvas.width = window.innerWidth;\r\n//     canvas.height = window.innerHeight;\r\n//     context = canvas.getContext(\"2d\");\r\n//     console.log(canvas);\r\n//   }\r\n// }\r\n// resizeCanvas();\r\n\r\n//------------------------------------------------------\r\n// r2.specs.center.y > r1.specs.y + r1.specs.size.y ||\r\n// r2.specs.center.y + r2.specs.size.y < r1.specs.center.y\r\n\r\nfunction isColliding2(x1, y1, width1, x2, y2, width2) {\r\n  return !(\r\n    x1 + width1 <= x2 ||\r\n    x1 >= x2 + width2 ||\r\n    y1 + width1 <= y2 ||\r\n    y1 >= width2 + y2\r\n  );\r\n}\r\n\r\nfunction isColliding(r1, r2, radius) {\r\n  let r1X = r1.player.specs.center.x - Math.floor(r1.player.specs.size.x / 2);\r\n  let r1Y = r1.player.specs.center.y - Math.floor(r1.player.specs.size.y / 2);\r\n  let r1Width = r1.player.specs.size.x;\r\n\r\n  // let r2X = r2.player.specs.center.x - Math.floor(r2.player.specs.size.x / 2);\r\n  // let r2Y = r2.player.specs.center.y - Math.floor(r2.player.specs.size.y / 2);\r\n  // let r2Width = r2.player.specs.size.x;\r\n  let r2Width = r2.baseSprite.image.width;\r\n  let r2X = r2.specs.center.x - r2Width;\r\n  let r2Y = r2.specs.center.y - r2Width;\r\n  return !(\r\n    r1X + r1Width <= r2X - radius ||\r\n    r1X >= r2X + r2Width + radius ||\r\n    r1Y + r1Width <= r2Y - radius ||\r\n    r1Y >= r2Width + r2Y + radius\r\n  );\r\n}\r\nfunction drawRectangle(spec) {\r\n  context.fillStyle = spec.fill;\r\n  context.fillRect(spec.x, spec.y, spec.width, spec.height);\r\n\r\n  context.strokeStyle = spec.stroke;\r\n  context.strokeRect(spec.x, spec.y, spec.width, spec.height);\r\n}\r\n\r\nfunction drawTower(radius) {\r\n  let image = GameState.assets[selectedTower];\r\n  context.drawImage(\r\n    image,\r\n    mouse.x - image.width / 2, // Where to draw the sub-texture\r\n    mouse.y - image.height / 2,\r\n    image.width,\r\n    image.height\r\n  );\r\n  context.beginPath();\r\n  context.arc(mouse.x, mouse.y, radius, 0, 2 * Math.PI, false);\r\n  context.stroke();\r\n}\r\n\r\nfunction generateRandom(min = 4, max = 8) {\r\n  let difference = max - min;\r\n  let random = Math.random();\r\n  random = Math.floor(random * difference) + min;\r\n  return random;\r\n}\r\n\r\nfunction crossProduct2d(v1, v2) {\r\n  return v1.x * v2.y - v1.y * v2.x;\r\n}\r\n\r\nfunction normalize(direction) {\r\n  let distance = Math.sqrt(\r\n    direction.x * direction.x + direction.y * direction.y\r\n  );\r\n  direction.x = direction.x / distance;\r\n  direction.y = direction.y / distance;\r\n  return direction;\r\n}\r\n\r\nfunction testTolerance(value, test, tolerance) {\r\n  if (Math.abs(value - test) < tolerance) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction computeAngle(rotation, ptCenter, ptTarget) {\r\n  let v1 = {\r\n    x: Math.cos(rotation),\r\n    y: Math.sin(rotation),\r\n  };\r\n  let v2 = {\r\n    x: ptTarget.x - ptCenter.x,\r\n    y: ptTarget.y - ptCenter.y,\r\n  };\r\n\r\n  v2.len = Math.sqrt(v2.x * v2.x + v2.y * v2.y);\r\n  v2.x /= v2.len;\r\n  v2.y /= v2.len;\r\n\r\n  let dp = v1.x * v2.x + v1.y * v2.y;\r\n  let angle = Math.acos(dp);\r\n\r\n  let cp = crossProduct2d(v1, v2);\r\n\r\n  return {\r\n    angle: angle,\r\n    crossProduct: cp,\r\n  };\r\n}\r\nlet mouseOverTower = null;\r\n\r\nfunction canCreated(towers) {\r\n  let towersLength = towers.length;\r\n  for (let i = 0; i < towersLength; i++) {\r\n    if (\r\n      isColliding2(\r\n        mouse.x,\r\n        mouse.y,\r\n        mouse.width,\r\n        towers[i].specs.center.x - 25,\r\n        towers[i].specs.center.y - 25,\r\n        50\r\n      )\r\n    ) {\r\n      mouseOverTower = towers[i];\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction findSelectedTower(towers) {\r\n  if (!mouse.isActive) {\r\n    if (!canCreated(towers)) {\r\n      towerClicked = mouseOverTower;\r\n    }\r\n  }\r\n}\r\n\r\n"]}