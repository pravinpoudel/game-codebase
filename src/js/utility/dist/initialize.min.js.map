{"version":3,"sources":["initialize.js"],"names":["context","canvas","document","getElementById","manager","window","Manager","href","activeButton","lastIndexOf","renderCircle","substring","firstTime","selectedTower","moneyRequired","bombAffectRadius","mouseCapture","gameSound","maxWave","wave","towerElements2","towerElements","startButton","cellWidth","rows","totalCreepKilled","cols","topOffset","leftOffset","undefined","y","creepGoing","towerClicked","width","height","isActive","nextWave","towerTypeSelected","getBoundingClientRect","localStorage","setItem","getItem","screens","gameplay","help","Help","highscores","HighScoreMenu","control","Control","mainmenu","MainMenu","about","About","isColliding2","r1Width","y1","r2X","radius","y2","r1X","x1","width1","x2","drawRectangle","fillRect","spec","isColliding","r1","r2","drawTower","center","x","Math","floor","player","specs","size","image","GameState","assets","drawImage","r2Width","baseSprite","r2Y","generateRandom","difference","min","r1Y","random","crossProduct2d","fill","v1","strokeStyle","stroke","normalize","direction","mouse","testTolerance","beginPath","arc","PI","arguments","length","v2","angle","acos","cp","crossProduct","distance","value","test","tolerance","canCreated","towers","computeAngle","rotation","ptCenter","ptTarget","cos","sin","findSelectedTower","len","sqrt","dp","input","Keyboard","GamePlay","mouseOverTower","towersLength","i"],"mappings":"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","file":"initialize.min.js","sourcesContent":["let canvas = document.getElementById(\"canvas-main\");\r\nlet context;\r\nlet manager = new Manager();\r\nlet activeButton = null;\r\nvar href = window.location.href;\r\nvar dir = href.substring(0, href.lastIndexOf(\"/\")) + \"/\";\r\n\r\nrenderCircle = false;\r\nfirstTime = true;\r\nselectedTower = null;\r\nmouseCapture = false;\r\ntowerClicked = null;\r\nmoneyRequired = 0;\r\ntowerTypeSelected = 1;\r\nbombAffectRadius = 100;\r\ngameSound = null;\r\ncreepGoing = \"top\";\r\ntotalCreepKilled = 0;\r\nwave = 10;\r\nmaxWave = 3;\r\nnextWave = false;\r\ntowerRadius = 100;\r\n\r\nconst cellWidth = 50;\r\nconst rows = 10;\r\nconst cols = 10;\r\nlet topOffset = 250;\r\nlet leftOffset = 50;\r\n\r\nconst mouse = {\r\n  x: undefined,\r\n  y: undefined,\r\n  width: 0.1,\r\n  height: 0.1,\r\n  isActive: false,\r\n};\r\n\r\nconst cellSet = [];\r\nconst canvasPosition = canvas.getBoundingClientRect();\r\n\r\nvar towerElements2;\r\nvar towerElements;\r\nvar startButton;\r\n\r\n// canvas.addEventListener(\"mousedown\", function (e) {\r\n//   mouse.isActive = true;\r\n// });\r\n\r\n// canvas.addEventListener(\"mousemove\", function (e) {\r\n//   mouse.x = e.x - canvasPosition.left;\r\n//   mouse.y = e.y - canvasPosition.top;\r\n// });\r\n\r\n// canvas.addEventListener(\"click\", handleClick);\r\n\r\n// function handleClick(event) {\r\n//   mouse.x = event.offsetX;\r\n//   mouse.y = event.offsetY;\r\n//   console.log(mouse.x, mouse.y);\r\n// }\r\n\r\n// canvas.addEventListener(\"mouseleave\", function () {\r\n//   mouse.x = undefined;\r\n//   mouse.y = undefined;\r\n// });\r\n\r\nif (localStorage[\"upgrade\"] == \"null\") {\r\n  localStorage.setItem(\"upgrade\", \"u\");\r\n}\r\nif (!localStorage.getItem(\"sell\")) {\r\n  localStorage.setItem(\"sell\", \"s\");\r\n}\r\nif (!localStorage.getItem(\"start\")) {\r\n  localStorage.setItem(\"start\", \"s\");\r\n}\r\n\r\n// console.log(\r\n//   localStorage[\"upgrade\"],\r\n//   localStorage[\"shell\"],\r\n//   localStorage[\"start\"]\r\n// );\r\n\r\n// window.addEventListener(\"resize\", resizeCanvas, false);\r\n\r\nGameState.menu = manager;\r\n\r\nlet screens = {\r\n  help: new Help(manager),\r\n  highscores: new HighScoreMenu(manager),\r\n  control: new Control(manager),\r\n  mainmenu: new MainMenu(manager),\r\n  about: new About(manager),\r\n};\r\n\r\nGameState.input = new Keyboard();\r\nscreens.gameplay = new GamePlay(manager, GameState.input);\r\nGameState.screens = screens;\r\n\r\n// function resizeCanvas() {\r\n//   if (canvas) {\r\n//     canvas.width = window.innerWidth;\r\n//     canvas.height = window.innerHeight;\r\n//     context = canvas.getContext(\"2d\");\r\n//     console.log(canvas);\r\n//   }\r\n// }\r\n// resizeCanvas();\r\n\r\n//------------------------------------------------------\r\n// r2.specs.center.y > r1.specs.y + r1.specs.size.y ||\r\n// r2.specs.center.y + r2.specs.size.y < r1.specs.center.y\r\n\r\nfunction isColliding2(x1, y1, width1, x2, y2, width2) {\r\n  return !(\r\n    x1 + width1 <= x2 ||\r\n    x1 >= x2 + width2 ||\r\n    y1 + width1 <= y2 ||\r\n    y1 >= width2 + y2\r\n  );\r\n}\r\n\r\nfunction isColliding(r1, r2, radius) {\r\n  let r1X = r1.player.specs.center.x - Math.floor(r1.player.specs.size.x / 2);\r\n  let r1Y = r1.player.specs.center.y - Math.floor(r1.player.specs.size.y / 2);\r\n  let r1Width = r1.player.specs.size.x;\r\n\r\n  // let r2X = r2.player.specs.center.x - Math.floor(r2.player.specs.size.x / 2);\r\n  // let r2Y = r2.player.specs.center.y - Math.floor(r2.player.specs.size.y / 2);\r\n  // let r2Width = r2.player.specs.size.x;\r\n  let r2Width = r2.baseSprite.image.width;\r\n  let r2X = r2.specs.center.x - r2Width;\r\n  let r2Y = r2.specs.center.y - r2Width;\r\n  return !(\r\n    r1X + r1Width <= r2X - radius ||\r\n    r1X >= r2X + r2Width + radius ||\r\n    r1Y + r1Width <= r2Y - radius ||\r\n    r1Y >= r2Width + r2Y + radius\r\n  );\r\n}\r\nfunction drawRectangle(spec) {\r\n  context.fillStyle = spec.fill;\r\n  context.fillRect(spec.x, spec.y, spec.width, spec.height);\r\n\r\n  context.strokeStyle = spec.stroke;\r\n  context.strokeRect(spec.x, spec.y, spec.width, spec.height);\r\n}\r\n\r\nfunction drawTower(radius) {\r\n  let image = GameState.assets[selectedTower];\r\n  context.drawImage(\r\n    image,\r\n    mouse.x - image.width / 2, // Where to draw the sub-texture\r\n    mouse.y - image.height / 2,\r\n    image.width,\r\n    image.height\r\n  );\r\n  context.beginPath();\r\n  context.arc(mouse.x, mouse.y, radius, 0, 2 * Math.PI, false);\r\n  context.stroke();\r\n}\r\n\r\nfunction generateRandom(min = 4, max = 8) {\r\n  let difference = max - min;\r\n  let random = Math.random();\r\n  random = Math.floor(random * difference) + min;\r\n  return random;\r\n}\r\n\r\nfunction crossProduct2d(v1, v2) {\r\n  return v1.x * v2.y - v1.y * v2.x;\r\n}\r\n\r\nfunction normalize(direction) {\r\n  let distance = Math.sqrt(\r\n    direction.x * direction.x + direction.y * direction.y\r\n  );\r\n  direction.x = direction.x / distance;\r\n  direction.y = direction.y / distance;\r\n  return direction;\r\n}\r\n\r\nfunction testTolerance(value, test, tolerance) {\r\n  if (Math.abs(value - test) < tolerance) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction computeAngle(rotation, ptCenter, ptTarget) {\r\n  let v1 = {\r\n    x: Math.cos(rotation),\r\n    y: Math.sin(rotation),\r\n  };\r\n  let v2 = {\r\n    x: ptTarget.x - ptCenter.x,\r\n    y: ptTarget.y - ptCenter.y,\r\n  };\r\n\r\n  v2.len = Math.sqrt(v2.x * v2.x + v2.y * v2.y);\r\n  v2.x /= v2.len;\r\n  v2.y /= v2.len;\r\n\r\n  let dp = v1.x * v2.x + v1.y * v2.y;\r\n  let angle = Math.acos(dp);\r\n\r\n  let cp = crossProduct2d(v1, v2);\r\n\r\n  return {\r\n    angle: angle,\r\n    crossProduct: cp,\r\n  };\r\n}\r\nlet mouseOverTower = null;\r\n\r\nfunction canCreated(towers) {\r\n  let towersLength = towers.length;\r\n  for (let i = 0; i < towersLength; i++) {\r\n    if (\r\n      isColliding2(\r\n        mouse.x,\r\n        mouse.y,\r\n        mouse.width,\r\n        towers[i].specs.center.x - 25,\r\n        towers[i].specs.center.y - 25,\r\n        50\r\n      )\r\n    ) {\r\n      mouseOverTower = towers[i];\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction findSelectedTower(towers) {\r\n  if (!mouse.isActive) {\r\n    if (!canCreated(towers)) {\r\n      towerClicked = mouseOverTower;\r\n    }\r\n  }\r\n}\r\n\r\n"]}