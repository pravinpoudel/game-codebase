{"version":3,"sources":["initialize.js"],"names":["context","canvas","document","getElementById","manager","window","Manager","href","activeButton","lastIndexOf","renderCircle","substring","firstTime","selectedTower","moneyRequired","bombAffectRadius","mouseCapture","gameSound","wave","maxWave","creepGoing","towerClicked","towerElements2","towerElements","startButton","cellWidth","rows","totalCreepKilled","cols","topOffset","leftOffset","undefined","y","width","height","isActive","towerRadius","nextWave","towerTypeSelected","getBoundingClientRect","localStorage","setItem","getItem","screens","gameplay","help","Help","highscores","HighScoreMenu","control","Control","mainmenu","MainMenu","about","About","isColliding3","x1","y1","w1","h1","x2","y2","w2","h2","console","isColliding2","r2Width","width2","width1","drawRectangle","fillStyle","isColliding","r1","r2","radius","r1X","player","specs","center","x","Math","floor","size","r1Y","drawTower","image","GameState","assets","baseSprite","r2X","r2Y","generateRandom","r1Width","difference","min","random","spec","crossProduct2d","fill","v1","strokeStyle","stroke","normalize","direction","drawImage","mouse","testTolerance","beginPath","arc","PI","arguments","length","v2","angle","acos","cp","crossProduct","distance","value","test","tolerance","canCreated","towers","computeAngle","rotation","ptCenter","ptTarget","cos","sin","findSelectedTower","len","sqrt","dp","input","Keyboard","GamePlay","mouseOverTower","towersLength","i"],"mappings":"aAAA,IACIA,QADAC,OAASC,SAASC,eAAe,eAAjCF,QAASC,IAAAA,QACTF,aAAJ,KACII,KAAOC,OAAOC,SAAlBC,KACIC,IAAAA,KAAAA,UAAJ,EAAAD,KAAAE,YAAA,MAAA,IAIAC,YAFAA,cAAeC,GAGfC,cAAA,KACAC,cAAa,EAGbC,kBAAA,EAEAC,UAJAC,aAAe,KAKfC,WAAY,MAGZC,QAAA,EACAC,WAHAC,iBALAC,cAAe,GAaf,IAsBAC,eACAC,cAEAC,YAzBMC,UAAN,GACMC,KARNC,KAAAA,GASMC,KAAN,GACIC,UAAY,IACZC,WAAa,GAGZC,MADS,CAEZC,OAAGD,EACHE,OAAAA,EACAC,MAAM,GACNC,OAAQ,GALVA,SATAC,QADAC,YAPAC,iBAAiB,MA4BbhB,QAAAA,GACAC,eAAJtB,OAAAsC,wBAgCEC,aAAaC,QAAQ,YAGvBD,aAAAC,QAAA,UAAA,KAEAD,aAAAE,QAAA,SACAF,aAAAC,QAAA,OAAA,KAGAD,aAAAE,QAAA,UATEF,aAAaC,QAAQ,QAAS,KAsBhCE,UAAQC,KAARxC,QAIA,IAAAuC,QAAA,CACAE,KAAA,IAAAC,KAAA1C,SACA2C,WAAA,IAAAC,cAAA5C,SACA6C,QAAA,IAAAC,QAAA9C,SACA+C,SAAA,IAAAC,SAAAhD,SACAiD,MAAA,IAAAC,MAAAlD,UA6BE,SAAAmD,aAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAP,EAAAI,EAAAE,GAAAF,EAAAJ,EAAAE,GAAAD,EAAAI,EAAAE,GAAAF,EAAAJ,EAAAE,EApBE,OAAO,EAwBTK,SAAOC,aAAPT,EAAsBU,EAAAA,EAAtBN,EAAAC,EAAAM,GACA,QAMDX,EAAAY,GAAAR,GAxBSA,EAAKO,GAAXX,GAyBJC,EAASY,GAAAA,GACCC,EAART,GAAA7D,GAKD,SAAAuE,YAAAC,EAAAC,EAAAC,GAxBC,IAAIC,EAAMH,EAAGI,OAAOC,MAAMC,OAAOC,EAAIC,KAAKC,MAAMT,EAAGI,OAAOC,MAAMK,KAAKH,EAAI,GA0B3EI,EAASC,EAAAA,OAAUV,MAAQI,OAAA9C,EAAAgD,KAAAC,MAAAT,EAAAI,OAAAC,MAAAK,KAAAlD,EAAA,GACrBqD,EAAQC,EAAAA,OAAUC,MAAO1E,KAAAA,EAU7Bb,EAAAyE,EAAAe,WAAAH,MAAApD,MACDwD,EAAAhB,EAAAI,MAAAC,OAAAC,EAAAb,EA7BKwB,EAAMjB,EAAGI,MAAMC,OAAO9C,EAAIkC,EA+BU,OAA1CF,QAAS2B,IAAAA,EAAAA,EAATzB,KAA0CS,EAAAiB,GAAAH,EAAAf,GACpCmB,EAAU3B,EAAS4B,GAAvBnB,GACAQ,EAAIY,GAAcA,EAALrB,GACJM,EAAAU,EAAWK,GAApBA,GAzBF,SAAS1B,cAAc2B,GA6BvBhG,QAASiG,UAAAA,EAATC,KACElG,QAAOmG,SAAUnE,EAAImE,EAAAH,EAAShE,EAA9BgE,EAAA/D,MAAA+D,EAAA9D,QA1BAlC,QAAQoG,YAAcJ,EAAKK,OA6B7BrG,QAASsG,WAAUC,EAAAA,EAAnBP,EAA8BhE,EAAAgE,EAAA/D,MAAA+D,EAAA9D,QAK5BqE,SAAAA,UAAcA,GACd,IAAAlB,EAAOkB,UAAPhB,OAAA1E,eACDb,QAAAwG,UA7BGnB,EA+BJoB,MAASC,EAAAA,EAAAA,MAAT,EACED,MAAQzE,EAAJqD,EAAcnD,OAAd,EACFmD,EAAApD,MADFoD,EAEOnD,QAENlC,QAAA2G,YACF3G,QAAA4G,IAAAH,MAAA1B,EAAA0B,MAAAzE,EAAA0C,EAAA,EAAA,EAAAM,KAAA6B,IAAA,GA7BC7G,QAAQqG,SAiCNtB,SAAGC,iBADI,IACJc,EADI,EAAAgB,UAAAC,aAAAhF,IAAA+E,UAAA,GAAAA,UAAA,GAAA,EAENjB,GAFM,EAAAiB,UAAAC,aAAAhF,IAAA+E,UAAA,GAAAA,UAAA,GAAA,GAEJhB,EAFLC,EAAAf,KAAAe,SAKEhB,OADFgB,EAASf,KAAAC,MAAAc,EAAAF,GAAAC,EAKTkB,SAAAf,eAAsBlB,EAAIiC,GAC1BA,OAAAb,EAAUpB,EAAViC,EAAAhF,EAAAmE,EAAAnE,EAAAgF,EAAAjC,EAIA,SAAIkC,UAAaC,GAEjB,IAAIC,EAAKlB,KAAAA,KAETM,EAAOxB,EAAAwB,EAAAxB,EAAAwB,EAAAvE,EAAAuE,EAAAvE,GAIR,OAFGoF,EAAAA,EAAYb,EAAEY,EAAAA,EAFTZ,EAAPvE,EAAAuE,EAAAvE,EAAAqF,EAIDd,EA/BD,SAASG,cAAcY,EAAOC,EAAMC,GAkCpC,OAAAxC,KAASyC,IAAAA,EAAWC,GAAQF,EAevB,SAAAG,aAAAC,EAAAC,EAAAC,GACF,IAAA3B,EAAA,CAxCCpB,EAAGC,KAAK+C,IAAIH,GAyCd5F,EAAAgD,KAAOgD,IAAPJ,IAtCIZ,EAAK,CAyCXjC,EAAA+C,EAASG,EAAAA,EAAkBP,EACzB1F,EAAKyE,EAAMtE,EAAAA,EAAUH,GAIlBgF,EAHDkB,IAGOlD,KAAAmD,KAAAnB,EAAAjC,EAAAiC,EAAAjC,EAAAiC,EAAAhF,EAAAgF,EAAAhF,GACLX,EAAAA,GAAAA,EAAAA,IACAP,EAAAA,GAAAA,EAAAA,IAEH,IAAAsH,EAAAjC,EAAApB,EAAAiC,EAAAjC,EAAAoB,EAAAnE,EAAAgF,EAAAhF,EApCD,MAAO,CACLiF,MAoCHjC,KAAAkC,KAAAkB,GAnCGhB,aAJOnB,eAAeE,EAAIa,IAzG9B1B,UAAA+C,MAAA,IAAAC,SACA3F,QAAAC,SAAA,IAAA2F,SAAAnI,QAAAkF,UAAA+C,OACA/C,UAAA3C,QAAAA,QA8GA,IAAI6F,eAAiB,KAErB,SAASf,WAAWC,GAElB,IADA,IAAIe,EAAef,EAAOX,OACjB2B,EAAI,EAAGA,EAAID,EAAcC,IAChC,GACEzE,aACEwC,MAAM1B,EACN0B,MAAMzE,EACNyE,MAAMxE,MACNyF,EAAOgB,GAAG7D,MAAMC,OAAOC,EAAI,GAC3B2C,EAAOgB,GAAG7D,MAAMC,OAAO9C,EAAI,GAC3B,IAIF,OADAwG,eAAiBd,EAAOgB,IACjB,EAGX,OAAO,EAGT,SAAST,kBAAkBP,GACpBjB,MAAMtE,WACJsF,WAAWC,IAIdrG,cAAe,EACfP,cAAgB,GAJhBO,aAAemH","file":"initialize.min.js","sourcesContent":["let canvas = document.getElementById(\"canvas-main\");\r\nlet context;\r\nlet manager = new Manager();\r\nlet activeButton = null;\r\nvar href = window.location.href;\r\nvar dir = href.substring(0, href.lastIndexOf(\"/\")) + \"/\";\r\n\r\nrenderCircle = false;\r\nfirstTime = true;\r\nselectedTower = null;\r\nmouseCapture = false;\r\ntowerClicked = null;\r\nmoneyRequired = 0;\r\ntowerTypeSelected = 1;\r\nbombAffectRadius = 100;\r\ngameSound = null;\r\ncreepGoing = \"top\";\r\ntotalCreepKilled = 0;\r\nwave = 10;\r\nmaxWave = 3;\r\nnextWave = true;\r\ntowerRadius = 100;\r\nblock = false;\r\n\r\nconst cellWidth = 50;\r\nconst rows = 10;\r\nconst cols = 10;\r\nlet topOffset = 250;\r\nlet leftOffset = 50;\r\n\r\nconst mouse = {\r\n  x: undefined,\r\n  y: undefined,\r\n  width: 0.1,\r\n  height: 0.1,\r\n  isActive: false,\r\n};\r\n\r\nconst cellSet = [];\r\nconst canvasPosition = canvas.getBoundingClientRect();\r\n\r\nvar towerElements2;\r\nvar towerElements;\r\nvar startButton;\r\n\r\n// canvas.addEventListener(\"mousedown\", function (e) {\r\n//   mouse.isActive = true;\r\n// });\r\n\r\n// canvas.addEventListener(\"mousemove\", function (e) {\r\n//   mouse.x = e.x - canvasPosition.left;\r\n//   mouse.y = e.y - canvasPosition.top;\r\n// });\r\n\r\n// canvas.addEventListener(\"click\", handleClick);\r\n\r\n// function handleClick(event) {\r\n//   mouse.x = event.offsetX;\r\n//   mouse.y = event.offsetY;\r\n//   console.log(mouse.x, mouse.y);\r\n// }\r\n\r\n// canvas.addEventListener(\"mouseleave\", function () {\r\n//   mouse.x = undefined;\r\n//   mouse.y = undefined;\r\n// });\r\n\r\nif (!localStorage.getItem(\"upgrade\")) {\r\n  localStorage.setItem(\"upgrade\", \"u\");\r\n}\r\nif (!localStorage.getItem(\"sell\")) {\r\n  localStorage.setItem(\"sell\", \"s\");\r\n}\r\nif (!localStorage.getItem(\"start\")) {\r\n  localStorage.setItem(\"start\", \"r\");\r\n}\r\n\r\n// console.log(\r\n//   localStorage[\"upgrade\"],\r\n//   localStorage[\"shell\"],\r\n//   localStorage[\"start\"]\r\n// );\r\n\r\n// window.addEventListener(\"resize\", resizeCanvas, false);\r\n\r\nGameState.menu = manager;\r\n\r\nlet screens = {\r\n  help: new Help(manager),\r\n  highscores: new HighScoreMenu(manager),\r\n  control: new Control(manager),\r\n  mainmenu: new MainMenu(manager),\r\n  about: new About(manager),\r\n};\r\n\r\nGameState.input = new Keyboard();\r\nscreens.gameplay = new GamePlay(manager, GameState.input);\r\nGameState.screens = screens;\r\n\r\n// function resizeCanvas() {\r\n//   if (canvas) {\r\n//     canvas.width = window.innerWidth;\r\n//     canvas.height = window.innerHeight;\r\n//     context = canvas.getContext(\"2d\");\r\n//     console.log(canvas);\r\n//   }\r\n// }\r\n// resizeCanvas();\r\n\r\n//------------------------------------------------------\r\n// r2.specs.center.y > r1.specs.y + r1.specs.size.y ||\r\n// r2.specs.center.y + r2.specs.size.y < r1.specs.center.y\r\n\r\nfunction isColliding3(x1, y1, w1, h1, x2, y2, w2, h2) {\r\n  if (x1 < x2 + w2 && x1 + w1 > x2 && y1 < y2 + h2 && y1 + h1 > y2) {\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction isColliding2(x1, y1, width1, x2, y2, width2) {\r\n  return !(\r\n    x1 + width1 <= x2 ||\r\n    x1 >= x2 + width2 ||\r\n    y1 + width1 <= y2 ||\r\n    y1 >= width2 + y2\r\n  );\r\n}\r\n\r\nfunction isColliding(r1, r2, radius) {\r\n  let r1X = r1.player.specs.center.x - Math.floor(r1.player.specs.size.x / 2);\r\n  let r1Y = r1.player.specs.center.y - Math.floor(r1.player.specs.size.y / 2);\r\n  let r1Width = r1.player.specs.size.x;\r\n\r\n  // let r2X = r2.player.specs.center.x - Math.floor(r2.player.specs.size.x / 2);\r\n  // let r2Y = r2.player.specs.center.y - Math.floor(r2.player.specs.size.y / 2);\r\n  // let r2Width = r2.player.specs.size.x;\r\n  let r2Width = r2.baseSprite.image.width;\r\n  let r2X = r2.specs.center.x - r2Width;\r\n  let r2Y = r2.specs.center.y - r2Width;\r\n  console.log(r2X, r2Y, r2Width);\r\n  return !(\r\n    r1X + r1Width <= r2X - radius ||\r\n    r1X >= r2X + r2Width + radius ||\r\n    r1Y + r1Width <= r2Y - radius ||\r\n    r1Y >= r2Width + r2Y + radius\r\n  );\r\n}\r\nfunction drawRectangle(spec) {\r\n  context.fillStyle = spec.fill;\r\n  context.fillRect(spec.x, spec.y, spec.width, spec.height);\r\n\r\n  context.strokeStyle = spec.stroke;\r\n  context.strokeRect(spec.x, spec.y, spec.width, spec.height);\r\n}\r\n\r\nfunction drawTower(radius) {\r\n  let image = GameState.assets[selectedTower];\r\n  context.drawImage(\r\n    image,\r\n    mouse.x - image.width / 2, // Where to draw the sub-texture\r\n    mouse.y - image.height / 2,\r\n    image.width,\r\n    image.height\r\n  );\r\n  context.beginPath();\r\n  context.arc(mouse.x, mouse.y, radius, 0, 2 * Math.PI, false);\r\n  context.stroke();\r\n}\r\n\r\nfunction generateRandom(min = 4, max = 8) {\r\n  let difference = max - min;\r\n  let random = Math.random();\r\n  random = Math.floor(random * difference) + min;\r\n  return random;\r\n}\r\n\r\nfunction crossProduct2d(v1, v2) {\r\n  return v1.x * v2.y - v1.y * v2.x;\r\n}\r\n\r\nfunction normalize(direction) {\r\n  let distance = Math.sqrt(\r\n    direction.x * direction.x + direction.y * direction.y\r\n  );\r\n  direction.x = direction.x / distance;\r\n  direction.y = direction.y / distance;\r\n  return direction;\r\n}\r\n\r\nfunction testTolerance(value, test, tolerance) {\r\n  if (Math.abs(value - test) < tolerance) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction computeAngle(rotation, ptCenter, ptTarget) {\r\n  let v1 = {\r\n    x: Math.cos(rotation),\r\n    y: Math.sin(rotation),\r\n  };\r\n  let v2 = {\r\n    x: ptTarget.x - ptCenter.x,\r\n    y: ptTarget.y - ptCenter.y,\r\n  };\r\n\r\n  v2.len = Math.sqrt(v2.x * v2.x + v2.y * v2.y);\r\n  v2.x /= v2.len;\r\n  v2.y /= v2.len;\r\n\r\n  let dp = v1.x * v2.x + v1.y * v2.y;\r\n  let angle = Math.acos(dp);\r\n\r\n  let cp = crossProduct2d(v1, v2);\r\n\r\n  return {\r\n    angle: angle,\r\n    crossProduct: cp,\r\n  };\r\n}\r\nlet mouseOverTower = null;\r\n\r\nfunction canCreated(towers) {\r\n  let towersLength = towers.length;\r\n  for (let i = 0; i < towersLength; i++) {\r\n    if (\r\n      isColliding2(\r\n        mouse.x,\r\n        mouse.y,\r\n        mouse.width,\r\n        towers[i].specs.center.x - 25,\r\n        towers[i].specs.center.y - 25,\r\n        50\r\n      )\r\n    ) {\r\n      mouseOverTower = towers[i];\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction findSelectedTower(towers) {\r\n  if (!mouse.isActive) {\r\n    if (!canCreated(towers)) {\r\n      towerClicked = mouseOverTower;\r\n\r\n    } else {\r\n      towerClicked = false;\r\n      moneyRequired = 0;\r\n    }\r\n  }\r\n}\r\n\r\n"]}