{"version":3,"sources":["initialize.js"],"names":["context","canvas","document","getElementById","manager","window","Manager","href","activeButton","lastIndexOf","renderCircle","substring","firstTime","selectedTower","mouseCapture","cellWidth","rows","cols","topOffset","leftOffset","undefined","y","towerClicked","width","height","isActive","cellSet","canvasPosition","getBoundingClientRect","localStorage","getItem","setItem","console","GameState","control","mainmenu","about","About","menu","screens","help","Help","highscores","HighScoreMenu","Control","MainMenu","drawRectangle","x1","spec","width1","x2","y2","width2","strokeStyle","strokeRect","y1","image","src","radius","drawImage","mouse","x","r1","player","specs","size","center","beginPath","r2Width","generateRandom","min","r2","max","r1X","random","Math","floor","r1Y","r2Y","v1","fillStyle","fill","fillRect","distance","sqrt","direction","drawTower","Image","testTolerance","computeAngle","arc","PI","arguments","length","difference","ptCenter","v2","crossProduct2d","angle","acos","normalize","crossProduct","cp","mouseOverTower","value","test","tolerance","i","towersLength","rotation","ptTarget","cos","findSelectedTower","canCreated","len","dp","input","Keyboard","log","gameplay","isColliding2","towers"],"mappings":"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","file":"initialize.min.js","sourcesContent":["let canvas = document.getElementById(\"canvas-main\");\r\nlet context;\r\nlet manager = new Manager();\r\nlet activeButton = null;\r\nvar href = window.location.href;\r\nvar dir = href.substring(0, href.lastIndexOf(\"/\")) + \"/\";\r\n\r\nrenderCircle = false;\r\nfirstTime = true;\r\nselectedTower = null;\r\nmouseCapture = false;\r\ntowerClicked = null;\r\nmoneyRequired = 0;\r\n\r\nconst cellWidth = 50;\r\nconst rows = 10;\r\nconst cols = 10;\r\nlet topOffset = 250;\r\nlet leftOffset = 50;\r\n\r\nconst mouse = {\r\n  x: undefined,\r\n  y: undefined,\r\n  width: 0.1,\r\n  height: 0.1,\r\n  isActive: false,\r\n};\r\n\r\nconst cellSet = [];\r\nconst canvasPosition = canvas.getBoundingClientRect();\r\n\r\n// canvas.addEventListener(\"mousedown\", function (e) {\r\n//   mouse.isActive = true;\r\n// });\r\n\r\n// canvas.addEventListener(\"mousemove\", function (e) {\r\n//   mouse.x = e.x - canvasPosition.left;\r\n//   mouse.y = e.y - canvasPosition.top;\r\n// });\r\n\r\n// canvas.addEventListener(\"click\", handleClick);\r\n\r\n// function handleClick(event) {\r\n//   mouse.x = event.offsetX;\r\n//   mouse.y = event.offsetY;\r\n//   console.log(mouse.x, mouse.y);\r\n// }\r\n\r\n// canvas.addEventListener(\"mouseleave\", function () {\r\n//   mouse.x = undefined;\r\n//   mouse.y = undefined;\r\n// });\r\n\r\nif (!localStorage.getItem(\"upgrade\")) {\r\n  localStorage.setItem(\"upgrade\", \"u\");\r\n}\r\nif (!localStorage.getItem(\"sell\")) {\r\n  localStorage.setItem(\"sell\", \"s\");\r\n}\r\nif (!localStorage.getItem(\"start\")) {\r\n  localStorage.setItem(\"start\", \"g\");\r\n}\r\n\r\nconsole.log(\r\n  localStorage[\"upgrade\"],\r\n  localStorage[\"shell\"],\r\n  localStorage[\"start\"]\r\n);\r\n\r\n// window.addEventListener(\"resize\", resizeCanvas, false);\r\n\r\nGameState.menu = manager;\r\n\r\nlet screens = {\r\n  help: new Help(manager),\r\n  highscores: new HighScoreMenu(manager),\r\n  control: new Control(manager),\r\n  mainmenu: new MainMenu(manager),\r\n  about: new About(manager),\r\n};\r\n\r\nGameState.input = new Keyboard();\r\nconsole.log(GameState.input);\r\nscreens.gameplay = new GamePlay(manager, GameState.input);\r\nGameState.screens = screens;\r\n\r\n// function resizeCanvas() {\r\n//   if (canvas) {\r\n//     canvas.width = window.innerWidth;\r\n//     canvas.height = window.innerHeight;\r\n//     context = canvas.getContext(\"2d\");\r\n//     console.log(canvas);\r\n//   }\r\n// }\r\n// resizeCanvas();\r\n\r\n//------------------------------------------------------\r\n// r2.specs.center.y > r1.specs.y + r1.specs.size.y ||\r\n// r2.specs.center.y + r2.specs.size.y < r1.specs.center.y\r\n\r\nfunction isColliding2(x1, y1, width1, x2, y2, width2) {\r\n  return !(\r\n    x1 + width1 <= x2 ||\r\n    x1 >= x2 + width2 ||\r\n    y1 + width1 <= y2 ||\r\n    y1 >= width2 + y2\r\n  );\r\n}\r\n\r\nfunction isColliding(r1, r2, radius) {\r\n  let r1X = r1.player.specs.center.x - Math.floor(r1.player.specs.size.x / 2);\r\n  let r1Y = r1.player.specs.center.y - Math.floor(r1.player.specs.size.y / 2);\r\n  let r1Width = r1.player.specs.size.x;\r\n\r\n  // let r2X = r2.player.specs.center.x - Math.floor(r2.player.specs.size.x / 2);\r\n  // let r2Y = r2.player.specs.center.y - Math.floor(r2.player.specs.size.y / 2);\r\n  // let r2Width = r2.player.specs.size.x;\r\n  let r2Width = r2.baseSprite.image.width;\r\n  let r2X = r2.specs.center.x - r2Width;\r\n  let r2Y = r2.specs.center.y - r2Width;\r\n  return !(\r\n    r1X + r1Width <= r2X - radius ||\r\n    r1X >= r2X + r2Width + radius ||\r\n    r1Y + r1Width <= r2Y - radius ||\r\n    r1Y >= r2Width + r2Y + radius\r\n  );\r\n}\r\nfunction drawRectangle(spec) {\r\n  context.fillStyle = spec.fill;\r\n  context.fillRect(spec.x, spec.y, spec.width, spec.height);\r\n\r\n  context.strokeStyle = spec.stroke;\r\n  context.strokeRect(spec.x, spec.y, spec.width, spec.height);\r\n}\r\n\r\nfunction drawTower(radius) {\r\n  let image = new Image();\r\n  image.src = selectedTower;\r\n  context.drawImage(\r\n    image,\r\n    mouse.x - image.width / 2, // Where to draw the sub-texture\r\n    mouse.y - image.height / 2,\r\n    image.width,\r\n    image.height\r\n  );\r\n  context.beginPath();\r\n  context.arc(mouse.x, mouse.y, radius, 0, 2 * Math.PI, false);\r\n  context.stroke();\r\n}\r\n\r\nfunction generateRandom(min = 4, max = 7) {\r\n  let difference = max - min;\r\n  let random = Math.random();\r\n  random = Math.floor(random * difference) + min;\r\n  return random;\r\n}\r\n\r\nfunction crossProduct2d(v1, v2) {\r\n  return v1.x * v2.y - v1.y * v2.x;\r\n}\r\n\r\nfunction normalize(direction) {\r\n  let distance = Math.sqrt(\r\n    direction.x * direction.x + direction.y * direction.y\r\n  );\r\n  direction.x = direction.x / distance;\r\n  direction.y = direction.y / distance;\r\n  return direction;\r\n}\r\n\r\nfunction testTolerance(value, test, tolerance) {\r\n  if (Math.abs(value - test) < tolerance) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction computeAngle(rotation, ptCenter, ptTarget) {\r\n  let v1 = {\r\n    x: Math.cos(rotation),\r\n    y: Math.sin(rotation),\r\n  };\r\n  let v2 = {\r\n    x: ptTarget.x - ptCenter.x,\r\n    y: ptTarget.y - ptCenter.y,\r\n  };\r\n\r\n  v2.len = Math.sqrt(v2.x * v2.x + v2.y * v2.y);\r\n  v2.x /= v2.len;\r\n  v2.y /= v2.len;\r\n\r\n  let dp = v1.x * v2.x + v1.y * v2.y;\r\n  let angle = Math.acos(dp);\r\n\r\n  let cp = crossProduct2d(v1, v2);\r\n\r\n  return {\r\n    angle: angle,\r\n    crossProduct: cp,\r\n  };\r\n}\r\nlet mouseOverTower = null;\r\n\r\nfunction canCreated(towers) {\r\n  let towersLength = towers.length;\r\n  for (let i = 0; i < towersLength; i++) {\r\n    if (\r\n      isColliding2(\r\n        mouse.x,\r\n        mouse.y,\r\n        mouse.width,\r\n        towers[i].specs.center.x - 25,\r\n        towers[i].specs.center.y - 25,\r\n        50\r\n      )\r\n    ) {\r\n      mouseOverTower = towers[i];\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction findSelectedTower(towers) {\r\n  if (!mouse.isActive) {\r\n    if (!canCreated(towers)) {\r\n      towerClicked = mouseOverTower;\r\n    }\r\n  }\r\n}\r\n\r\n"]}