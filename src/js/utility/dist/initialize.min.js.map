{"version":3,"sources":["initialize.js"],"names":["context","canvas","document","getElementById","manager","window","Manager","href","activeButton","lastIndexOf","renderCircle","substring","firstTime","mouse","x","undefined","y","width","height","isActive","selectedTower","canvasPosition","getBoundingClientRect","localStorage","getItem","setItem","GameState","highscores","control","mainmenu","about","About","screens","help","Help","HighScoreMenu","Control","MainMenu","isColliding2","x1","y1","width1","x2","y2","width2","fillRect","strokeStyle","strokeRect","image","Image","r2","radius","r1","center","Math","floor","player","specs","size","drawImage","r2Width","baseSprite","r2X","crossProduct2d","v2","r2Y","r1X","r1Width","normalize","direction","r1Y","distance","drawRectangle","spec","fillStyle","fill","testTolerance","value","test","tolerance","stroke","drawTower","src","computeAngle","sin","rotation","ptTarget","beginPath","arc","PI","angle","dp","v1","crossProduct","cp","sqrt","abs","ptCenter","cos","len","acos","input","Keyboard","console","log","gameplay","GamePlay"],"mappings":"aAAA,IACIA,QADAC,OAASC,SAASC,eAAe,eAAjCF,QAASC,IAAAA,QACTF,aAAJ,KACII,KAAOC,OAAOC,SAAlBC,KACIC,IAAAA,KAAAA,UAAJ,EAAAD,KAAAE,YAAA,MAAA,IAIAC,YAFAA,cAAeC,GAGfC,cAAA,KAIA,IAAMC,MAAQ,CACZC,OAAGC,EACHC,OAAGD,EACHE,MAAO,GACPC,OAAQ,GACRC,SARFC,cAAa,GAcbC,eAAApB,OAAAqB,wBAqBKC,aAAaC,QAAQ,YAM1BD,aAAKA,QAAaC,UAAlB,KAECD,aAAAC,QAAA,SAJCD,aAAaE,QAAQ,OAAQ,KAE1BF,aAAaC,QAAQ,UAY1BE,aAAAD,QAAiBrB,QAAjB,KAIEuB,QAAAA,IACAC,aAAS,QACTC,aAAU,MACVC,aAAWC,OAMbL,UAAUM,KAAV5B,QAIA,IAAA4B,QAAA,CACAC,KAAA,IAAAC,KAAA9B,SACAuB,WAAA,IAAAQ,cAAA/B,SACAwB,QAAA,IAAAQ,QAAAhC,SACAyB,SAAA,IAAAQ,SAAAjC,SACA0B,MAAA,IAAAC,MAAA3B,UAOA,SAASkC,aAAaC,EAAIC,EAAIC,EAAQC,EAAIC,EAAIC,GA2B9C,QACE5C,EAAOyC,GAAPC,GACQG,EAAAA,GAAR7C,GAEAA,EAAOyC,GAACK,GACAC,EAAAA,GAAR/C,GAIA,SAAIgD,YAAYC,EAAhBC,EAAAC,GACAH,IAAAA,EAAAI,EAAYhC,OAAAA,MAAZiC,OAAAvC,EAAAwC,KAAAC,MAAAH,EAAAI,OAAAC,MAAAC,KAAA5C,EAAA,GACAd,EAAQ2D,EAAAA,OACNX,MACAnC,OAAAG,EAAUgC,KAAM/B,MAANmC,EAFZI,OAE6BC,MAAAC,KAAA1C,EAAA,GAC3BH,EAAUmC,EAAM9B,OAANuC,MACVT,KAAM/B,EAzBJ2C,EAAUV,EAAGW,WAAWb,MAAM/B,MAiCpC6C,EAASC,EAAAA,MAAAA,OAAmBC,EAAIJ,EAC9BK,EAAUnD,EAAH2C,MAAAJ,OAAcrC,EAAS4C,EAC/B,QA/BGM,EAAMC,GAAWL,EAAMX,GAiClBiB,EAAAA,EAAUC,GAAnBH,GACEI,EAAIC,GAAeN,EACjBI,GAEOT,EAAKS,EAAAlB,GAAdkB,GAGD,SAAAG,cAAAC,GAjCCzE,QAAQ0E,UAAYD,EAAKE,KAmC3B3E,QAAS4E,SAAAA,EAAcC,EAAAA,EAAOC,EAA9BL,EAAoCM,MAAWN,EAAAvD,QAE3ClB,QAAA8C,YAAA2B,EAAAO,OACDhF,QAAM+C,WAAA0B,EAAA3D,EAAA2D,EAAAzD,EAAAyD,EAAAxD,MAAAwD,EAAAvD,QAGR,SAAA+D,UAAA9B,GAjCC,IAAIH,EAAQ,IAAIC,MAmClBD,EAAAkC,IAASC,cACPnF,QAAM2D,UACJ7C,EACAE,MAAGsC,EAAK8B,EAAIC,MAAT,EAFLxE,MAAAG,EAAAgC,EAAA9B,OAAA,EAIA8B,EAAM/B,MACJH,EAAGwE,QADItF,QAATuF,YAKAvB,QAAAwB,IAASlC,MAAAxC,EAAYD,MAAKmD,EAAPb,EAAc,EAAOa,EAAxCV,KAAAmC,IAAA,GACAzB,QAAQA,SAIR,SAAI0B,eAAkBC,EAAtB3B,GAEA,OAAM4B,EAAG7B,EAAAA,EAAAA,EAAAA,EAAe6B,EAAI5B,EAA5BlD,EAIE+E,SAAAA,UAAcC,GAFT,IAAPvB,EAAAjB,KAAAyC,KAID1B,EAAAvD,EAAAuD,EAAAvD,EAAAuD,EAAArD,EAAAqD,EAAArD,GAlCC,OAFAqD,EAAUvD,EAAIuD,EAAUvD,EAAIyD,EAC5BF,EAAUrD,EAAIqD,EAAUrD,EAAIuD,EACrBF,EAGT,SAASO,cAAcC,EAAOC,EAAMC,GAClC,OAAIzB,KAAK0C,IAAInB,EAAQC,GAAQC,EAO/B,SAASI,aAAaE,EAAUY,EAAUX,GACxC,IAAIM,EAAK,CACP9E,EAAGwC,KAAK4C,IAAIb,GACZrE,EAAGsC,KAAK8B,IAAIC,IAEVrB,EAAK,CACPlD,EAAGwE,EAASxE,EAAImF,EAASnF,EACzBE,EAAGsE,EAAStE,EAAIiF,EAASjF,GAG3BgD,EAAGmC,IAAM7C,KAAKyC,KAAK/B,EAAGlD,EAAIkD,EAAGlD,EAAIkD,EAAGhD,EAAIgD,EAAGhD,GAC3CgD,EAAGlD,GAAKkD,EAAGmC,IACXnC,EAAGhD,GAAKgD,EAAGmC,IAEX,IAAIR,EAAKC,EAAG9E,EAAIkD,EAAGlD,EAAI8E,EAAG5E,EAAIgD,EAAGhD,EAKjC,MAAO,CACL0E,MALUpC,KAAK8C,KAAKT,GAMpBE,aAJO9B,eAAe6B,EAAI5B,IA3F9BtC,UAAA2E,MAAA,IAAAC,SACAC,QAAAC,IAAA9E,UAAA2E,OAfArE,QAAQyE,SAAW,IAAIC,SAAStG,QAASsB,UAAU2E,OAiBnD3E,UAASY,QAAAA","file":"initialize.min.js","sourcesContent":["let canvas = document.getElementById(\"canvas-main\");\r\nlet context;\r\nlet manager = new Manager();\r\nlet activeButton = null;\r\nvar href = window.location.href;\r\nvar dir = href.substring(0, href.lastIndexOf(\"/\")) + \"/\";\r\n\r\nrenderCircle = false;\r\nfirstTime = true;\r\nselectedTower = null;\r\nmouseCapture = false;\r\n\r\nconst mouse = {\r\n  x: undefined,\r\n  y: undefined,\r\n  width: 0.1,\r\n  height: 0.1,\r\n  isActive: false,\r\n};\r\n\r\nconst canvasPosition = canvas.getBoundingClientRect();\r\n\r\n// canvas.addEventListener(\"mousedown\", function (e) {\r\n//   mouse.isActive = true;\r\n// });\r\n\r\n// canvas.addEventListener(\"mousemove\", function (e) {\r\n//   mouse.x = e.x - canvasPosition.left;\r\n//   mouse.y = e.y - canvasPosition.top;\r\n// });\r\n\r\n// canvas.addEventListener(\"click\", handleClick);\r\n\r\n// function handleClick(event) {\r\n//   mouse.x = event.offsetX;\r\n//   mouse.y = event.offsetY;\r\n//   console.log(mouse.x, mouse.y);\r\n// }\r\n\r\n// canvas.addEventListener(\"mouseleave\", function () {\r\n//   mouse.x = undefined;\r\n//   mouse.y = undefined;\r\n// });\r\n\r\nif (!localStorage.getItem(\"upgrade\")) {\r\n  localStorage.setItem(\"upgrade\", \"u\");\r\n}\r\nif (!localStorage.getItem(\"sell\")) {\r\n  localStorage.setItem(\"sell\", \"s\");\r\n}\r\nif (!localStorage.getItem(\"start\")) {\r\n  localStorage.setItem(\"start\", \"g\");\r\n}\r\n\r\nconsole.log(\r\n  localStorage[\"upgrade\"],\r\n  localStorage[\"shell\"],\r\n  localStorage[\"start\"]\r\n);\r\n\r\n// window.addEventListener(\"resize\", resizeCanvas, false);\r\n\r\nGameState.menu = manager;\r\n\r\nlet screens = {\r\n  help: new Help(manager),\r\n  highscores: new HighScoreMenu(manager),\r\n  control: new Control(manager),\r\n  mainmenu: new MainMenu(manager),\r\n  about: new About(manager),\r\n};\r\n\r\nGameState.input = new Keyboard();\r\nconsole.log(GameState.input);\r\nscreens.gameplay = new GamePlay(manager, GameState.input);\r\nGameState.screens = screens;\r\n\r\n// function resizeCanvas() {\r\n//   if (canvas) {\r\n//     canvas.width = window.innerWidth;\r\n//     canvas.height = window.innerHeight;\r\n//     context = canvas.getContext(\"2d\");\r\n//     console.log(canvas);\r\n//   }\r\n// }\r\n// resizeCanvas();\r\n\r\n//------------------------------------------------------\r\n// r2.specs.center.y > r1.specs.y + r1.specs.size.y ||\r\n// r2.specs.center.y + r2.specs.size.y < r1.specs.center.y\r\n\r\nfunction isColliding2(x1, y1, width1, x2, y2, width2) {\r\n  return !(\r\n    x1 + width1 <= x2 ||\r\n    x1 >= x2 + width2 ||\r\n    y1 + width1 <= y2 ||\r\n    y1 >= width2 + y2\r\n  );\r\n}\r\n\r\nfunction isColliding(r1, r2, radius) {\r\n  let r1X = r1.player.specs.center.x - Math.floor(r1.player.specs.size.x / 2);\r\n  let r1Y = r1.player.specs.center.y - Math.floor(r1.player.specs.size.y / 2);\r\n  let r1Width = r1.player.specs.size.x;\r\n\r\n  // let r2X = r2.player.specs.center.x - Math.floor(r2.player.specs.size.x / 2);\r\n  // let r2Y = r2.player.specs.center.y - Math.floor(r2.player.specs.size.y / 2);\r\n  // let r2Width = r2.player.specs.size.x;\r\n  let r2Width = r2.baseSprite.image.width;\r\n  let r2X = r2.specs.center.x - r2Width;\r\n  let r2Y = r2.specs.center.y - r2Width;\r\n  return !(\r\n    r1X + r1Width <= r2X - radius ||\r\n    r1X >= r2X + r2Width + radius ||\r\n    r1Y + r1Width <= r2Y - radius ||\r\n    r1Y >= r2Width + r2Y + radius\r\n  );\r\n}\r\nfunction drawRectangle(spec) {\r\n  context.fillStyle = spec.fill;\r\n  context.fillRect(spec.x, spec.y, spec.width, spec.height);\r\n\r\n  context.strokeStyle = spec.stroke;\r\n  context.strokeRect(spec.x, spec.y, spec.width, spec.height);\r\n}\r\n\r\nfunction drawTower(radius) {\r\n  let image = new Image();\r\n  image.src = selectedTower;\r\n  context.drawImage(\r\n    image,\r\n    mouse.x - image.width / 2, // Where to draw the sub-texture\r\n    mouse.y - image.height / 2,\r\n    image.width,\r\n    image.height\r\n  );\r\n  context.beginPath();\r\n  context.arc(mouse.x, mouse.y, radius, 0, 2 * Math.PI, false);\r\n  context.stroke();\r\n}\r\n\r\nfunction crossProduct2d(v1, v2) {\r\n  return v1.x * v2.y - v1.y * v2.x;\r\n}\r\n\r\nfunction normalize(direction) {\r\n  let distance = Math.sqrt(\r\n    direction.x * direction.x + direction.y * direction.y\r\n  );\r\n  direction.x = direction.x / distance;\r\n  direction.y = direction.y / distance;\r\n  return direction;\r\n}\r\n\r\nfunction testTolerance(value, test, tolerance) {\r\n  if (Math.abs(value - test) < tolerance) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction computeAngle(rotation, ptCenter, ptTarget) {\r\n  let v1 = {\r\n    x: Math.cos(rotation),\r\n    y: Math.sin(rotation),\r\n  };\r\n  let v2 = {\r\n    x: ptTarget.x - ptCenter.x,\r\n    y: ptTarget.y - ptCenter.y,\r\n  };\r\n\r\n  v2.len = Math.sqrt(v2.x * v2.x + v2.y * v2.y);\r\n  v2.x /= v2.len;\r\n  v2.y /= v2.len;\r\n\r\n  let dp = v1.x * v2.x + v1.y * v2.y;\r\n  let angle = Math.acos(dp);\r\n\r\n  let cp = crossProduct2d(v1, v2);\r\n\r\n  return {\r\n    angle: angle,\r\n    crossProduct: cp,\r\n  };\r\n}\r\n\r\n"]}