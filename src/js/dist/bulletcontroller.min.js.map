{"version":3,"sources":["bulletcontroller.js"],"names":["BulletController","enemies","_classCallCheck","this","bullets","bulletStartX","bulletStartY","creep","power","type","push","timeStamp","bulletLength","length","i","x","canvas","width","y","splice","targetCreep","player","center","specs","Math","floor","size","health","enemiesLength","m","isColliding2","bombAffectRadius","console","flying","log","forEach","bullet","update","draw"],"mappings":"uZAAMA,4BACJ,SAAAA,EAAYC,GAASC,gBAAAC,KAAAH,GACnBG,KAAKC,QAAU,GACfD,KAAKF,QAAUA,yDAGPI,EAAcC,EAAcC,EAAOC,EAAOC,GAClDN,KAAKC,QAAQM,KAPXV,IAAAA,OAAAA,EAQyBM,EAAcC,EAAOC,EAAOC,mCAPpCE,GACnB,IAWA,IAAIC,EAAeT,KAAKC,QAAQS,OAX3BT,EAAL,EAAeU,EAAfF,EAAAE,IAAA,CACA,GAAKb,KAAAA,QAAUA,GAAf,CACD,GAaOE,KAAKC,QAAQU,GAAGC,EAAI,GACpBZ,KAAKC,QAAQU,GAAGC,EAAIC,OAAOC,OAC3Bd,KAAKC,QAAQU,GAAGI,EAAI,GACpBf,KAAKC,QAAQU,GAAGI,EAddb,OAAAA,OACR,CAGDF,KAAAC,QAAAe,OAAAL,EAAA,GAaO,SAEF,GAZAF,aAcIT,KAAKC,QAAQU,GAAGC,EAbnBZ,KAAKC,QAAOU,GAAGF,EACd,EACFT,KACEC,QAAKA,GAALgB,YACAC,OAAKjB,MAALkB,OAAoBN,EAIpBb,KAAKC,QAAQe,GAAAA,YAAbE,OAAAE,MAAAD,OAAAJ,EACAM,KAAAC,MAAAtB,KAAAC,QAAAU,GAAAM,YAAAC,OAAAE,MAAAG,KAAAX,EAAA,IAWA,CAUA,GATA,GAAAZ,KAAAC,QAAAU,GAAAL,OACAN,KAAIC,QAAKA,GAALgB,YAAwBO,QAAGxB,KAAAC,QAAAU,GAAAN,MAC7BL,KAAKC,QAALU,GAAgBM,YAAYO,OAAU,IAEpCxB,KAAKC,QAAQU,GAAGM,YAAYO,OAAS,IAKb,GAAxBxB,KAAKC,QAAQU,GAAGL,KAApB,IACE,IAAImB,EAAgBzB,KAAKF,QAAQY,OAD1BT,EAAAA,EAALyB,EAAgBpB,EAAWoB,IAIzBC,aAFJ3B,KAAS0B,QAAQf,GAAGc,EAClBzB,KACE2B,QAAAA,GACEZ,EAQFa,iBACA5B,KAAKF,QAAQ4B,GAAGF,OAAhBJ,MACED,OAAKrB,EACRE,KAAAF,QAAA4B,GAAAR,OAAAE,MAAAD,OAAAJ,EACFM,KAAAC,MAAAtB,KAAAF,QAAA4B,GAAAR,OAAAE,MAAAG,KAAAX,EAAA,MAGCZ,KAAKC,QAAQU,GAAGL,QAApBN,KAA+BC,QAAAU,GAAAN,MAC7BL,KAAIyB,QAAAA,GAAaD,OANXxB,KAAKF,QAAQ4B,GAAGF,OAAS,EAAI,EAAIxB,KAAKF,QAAQ4B,GAAGF,QAkBnD,GAAA,GAAAxB,KAAAC,QAAAU,GAAAL,KAEE,IADAuB,IAAAA,EAAY7B,KAAAF,QAAAY,OACZgB,EAAK5B,EAAAA,EAAL2B,EAA0BC,IAG3B1B,KAAAF,QAAA4B,GAAAI,SACFH,aACF3B,KAAAC,QAAAU,GAAAC,EACFZ,KAAAC,QAAAU,GAAAI,EAbO,EAeHd,KAAAA,QAALyB,GAAAR,OAAAE,MAAAD,OAAAP,EACCZ,KAAAF,QAAA4B,GAAAR,OAAAE,MAAAD,OAAAJ,EACDN,KAAAA,MAAYT,KAAAF,QAAA4B,GAAAR,OAAAE,MAAAG,KAAAX,EAAA,IAGfiB,QAAAE,IAAA,qBAAAL,GAbW1B,KAAKF,QAAQ4B,GAAGF,QAAUxB,KAAKC,QAAQU,GAAGN,MAcjDJ,KAALH,QAAuBU,GAAAA,OAEzBR,KAAAF,QAAA4B,GAAAF,OAAA,EAAA,EAAAxB,KAAAF,QAAA4B,GAAAF,QAIAxB,KAAKC,QAAQ+B,OAAQrB,EAAA,GACnBsB,IADFxB,IAGD,UATGT,KAAKC,QAAQU,GAAGuB,OAAO1B,qCAMzBR,KAAKC,QAAQ+B,QAAQ,SAACC,GACpBA,EAAOE","file":"bulletcontroller.min.js","sourcesContent":["class BulletController {\r\n  constructor(enemies) {\r\n    this.bullets = [];\r\n    this.enemies = enemies;\r\n  }\r\n\r\n  addBullet(bulletStartX, bulletStartY, creep, power, type) {\r\n    this.bullets.push(\r\n      new Bullet(bulletStartX, bulletStartY, creep, power, type)\r\n    );\r\n  }\r\n\r\n  update(timeStamp) {\r\n    let bulletLength = this.bullets.length;\r\n    for (let i = 0; i < bulletLength; i++) {\r\n      if (this.bullets[i]) {\r\n        if (\r\n          this.bullets[i].x < 0 ||\r\n          this.bullets[i].x > canvas.width ||\r\n          this.bullets[i].y < 0 ||\r\n          this.bullets[i].y > canvas.height\r\n        ) {\r\n          this.bullets.splice(i, 1);\r\n          continue;\r\n        }\r\n        if (\r\n          isColliding2(\r\n            this.bullets[i].x,\r\n            this.bullets[i].y,\r\n            5,\r\n            this.bullets[i].targetCreep.player.specs.center.x,\r\n            this.bullets[i].targetCreep.player.specs.center.y,\r\n            Math.floor(this.bullets[i].targetCreep.player.specs.size.x / 2)\r\n          )\r\n        ) {\r\n          //it is not bomb\r\n          if (this.bullets[i].type == 1) {\r\n            this.bullets[i].targetCreep.health -= this.bullets[i].power;\r\n            if (this.bullets[i].targetCreep.health < 0) {\r\n              this.bullets[i].targetCreep.health = 0;\r\n            }\r\n          }\r\n\r\n          //if guided missile; affect in radius of \"bombAffectRadius\"\r\n          if (this.bullets[i].type == 2) {\r\n            let enemiesLength = this.enemies.length;\r\n            for (let m = 0; m < enemiesLength; m++) {\r\n              if (\r\n                isColliding2(\r\n                  this.bullets[i].x,\r\n                  this.bullets[i].y,\r\n                  bombAffectRadius,\r\n                  this.enemies[m].player.specs.center.x,\r\n                  this.enemies[m].player.specs.center.y,\r\n                  Math.floor(this.enemies[m].player.specs.size.x / 2)\r\n                )\r\n              ) {\r\n                this.enemies[m].health -= this.bullets[i].power;\r\n                this.enemies[m].health =\r\n                  this.enemies[m].health < 0 ? 0 : this.enemies[m].health;\r\n              }\r\n            }\r\n          }\r\n\r\n          if (this.bullets[i].type == 3) {\r\n            let enemiesLength = this.enemies.length;\r\n            for (let m = 0; m < enemiesLength; m++) {\r\n              // if(enemy is flyover)\r\n              if (this.enemies[m].flying) {\r\n                isColliding2(\r\n                  this.bullets[i].x,\r\n                  this.bullets[i].y,\r\n                  5,\r\n                  this.enemies[m].player.specs.center.x,\r\n                  this.enemies[m].player.specs.center.y,\r\n                  Math.floor(this.enemies[m].player.specs.size.x / 2)\r\n                );\r\n                {\r\n                  console.log(\"i am collided with\", m);\r\n                  this.enemies[m].health -= this.bullets[i].power;\r\n                  this.enemies[m].health =\r\n                    this.enemies[m].health < 0 ? 0 : this.enemies[m].health;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          this.bullets.splice(i, 1);\r\n          i--;\r\n          bulletLength--;\r\n          continue;\r\n        }\r\n      }\r\n      this.bullets[i].update(timeStamp);\r\n    }\r\n    //if inside the boundary\r\n  }\r\n\r\n  render() {\r\n    this.bullets.forEach((bullet) => {\r\n      bullet.draw();\r\n    });\r\n  }\r\n}\r\n"]}