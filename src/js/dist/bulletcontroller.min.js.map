{"version":3,"sources":["bulletcontroller.js"],"names":["BulletController","enemies","_classCallCheck","this","bullets","bulletStartX","bulletStartY","creep","power","type","push","timeStamp","console","log","length","bulletLength","i","x","canvas","width","y","Bullet","splice","targetCreep","player","center","specs","Math","floor","size","health","enemiesLength","m","isColliding2","flying","update","bullet","forEach","draw"],"mappings":"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","file":"bulletcontroller.min.js","sourcesContent":["class BulletController {\r\n  constructor(enemies) {\r\n    this.bullets = [];\r\n    this.enemies = enemies;\r\n  }\r\n\r\n  addBullet(bulletStartX, bulletStartY, creep, power, type) {\r\n    this.bullets.push(\r\n      new Bullet(bulletStartX, bulletStartY, creep, power, type)\r\n    );\r\n  }\r\n\r\n  update(timeStamp) {\r\n    console.log(this.enemies.length);\r\n    let bulletLength = this.bullets.length;\r\n    for (let i = 0; i < bulletLength; i++) {\r\n      if (this.bullets[i]) {\r\n        if (\r\n          this.bullets[i].x < 0 ||\r\n          this.bullets[i].x > canvas.width ||\r\n          this.bullets[i].y < 0 ||\r\n          this.bullets[i].y > canvas.height\r\n        ) {\r\n          this.bullets.splice(i, 1);\r\n          continue;\r\n        }\r\n        if (\r\n          isColliding2(\r\n            this.bullets[i].x,\r\n            this.bullets[i].y,\r\n            5,\r\n            this.bullets[i].targetCreep.player.specs.center.x,\r\n            this.bullets[i].targetCreep.player.specs.center.y,\r\n            Math.floor(this.bullets[i].targetCreep.player.specs.size.x / 2)\r\n          )\r\n        ) {\r\n          //it is not bomb\r\n          if (this.bullets[i].type == 1) {\r\n            this.bullets[i].targetCreep.health -= this.bullets[i].power;\r\n            if (this.bullets[i].targetCreep.health < 0) {\r\n              this.bullets[i].targetCreep.health = 0;\r\n            }\r\n          }\r\n\r\n          //if guided missile; affect in radius of \"bombAffectRadius\"\r\n          if (this.bullets[i].type == 2) {\r\n            let enemiesLength = this.enemies.length;\r\n            for (let m = 0; m < enemiesLength; m++) {\r\n              if (\r\n                isColliding2(\r\n                  this.bullets[i].x,\r\n                  this.bullets[i].y,\r\n                  bombAffectRadius,\r\n                  this.enemies[m].player.specs.center.x,\r\n                  this.enemies[m].player.specs.center.y,\r\n                  Math.floor(this.enemies[m].player.specs.size.x / 2)\r\n                )\r\n              ) {\r\n                console.log(\"i am collided with\", m);\r\n                this.enemies[m].health -= this.bullets[i].power;\r\n                this.enemies[m].health =\r\n                  this.enemies[m].health < 0 ? 0 : this.enemies[m].health;\r\n              }\r\n            }\r\n          }\r\n\r\n          if (this.bullets[i].type == 3) {\r\n            let enemiesLength = this.enemies.length;\r\n            for (let m = 0; m < enemiesLength; m++) {\r\n              // if(enemy is flyover)\r\n              console.log(this.enemies[m].flying);\r\n              if (this.enemies[m].flying) {\r\n                isColliding2(\r\n                  this.bullets[i].x,\r\n                  this.bullets[i].y,\r\n                  5,\r\n                  this.enemies[m].player.specs.center.x,\r\n                  this.enemies[m].player.specs.center.y,\r\n                  Math.floor(this.enemies[m].player.specs.size.x / 2)\r\n                );\r\n                {\r\n                  console.log(\"i am collided with\", m);\r\n                  this.enemies[m].health -= this.bullets[i].power;\r\n                  this.enemies[m].health =\r\n                    this.enemies[m].health < 0 ? 0 : this.enemies[m].health;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          this.bullets.splice(i, 1);\r\n          i--;\r\n          bulletLength--;\r\n          continue;\r\n        }\r\n      }\r\n      this.bullets[i].update(timeStamp);\r\n    }\r\n      //if inside the boundary\r\n    } \r\n\r\n  render() {\r\n    this.bullets.forEach((bullet) => {\r\n      bullet.draw();\r\n    });\r\n  }\r\n}\r\n"]}