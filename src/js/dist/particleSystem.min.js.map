{"version":3,"sources":["particleSystem.js"],"names":["ParticleSystem","spec","_classCallCheck","this","specs","image","nextName","particles","createEffect","bind","makeParticle","drawTexture","update","render","x","y","posX","posY","self","deltaX","right","left","deltaY","bottom","top","speed","mean","stdev","lifetime","trunc","Math","size","Random","direction","abs","nextGaussian","rotation","alive","context","translate","center","drawImage","elapsedTime","value","particle","removeMe","rotate","restore","push","length","forEach"],"mappings":"uZAAMA,0BACJ,SAAAA,EAAYC,GAAMC,gBAAAC,KAAAH,GAChBG,KAAKC,MAAQH,EACbE,KAAKE,MAAQF,KAAKC,MAAMC,MACxBF,KAAKG,SAAW,EAChBH,KAAKI,UAAY,GACjBJ,KAAKK,aAAeL,KAAKK,aAAaC,KAAKN,MAC3CA,KAAKO,aAAeP,KAAKO,aAAaD,KAAKN,MAPzCH,KAAAA,YAQiBG,KAAKQ,YAAYF,KAAKN,MACzCA,KAAKS,OAAST,KAAKS,OAAOH,KAAKN,MAC/BA,KAAKU,OAASV,KAAKU,OAAOJ,KAAKN,kEAR/B,IACAW,EACAC,EAGAC,EACAC,EANAC,EAAAf,KAGAgB,GAAKZ,EAAYH,MAAjBgB,MAAAF,EAAAd,MAAAiB,MAAA,GACAC,GAAKd,EAALJ,MAAoBmB,OAAKf,EAALJ,MAAuBoB,KAA3C,GASA,IALAN,EAAKL,MAALY,MAAmBZ,CACpBa,KAAA,GAaGC,MAAO,IAGTT,EAAKd,MAAMwB,SAAW,CAbtBF,KAAIR,IACJS,MAAA,KAAAb,EAEEK,EAAML,EAAII,GAAIJ,IAFhB,IAAAE,EAGEM,KAAMO,MAAQX,EAACd,MAAMmB,KAASL,EAAKd,GACnCY,EAJF,EAAAD,EAAA,GAAAA,IAAAE,EAAAa,KAAAD,MAAAX,EAAAd,MAAAoB,IAAAT,EAAAO,GAOAJ,EAAKd,UAALc,EAAmBZ,YAAAY,EAAAR,aACjBgB,EAAMtB,MACNuB,EAFFV,wCASSb,EAAOU,EAAhBC,GAiBEgB,MAFM,CAbN1B,MADOyB,KACPzB,MACEY,KAAAA,KAAOa,IAAIE,OAAOd,aAAWM,GAAMT,IACnCG,OAAI,CAACX,EAAAA,EAAAA,EAAUW,GAKhBe,UAAA,CAAAnB,EAAA,EAAAC,EAAAe,KAAAI,IAAAF,OAAAG,aAAA,EAAA,OACFV,MAAAK,KAAAI,IAAAF,OAAAG,aAAA/B,EAAAqB,MAAAC,KAAAtB,EAAAqB,MAAAE,QACFS,SAAA,EAWGR,SAAUE,KAAKI,IACbF,OAAOG,aAAa/B,EAAMwB,SAASF,KAAMtB,EAAMwB,SAASD,QAT5DU,MAAInB,uCAIiBH,EAAAA,EAAAA,EAAAA,GAAXuB,QAHFC,UAAAC,EAAA1B,EAAA0B,EAAAzB,GAINkB,QAAAA,OAAWG,GAAEtB,QAACyB,WAAHC,EAAA1B,GAAA0B,EAAAzB,GAAQA,QAAC0B,UAATpC,EACXoB,EAAKX,EAAEgB,EAAKI,EAAIF,EAA2DQ,EAAAzB,EAAAgB,EAAAhB,EAAA,EAC3EqB,EAAAA,EACAR,EAAAA,GAGAS,QAAAA,yCAGFK,GACD,IAkBGC,EACAC,EAnBHC,EAAA,GAoBC,IAAKF,KAASxC,KAAKI,UAjBnB+B,KAAQC,UAAUC,eAAgBG,MAClCL,EAAQQ,KAAOV,UAAfO,IACQJ,OAAUzB,GAClBwB,EACEjC,IACAmC,EAAWT,MAAAa,EACXJ,UAAe1B,EAIjBwB,EAAQS,OAARhC,GACD2B,EAAA,IAAAE,EAAAnB,MAAAmB,EAAAX,UAAAlB,EAcK6B,EAASR,UAAYQ,EAASnB,MAAQ,IACtCmB,EAASP,OAASK,EAZlBG,EAAWR,MAAfO,EAAAhB,UACEe,EADFK,KAAAL,IAKIC,IAAAA,EAAQ,EAAGA,EAAKrC,EAAhB0C,OAAAL,WACAA,KAAQrC,UAARsC,EACGH,qCAMH,IAAAxB,EAAI0B,KACFC,OAAAA,oBAAA3B,EAAAX,WAAA2C,QAAA,SAAAP,GACD,IAAAC,EAAA1B,EAAAX,UAAAoC,GACFzB,EAAAP,YACFO,EAAAd,MAAAC,MAaGuC,EAASJ,OAXbI,EAAKA,SACHA,EAAOb","file":"particleSystem.min.js","sourcesContent":["class ParticleSystem {\r\n  constructor(spec) {\r\n    this.specs = spec;\r\n    this.image = this.specs.image;\r\n    this.nextName = 1;\r\n    this.particles = {};\r\n    this.createEffect = this.createEffect.bind(this);\r\n    this.makeParticle = this.makeParticle.bind(this);\r\n    this.drawTexture = this.drawTexture.bind(this);\r\n    this.update = this.update.bind(this);\r\n    this.render = this.render.bind(this);\r\n  }\r\n\r\n  createEffect() {\r\n    let self = this;\r\n    var x,\r\n      y,\r\n      deltaX = (self.specs.right - self.specs.left) / 10,\r\n      deltaY = (self.specs.bottom - self.specs.top) / 10,\r\n      posX,\r\n      posY;\r\n\r\n    self.specs.speed = {\r\n      mean: 40,\r\n      stdev: 25,\r\n    };\r\n\r\n    self.specs.lifetime = {\r\n      mean: 2000,\r\n      stdev: 500,\r\n    };\r\n    for (x = 0; x < 10; x++) {\r\n      posX = Math.trunc(self.specs.left + x * deltaX);\r\n      for (y = 0; y < 10; y++) {\r\n        posY = Math.trunc(self.specs.top + y * deltaY);\r\n        self.particles[self.nextName++] = self.makeParticle(\r\n          self.specs,\r\n          posX,\r\n          posY\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  makeParticle(specs, x, y) {\r\n    let self = this;\r\n    var p = {\r\n      image: self.image,\r\n      size: Math.abs(Random.nextGaussian(10, 4)),\r\n      center: { x: x, y: y },\r\n      direction: { x: 0, y: Math.abs(Random.nextGaussian(1, 0.25)) },\r\n      speed: Math.abs(Random.nextGaussian(specs.speed.mean, specs.speed.stdev)), // pixels per second\r\n      rotation: 0,\r\n      lifetime: Math.abs(\r\n        Random.nextGaussian(specs.lifetime.mean, specs.lifetime.stdev)\r\n      ), // How long the particle should live, in milliseconds\r\n      alive: 0, // How long the particle has been alive, in milliseconds\r\n    };\r\n\r\n    return p;\r\n  }\r\n\r\n  drawTexture(image, center, rotation, size) {\r\n    context.translate(center.x, center.y);\r\n    context.rotate(rotation);\r\n    context.translate(-center.x, -center.y);\r\n    context.drawImage(\r\n      image,\r\n      center.x - size.x / 2,\r\n      center.y - size.y / 2,\r\n      size.x,\r\n      size.y\r\n    );\r\n    context.restore();\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    var removeMe = [],\r\n      value,\r\n      particle;\r\n    for (value in this.particles) {\r\n      if (this.particles.hasOwnProperty(value)) {\r\n        particle = this.particles[value];\r\n        particle.center.x +=\r\n          (elapsedTime / 1000) * particle.speed * particle.direction.x;\r\n        particle.center.y +=\r\n          (elapsedTime / 1000) * particle.speed * particle.direction.y;\r\n\r\n        particle.rotation += particle.speed / 500;\r\n        particle.alive += elapsedTime;\r\n        if (particle.alive > particle.lifetime) {\r\n          removeMe.push(value);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (particle = 0; particle < removeMe.length; particle++) {\r\n      delete this.particles[removeMe[particle]];\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let self = this;\r\n    Object.getOwnPropertyNames(self.particles).forEach(function (value) {\r\n      let particle = self.particles[value];\r\n      self.drawTexture(\r\n        self.specs.image,\r\n        particle.center,\r\n        particle.rotation,\r\n        particle.size\r\n      );\r\n    });\r\n  }\r\n}\r\n"]}