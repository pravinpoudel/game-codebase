{"version":3,"sources":["random.js"],"names":["Random","nextDouble","Math","random","nextRange","min","max","range","floor","nextCircleVector","angle","PI","x","cos","y","sin","usePrevious","y2","nextGaussian","mean","stdDev","x1","x2","y1","z","sqrt","log"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,MAAM,GAAI,YAAY;AACxB;;AAEA,WAASC,UAAT,GAAsB;AACpB,WAAOC,IAAI,CAACC,MAAL,EAAP;AACD;;AAED,WAASC,SAAT,CAAmBC,GAAnB,EAAwBC,GAAxB,EAA6B;AAC3B,QAAIC,KAAK,GAAGD,GAAG,GAAGD,GAAlB;AACA,WAAOH,IAAI,CAACM,KAAL,CAAWN,IAAI,CAACC,MAAL,KAAgBI,KAAhB,GAAwBF,GAAnC,CAAP;AACD;;AAED,WAASI,gBAAT,GAA4B;AAC1B,QAAIC,KAAK,GAAGR,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoBD,IAAI,CAACS,EAArC;AACA,WAAO;AACLC,MAAAA,CAAC,EAAEV,IAAI,CAACW,GAAL,CAASH,KAAT,CADE;AAELI,MAAAA,CAAC,EAAEZ,IAAI,CAACa,GAAL,CAASL,KAAT;AAFE,KAAP;AAID,GAlBuB,CAoBxB;AACA;;;AACA,MAAIM,WAAW,GAAG,KAAlB;AACA,MAAIC,EAAJ,CAvBwB,CAyBxB;AACA;AACA;AACA;AACA;AACA;;AACA,WAASC,YAAT,CAAsBC,IAAtB,EAA4BC,MAA5B,EAAoC;AAClC,QAAIC,EAAE,GAAG,CAAT;AACA,QAAIC,EAAE,GAAG,CAAT;AACA,QAAIC,EAAE,GAAG,CAAT;AACA,QAAIC,CAAC,GAAG,CAAR;;AAEA,QAAIR,WAAJ,EAAiB;AACfA,MAAAA,WAAW,GAAG,KAAd;AACA,aAAOG,IAAI,GAAGF,EAAE,GAAGG,MAAnB;AACD;;AAEDJ,IAAAA,WAAW,GAAG,IAAd;;AAEA,OAAG;AACDK,MAAAA,EAAE,GAAG,IAAInB,IAAI,CAACC,MAAL,EAAJ,GAAoB,CAAzB;AACAmB,MAAAA,EAAE,GAAG,IAAIpB,IAAI,CAACC,MAAL,EAAJ,GAAoB,CAAzB;AACAqB,MAAAA,CAAC,GAAGH,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAnB;AACD,KAJD,QAISE,CAAC,IAAI,CAJd;;AAMAA,IAAAA,CAAC,GAAGtB,IAAI,CAACuB,IAAL,CAAW,CAAC,CAAD,GAAKvB,IAAI,CAACwB,GAAL,CAASF,CAAT,CAAN,GAAqBA,CAA/B,CAAJ;AACAD,IAAAA,EAAE,GAAGF,EAAE,GAAGG,CAAV;AACAP,IAAAA,EAAE,GAAGK,EAAE,GAAGE,CAAV;AAEA,WAAOL,IAAI,GAAGI,EAAE,GAAGH,MAAnB;AACD;;AAED,SAAO;AACLnB,IAAAA,UAAU,EAAEA,UADP;AAELG,IAAAA,SAAS,EAAEA,SAFN;AAGLK,IAAAA,gBAAgB,EAAEA,gBAHb;AAILS,IAAAA,YAAY,EAAEA;AAJT,GAAP;AAMD,CA/DY,EAAb","sourcesContent":["// ------------------------------------------------------------------\r\n//\r\n// This is a random number generation object.  It provides a handful\r\n// of different ways to generate random numbers.  It is written as a\r\n// Singleton so that there is only one of these throughout the program.\r\n//\r\n// ------------------------------------------------------------------\r\nlet Random = (function () {\r\n  \"use strict\";\r\n\r\n  function nextDouble() {\r\n    return Math.random();\r\n  }\r\n\r\n  function nextRange(min, max) {\r\n    let range = max - min;\r\n    return Math.floor(Math.random() * range + min);\r\n  }\r\n\r\n  function nextCircleVector() {\r\n    let angle = Math.random() * 2 * Math.PI;\r\n    return {\r\n      x: Math.cos(angle),\r\n      y: Math.sin(angle),\r\n    };\r\n  }\r\n\r\n  //\r\n  // This is used to give a small performance optimization in generating gaussian random numbers.\r\n  let usePrevious = false;\r\n  let y2;\r\n\r\n  //\r\n  // Generate a normally distributed random number.\r\n  //\r\n  // NOTE: This code is adapted from a wiki reference I found a long time ago.  I originally\r\n  // wrote the code in C# and am now converting it over to JavaScript.\r\n  //\r\n  function nextGaussian(mean, stdDev) {\r\n    let x1 = 0;\r\n    let x2 = 0;\r\n    let y1 = 0;\r\n    let z = 0;\r\n\r\n    if (usePrevious) {\r\n      usePrevious = false;\r\n      return mean + y2 * stdDev;\r\n    }\r\n\r\n    usePrevious = true;\r\n\r\n    do {\r\n      x1 = 2 * Math.random() - 1;\r\n      x2 = 2 * Math.random() - 1;\r\n      z = x1 * x1 + x2 * x2;\r\n    } while (z >= 1);\r\n\r\n    z = Math.sqrt((-2 * Math.log(z)) / z);\r\n    y1 = x1 * z;\r\n    y2 = x2 * z;\r\n\r\n    return mean + y1 * stdDev;\r\n  }\r\n\r\n  return {\r\n    nextDouble: nextDouble,\r\n    nextRange: nextRange,\r\n    nextCircleVector: nextCircleVector,\r\n    nextGaussian: nextGaussian,\r\n  };\r\n})();\r\n"],"file":"random.dev.js"}