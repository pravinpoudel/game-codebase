{"version":3,"sources":["shortestPath.js"],"names":["findShortestLength","startIndex","endIndex","queue","distances","Array","rows","cols","fill","push","comb1","comb2","length","cellIndex","shift","neighbours","i","removedWallSet","splice","findShortestPath","path","currentDistance","hasOwnProperty","y","Math","floor","x"],"mappings":"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","sourcesContent":["function findShortestLength(startIndex, endIndex) {\r\n  let queue = [];\r\n  let distances = new Array(rows * cols).fill(-1);\r\n  queue.push(startIndex);\r\n  distances[startIndex] = 0;\r\n  let comb1, comb2;\r\n  while (queue.length > 0) {\r\n    let cellIndex = queue.shift();\r\n    let neighbours = [cellIndex - cols, cellIndex + cols];\r\n    if (cellIndex % cols == 0) {\r\n      neighbours.push(cellIndex + 1);\r\n    } else if (cellIndex % cols == cols - 1) {\r\n      neighbours.push(cellIndex - 1);\r\n    } else {\r\n      neighbours.push(cellIndex + 1);\r\n      neighbours.push(cellIndex - 1);\r\n    }\r\n\r\n    for (let i = 0; i < neighbours.length; i++) {\r\n      // console.log(\r\n      //   \"index\",\r\n      //   i,\r\n      //   neighbours[i],\r\n      //   comb1,\r\n      //   removedWallSet.hasOwnProperty(comb1),\r\n      //   comb2,\r\n      //   removedWallSet.hasOwnProperty(comb2)\r\n      // );\r\n\r\n      comb1 = neighbours[i] + \"_\" + cellIndex;\r\n      comb2 = cellIndex + \"_\" + neighbours[i];\r\n\r\n      if (!(removedWallSet[comb1] || removedWallSet[comb2])) {\r\n        neighbours.splice(i, 1);\r\n        i--;\r\n      } else if (!(neighbours[i] < rows * cols && neighbours[i] >= 0)) {\r\n        neighbours.splice(i, 1);\r\n        i--;\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < neighbours.length; i++) {\r\n      if (distances[neighbours[i]] == -1) {\r\n        distances[neighbours[i]] = distances[cellIndex] + 1;\r\n        queue.push(neighbours[i]);\r\n        if (neighbours[i] == endIndex) {\r\n          return distances;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction findShortestPath(startIndex, endIndex) {\r\n  let distances = findShortestLength(startIndex, endIndex);\r\n  let cellIndex = endIndex;\r\n  path.push(endIndex);\r\n  let currentDistance = distances[endIndex];\r\n  while (currentDistance > 0) {\r\n    currentDistance = distances[cellIndex];\r\n    let neighbours = [cellIndex - cols, cellIndex + cols];\r\n    if (cellIndex % cols == 0) {\r\n      neighbours.push(cellIndex + 1);\r\n    } else if (cellIndex % cols == cols - 1) {\r\n      neighbours.push(cellIndex - 1);\r\n    } else {\r\n      neighbours.push(cellIndex + 1);\r\n      neighbours.push(cellIndex - 1);\r\n    }\r\n    for (let i = 0; i < neighbours.length; i++) {\r\n      comb1 = neighbours[i] + \"_\" + cellIndex;\r\n      comb2 = cellIndex + \"_\" + neighbours[i];\r\n\r\n      if (\r\n        !(\r\n          removedWallSet.hasOwnProperty(comb1) ||\r\n          removedWallSet.hasOwnProperty(comb2)\r\n        )\r\n      ) {\r\n        neighbours.splice(i, 1);\r\n        i--;\r\n      } else if (!(neighbours[i] < rows * cols && neighbours[i] >= 0)) {\r\n        neighbours.splice(i, 1);\r\n        i--;\r\n      }\r\n    }\r\n\r\n    currentDistance--;\r\n    for (let i = 0; i < neighbours.length; i++) {\r\n      if (distances[neighbours[i]] == currentDistance) {\r\n        path.push(neighbours[i]);\r\n        break;\r\n      }\r\n    }\r\n    cellIndex = path[path.length - 1];\r\n  }\r\n\r\n  for (let i = 0, length = path.length; i < length; i++) {\r\n    let y = Math.floor(path[i] / cols);\r\n    let x = path[i] % cols;\r\n    path[i] = {\r\n      x,\r\n      y,\r\n    };\r\n  }\r\n}\r\n"],"file":"shortestPath.dev.js"}