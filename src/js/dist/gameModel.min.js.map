{"version":3,"sources":["gameModel.js"],"names":["gameModel","specs","playerEvent","continousMotion","_this","this","_classCallCheck","player","animationTime","subImageIndex","subTextureWidth","image","Image","loadedImage","secondTime","images","index","spriteSheet","forEach","src","assets","health","flying","meterWidth","yoffsetBar","GameState","elapsedTime","collided","spriteTime","maxHealth","spriteCount","reachRight","center","currentHealth","context","fillStyle","left","top","y","height","fillRect","lifeWidth","update","rotation","save","translate","rotate","x","drawImage","width","drawSubTexture"],"mappings":"uZAAMA,qBACJ,SAAAA,EAAYC,EAAOC,EAAaC,GAAiB,IAAAC,EAAAC,KAAAC,gBAAAD,KAAAL,GAC/CK,KAAKJ,MAAQA,EACbI,KAAKE,OAASL,EAEdG,KAAKG,cAAgB,EACrBH,KAAKI,cAAgB,EACrBJ,KAAKK,gBAAkB,EAEvBL,KAAKM,MAAQ,IAAIC,MACjBP,KAAKQ,YAAc,EATrBR,KAAAS,YAAYb,EAYVI,KAAKU,OAAS,GAZiCV,KAAAW,MAAA,EAc/Cf,EAAMgB,YAAYC,QAAQ,SAACC,GAb3B,IAAKlB,EAAQA,UAAbmB,OAAAD,GACAf,EAAKG,OAASL,KAAAA,KAMdG,KAAKM,gBAAQR,EACbE,KAAKQ,UAAL,EACAR,KAAKS,OAAAA,EAAaO,OAElBhB,KAAKU,UAALd,EAAAoB,OACAhB,KAAKW,OAALf,EAAAqB,OACArB,KAAKsB,WAAaL,GAChBb,KAAAmB,WAAYC,uDAIdC,GAWArB,KAAKG,eAAiBkB,EAVtBrB,KAAKF,eAAkBA,KAAAA,MAAAA,WAAvBE,KAAAI,iBACAJ,KAAKsB,eAALtB,KAAAJ,MAAA2B,WAAAvB,KAAAI,eACAJ,KAAKgB,eAAeA,EACpBhB,KAAKwB,cAAkBR,KAAAA,cAAvBhB,KAAAJ,MAAA6B,aAEAzB,KAAKkB,iBACLlB,KAAKmB,OAAAA,OAALE,wCAgBA,OAAOrB,KAAKE,OAAOwB,6CAXfC,EAAKxB,EAAAA,EAAiByB,EAAWL,GAEnCM,QAAAC,UAAK1B,MACL,IAAA2B,EAAK3B,EAAAA,EAALJ,KAAqBkB,WAAKd,EAC3B4B,EAAAL,EAAAM,EAAAC,EAAA,EAAAlC,KAAAmB,WAHMhB,EAkBP0B,QAAQM,SAASJ,EAAMC,EAAKhC,KAAKkB,WAlB1Bf,GAIP0B,QAAIC,UAAKhC,QACP,IAAAsC,EAAYC,KAAAA,MAAOhB,EAAnBG,EAAAxB,KAAAkB,YACDW,QAAAM,SAAAJ,EAAAC,EAAAI,EANMjC,0CAwBMG,EAAOK,EAAON,EAAiBsB,EAAQW,GACpDT,QAAQU,OAfRV,QAAAW,UAAYtC,EAAOwB,EAAAA,EAAnBO,GACDJ,QAAAY,OAAAH,GAiBCT,QAAQW,WAAWb,EAAOe,GAAIf,EAAOM,GAErCJ,QAAQc,UAhBRrC,EACAuB,EAAOa,EAACZ,EAARc,MAAA,EACAjB,EAAII,EAAOJ,EAAMO,OAAK,EACtB5B,EAAI0B,MACJH,EAAAA,QAEAA,QAAIO,2CAqBJ,IAAI9B,EAAQN,KAAKU,OAAOV,KAAKI,eAC7BJ,KAAK6C,eAjBLhB,EACAA,KAAAA,cACAA,KAAAA,gBACAA,KAAAA,OAAQW,MAAUb,OAmBhB3B,KAAKE,OAAON,MAAM0C,SAjBpBT,KAAAA,OAAQc,MACNrC,MAMFuB,KAAAA,QACD7B,KAAAE,OAAAN,MAAA+B,OAcGrB,EAAMsC,MACNtC,EAAM4B,OACNlC,KAAKgB,OAbPhB,KAAIM,WASJN,KAAAS,YACE","file":"gameModel.min.js","sourcesContent":["class gameModel {\r\n  constructor(specs, playerEvent, continousMotion) {\r\n    this.specs = specs;\r\n    this.player = playerEvent;\r\n\r\n    this.animationTime = 0;\r\n    this.subImageIndex = 0;\r\n    this.subTextureWidth = 0;\r\n\r\n    this.image = new Image();\r\n    this.loadedImage = 0;\r\n    this.secondTime = false;\r\n\r\n    this.images = [];\r\n    this.index = 0;\r\n    specs.spriteSheet.forEach((src) => {\r\n      let image = GameState.assets[src];\r\n      this.images.push(image);\r\n    });\r\n\r\n    // this.image.src = this.specs.spriteSheet;\r\n    this.continousMotion = continousMotion;\r\n    this.collided = false;\r\n    this.health = specs.health;\r\n    this.maxHealth = specs.health;\r\n    this.flying = specs.flying;\r\n    this.meterWidth = 40;\r\n    this.yoffsetBar = 20;\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    this.animationTime += elapsedTime;\r\n    if (this.animationTime >= this.specs.spriteTime[this.subImageIndex]) {\r\n      this.animationTime -= this.specs.spriteTime[this.subImageIndex];\r\n      this.subImageIndex += 1;\r\n      this.subImageIndex = this.subImageIndex % this.specs.spriteCount;\r\n    }\r\n    if (this.continousMotion) {\r\n      this.player.update(elapsedTime);\r\n    }\r\n  }\r\n\r\n  reachRight() {\r\n    return this.player.reachRight();\r\n  }\r\n\r\n  drawBar(center, width, height, currentHealth, maxHealth) {\r\n    let barHeight = 5;\r\n    context.fillStyle = \"red\";\r\n    let left = center.x - this.meterWidth / 2;\r\n    let top = center.y - height / 2 - this.yoffsetBar - barHeight;\r\n    context.fillRect(left, top, this.meterWidth, barHeight);\r\n    context.fillStyle = \"green\";\r\n    let lifeWidth = Math.floor((currentHealth / maxHealth) * this.meterWidth);\r\n    context.fillRect(left, top, lifeWidth, barHeight);\r\n  }\r\n\r\n  drawSubTexture(image, index, subTextureWidth, center, rotation, size) {\r\n    context.save();\r\n    context.translate(center.x, center.y);\r\n    context.rotate(rotation);\r\n    context.translate(-center.x, -center.y);\r\n    // context.drawImage(image, this.x, this.y, image.width, image.height);\r\n    context.drawImage(\r\n      image,\r\n      center.x - image.width / 2, // Where to draw the sub-texture\r\n      center.y - image.height / 2,\r\n      image.width,\r\n      image.height\r\n    );\r\n    context.restore();\r\n  }\r\n\r\n  render() {\r\n    let image = this.images[this.subImageIndex];\r\n    this.drawSubTexture(\r\n      image,\r\n      this.subImageIndex,\r\n      this.subTextureWidth,\r\n      this.player.specs.center,\r\n      this.player.specs.rotation,\r\n      this.player.specs.size\r\n    );\r\n    this.drawBar(\r\n      this.player.specs.center,\r\n      image.width,\r\n      image.height,\r\n      this.health,\r\n      this.maxHealth\r\n    );\r\n    this.secondTime = true;\r\n  }\r\n}\r\n"]}