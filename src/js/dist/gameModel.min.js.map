{"version":3,"sources":["gameModel.js"],"names":["gameModel","specs","playerEvent","continousMotion","_this","this","_classCallCheck","player","animationTime","subImageIndex","subTextureWidth","image","Image","isReady","loadedImage","secondTime","images","index","forEach","src","spriteCount","collided","health","maxHealth","flying","meterWidth","yoffsetBar","elapsedTime","spriteTime","reachRight","center","width","height","currentHealth","context","fillStyle","left","top","fillRect","lifeWidth","update","rotation","save","translate","x","y","rotate","drawImage","barHeight","drawSubTexture"],"mappings":"uZAAMA,qBACJ,SAAAA,EAAYC,EAAOC,EAAaC,GAAiB,IAAAC,EAAAC,KAAAC,gBAAAD,KAAAL,GAC/CK,KAAKJ,MAAQA,EACbI,KAAKE,OAASL,EAEdG,KAAKG,cAAgB,EACrBH,KAAKI,cAAgB,EACrBJ,KAAKK,gBAAkB,EAEvBL,KAAKM,MAAQ,IAAIC,MACjBP,KAAKQ,SAAU,EATjBR,KAAAS,YAAYb,EAAqCI,KAAAU,YAAA,EAAAV,KAAAW,OAAA,GAc/CX,KAAKY,MAAQ,EAbbhB,EAAKA,YAALiB,QAAA,SAAAC,GACA,IAAKZ,EAASL,IAAAA,MAEdS,EAAKH,IAAAA,EACLG,EAAKF,OAAAA,WACLL,EAAKM,cAEAC,EAAQG,aAAbV,EAAAH,MAAAmB,cAAAhB,EAAAS,SAAA,IAEAT,EAAKU,OAAAA,KAAcH,KAKnBV,KAAKE,gBAAae,EAChBb,KAAAgB,UAAY,EACZV,KAAAA,OAAYQ,EAAZG,OAYFjB,KAAKkB,UAAYtB,EAAMqB,OAXrBX,KAAAA,OAAAV,EAAeuB,OACbnB,KAAAoB,WAAKX,GACLT,KAAAqB,WAASZ,uDAEXa,GACDtB,KAEDG,eAAAmB,EAYItB,KAAKG,eAAiBH,KAAKJ,MAAM2B,WAAWvB,KAAKI,iBAXrDJ,KAAKF,eAAkBA,KAAAA,MAAAA,WAAvBE,KAAAI,eACAJ,KAAKgB,eAAL,EACAhB,KAAKiB,cAAeA,KAApBb,cAAAJ,KAAAJ,MAAAmB,aAEAf,KAAKmB,iBACLnB,KAAKoB,OAAAA,OAALE,wCAiBA,OAAOtB,KAAKE,OAAOsB,6CAGbC,EAAQC,EAAOC,EAAQC,EAAeV,GAb1CW,QAAAC,UAAK3B,MACL,IAAA4B,EAAK3B,EAAAA,EAALJ,KAAAoB,WAAA,EACAY,EAAK5B,EAAAA,EAAAA,EAAqBA,EAAAA,KAAAA,WAHnBD,EAIR0B,QAAAI,SAAAF,EAAAC,EAAAhC,KAAAoB,WAJQjB,GAoBT0B,QAAQC,UAAY,QAfpB,IAAAI,EAASpC,KAAAA,MAAiB8B,EAAAV,EAAAlB,KAAAoB,YACxBS,QAAAI,SAAYE,EAAOb,EAAAA,EANZnB,0CAyBIG,EAAOM,EAAOP,EAAiBoB,EAAQW,GACpDP,QAAQQ,OACRR,QAAQS,UAAUb,EAAOc,EAAGd,EAjBjBe,GACXX,QAAAY,OAAYvC,GACb2B,QAAAS,WAAAb,EAAAc,GAAAd,EAAAe,GAmBCX,QAAQa,UACNpC,EAjBFmB,EAAIkB,EAAAA,EAAJjB,MAAA,EACAG,EAAOW,EAACV,EAARH,OAAA,EACArB,EAAIyB,MACJzB,EAAI0B,QAEJH,QAAAA,2CAsBA,GAAI7B,KAAKQ,QAAS,CAChB,IAAIF,EAAQN,KAAKW,OAAOX,KAAKI,eAC7BJ,KAAK4C,eAlBPf,EACAA,KAAOzB,cACPyB,KAAOxB,gBACPwB,KAAO3B,OAACoC,MAAWb,OAoBfzB,KAAKE,OAAON,MAAMwC,SAlBtBP,KAAO3B,OAACwC,MACNpC,MAMFuB,KAAAA,QACD7B,KAAAE,OAAAN,MAAA6B,OAeKnB,EAAMoB,MACNpB,EAAMqB,OACN3B,KAAKiB,OAdTjB,KAAIkB,WAEFlB,KAAAU,YAAKkC","file":"gameModel.min.js","sourcesContent":["class gameModel {\r\n  constructor(specs, playerEvent, continousMotion) {\r\n    this.specs = specs;\r\n    this.player = playerEvent;\r\n\r\n    this.animationTime = 0;\r\n    this.subImageIndex = 0;\r\n    this.subTextureWidth = 0;\r\n\r\n    this.image = new Image();\r\n    this.isReady = false;\r\n    this.loadedImage = 0;\r\n    this.secondTime = false;\r\n\r\n    this.images = [];\r\n    this.index = 0;\r\n    specs.spriteSheet.forEach((src) => {\r\n      let image = new Image();\r\n      image.src = src;\r\n      image.onload = () => {\r\n        this.loadedImage++;\r\n        if (this.loadedImage == this.specs.spriteCount) this.isReady = true;\r\n      };\r\n      this.images.push(image);\r\n    });\r\n\r\n    // this.image.src = this.specs.spriteSheet;\r\n    this.continousMotion = continousMotion;\r\n    this.collided = false;\r\n    this.health = specs.health;\r\n    this.maxHealth = specs.health;\r\n    this.flying = specs.flying;\r\n    this.meterWidth = 40;\r\n    this.yoffsetBar = 20;\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    this.animationTime += elapsedTime;\r\n    if (this.animationTime >= this.specs.spriteTime[this.subImageIndex]) {\r\n      this.animationTime -= this.specs.spriteTime[this.subImageIndex];\r\n      this.subImageIndex += 1;\r\n      this.subImageIndex = this.subImageIndex % this.specs.spriteCount;\r\n    }\r\n    if (this.continousMotion) {\r\n      this.player.update(elapsedTime);\r\n    }\r\n  }\r\n\r\n  reachRight() {\r\n    return this.player.reachRight();\r\n  }\r\n\r\n  drawBar(center, width, height, currentHealth, maxHealth) {\r\n    let barHeight = 5;\r\n    context.fillStyle = \"red\";\r\n    let left = center.x - this.meterWidth / 2;\r\n    let top = center.y - height / 2 - this.yoffsetBar - barHeight;\r\n    context.fillRect(left, top, this.meterWidth, barHeight);\r\n    context.fillStyle = \"green\";\r\n    let lifeWidth = Math.floor((currentHealth / maxHealth) * this.meterWidth);\r\n    context.fillRect(left, top, lifeWidth, barHeight);\r\n  }\r\n\r\n  drawSubTexture(image, index, subTextureWidth, center, rotation, size) {\r\n    context.save();\r\n    context.translate(center.x, center.y);\r\n    context.rotate(rotation);\r\n    context.translate(-center.x, -center.y);\r\n    // context.drawImage(image, this.x, this.y, image.width, image.height);\r\n    context.drawImage(\r\n      image,\r\n      center.x - image.width / 2, // Where to draw the sub-texture\r\n      center.y - image.height / 2,\r\n      image.width,\r\n      image.height\r\n    );\r\n    context.restore();\r\n  }\r\n\r\n  render() {\r\n    if (this.isReady) {\r\n      let image = this.images[this.subImageIndex];\r\n      this.drawSubTexture(\r\n        image,\r\n        this.subImageIndex,\r\n        this.subTextureWidth,\r\n        this.player.specs.center,\r\n        this.player.specs.rotation,\r\n        this.player.specs.size\r\n      );\r\n      this.drawBar(\r\n        this.player.specs.center,\r\n        image.width,\r\n        image.height,\r\n        this.health,\r\n        this.maxHealth\r\n      );\r\n      this.secondTime = true;\r\n    }\r\n  }\r\n}\r\n"]}