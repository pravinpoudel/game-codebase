{"version":3,"sources":["gameModel.js"],"names":["gameModel","specs","playerEvent","continousMotion","_this","this","_classCallCheck","player","animationTime","subImageIndex","subTextureWidth","image","Image","isReady","loadedImage","secondTime","images","index","forEach","src","spriteCount","collided","elapsedTime","spriteTime","center","rotation","context","save","translate","y","x","drawImage","height","width","restore","size"],"mappings":"uZAAMA,qBACJ,SAAAA,EAAYC,EAAOC,EAAaC,GAAiB,IAAAC,EAAAC,KAAAC,gBAAAD,KAAAL,GAC/CK,KAAKJ,MAAQA,EACbI,KAAKE,OAASL,EAEdG,KAAKG,cAAgB,EACrBH,KAAKI,cAAgB,EACrBJ,KAAKK,gBAAkB,EAEvBL,KAAKM,MAAQ,IAAIC,MACjBP,KAAKQ,SAAU,EATjBR,KAAAS,YAAYb,EAAqCI,KAAAU,YAAA,EAAAV,KAAAW,OAAA,GAc/CX,KAAKY,MAAQ,EAbbhB,EAAKA,YAALiB,QAAA,SAAAC,GACA,IAAKZ,EAASL,IAAAA,MAEdS,EAAKH,IAAAA,EACLG,EAAKF,OAAAA,WACLL,EAAKM,cAEAC,EAAQG,aAAbV,EAAAH,MAAAmB,cAAAhB,EAAAS,SAAA,IAEAT,EAAKU,OAAAA,KAAcH,KAKnBV,KAAKE,gBAAae,EAChBb,KAAAgB,UAAY,sDAEZV,GACEN,KAAAG,eAAAc,EACAjB,KAAIG,eAAAH,KAAoBJ,MAAKA,WAAMmB,KAAnCX,iBACDJ,KAHDG,eAAAH,KAAAJ,MAAAsB,WAAAlB,KAAAI,eAgBAJ,KAAKI,eAAiB,EAZtBJ,KAAII,cAAaE,KAAjBF,cAAAJ,KAAAJ,MAAAmB,aAeEf,KAAKF,iBAXTE,KAAKF,OAAAA,OAALmB,0CAgBaX,EAAOM,EAAOP,EAAiBc,EAAQC,GACpDC,QAAQC,OACRD,QAAQE,UAAUJ,EAdbF,EAAAA,EAc8BO,GAbnCH,QAAKlB,OAAAA,GAeLkB,QAAQE,WAAWJ,EAAOM,GAAIN,EAAOK,GAbnCH,QAAAK,UACApB,EACAa,EAAKf,EAAAA,EAAAA,MAAgB,EACtBe,EAAAK,EAAAlB,EAAAqB,OAAA,EAgBCrB,EAAMsB,MAfRtB,EAAIqB,QAEHN,QAAAQ,2CAoBD,GAAI7B,KAAKQ,QAAS,CAhBlBa,IAAAA,EAAArB,KAAAW,OAAAX,KAAAI,eACAiB,KAAAA,eACAA,EACAA,KAAOjB,cAkBHJ,KAAKK,gBAhBTgB,KAAOnB,OAACwB,MACNpB,OAEAa,KAAOK,OAAIlB,MAAMqB,SAInBN,KAAOnB,OAAC2B,MAARC,MAcE9B,KAAKU,YAAa","file":"gameModel.min.js","sourcesContent":["class gameModel {\r\n  constructor(specs, playerEvent, continousMotion) {\r\n    this.specs = specs;\r\n    this.player = playerEvent;\r\n\r\n    this.animationTime = 0;\r\n    this.subImageIndex = 0;\r\n    this.subTextureWidth = 0;\r\n\r\n    this.image = new Image();\r\n    this.isReady = false;\r\n    this.loadedImage = 0;\r\n    this.secondTime = false;\r\n\r\n    this.images = [];\r\n    this.index = 0;\r\n    specs.spriteSheet.forEach((src) => {\r\n      let image = new Image();\r\n      image.src = src;\r\n      image.onload = () => {\r\n        this.loadedImage++;\r\n        if (this.loadedImage == this.specs.spriteCount) this.isReady = true;\r\n      };\r\n      this.images.push(image);\r\n    });\r\n\r\n    // this.image.src = this.specs.spriteSheet;\r\n    this.continousMotion = continousMotion;\r\n    this.collided = false;\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    this.animationTime += elapsedTime;\r\n    if (this.animationTime >= this.specs.spriteTime[this.subImageIndex]) {\r\n      this.animationTime -= this.specs.spriteTime[this.subImageIndex];\r\n      this.subImageIndex += 1;\r\n      this.subImageIndex = this.subImageIndex % this.specs.spriteCount;\r\n    }\r\n    if (this.continousMotion) {\r\n      this.player.update(elapsedTime);\r\n    }\r\n  }\r\n\r\n  drawSubTexture(image, index, subTextureWidth, center, rotation, size) {\r\n    context.save();\r\n    context.translate(center.x, center.y);\r\n    context.rotate(rotation);\r\n    context.translate(-center.x, -center.y);\r\n    // context.drawImage(image, this.x, this.y, image.width, image.height);\r\n    context.drawImage(\r\n      image,\r\n      center.x - image.width / 2, // Where to draw the sub-texture\r\n      center.y - image.height / 2,\r\n      image.width,\r\n      image.height\r\n    );\r\n    context.restore();\r\n  }\r\n\r\n  render() {\r\n    if (this.isReady) {\r\n      let image = this.images[this.subImageIndex];\r\n      this.drawSubTexture(\r\n        image,\r\n        this.subImageIndex,\r\n        this.subTextureWidth,\r\n        this.player.specs.center,\r\n        this.player.specs.rotation,\r\n        this.player.specs.size\r\n      );\r\n      this.secondTime = true;\r\n    }\r\n  }\r\n}\r\n"]}