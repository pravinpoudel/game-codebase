{"version":3,"sources":["particle-system.js"],"names":["Brickout","pages","ParticleSystem","graphics","that","image","Image","particles","nextName","x","spec","xDirection","y","yDirection","p","speed","Math","size","abs","Random","nextGaussian","rotation","lifetime","mean","stdev","alive","direction","gaussian","guassian","posX","posY","right","left","trunc","count","deltaX","top","deltaY","makeParticle","update","elapsedTime","value","particle","removeMe","hasOwnProperty","center","push","length","render","onload","drawImage","canvas","document","getElementById","context","CanvasRenderingContext2D","prototype","clear","this","save","setTransform","clearRect","width","height","restore","drawRectangle","fillStyle","fill","fillRect","strokeRect","drawText","font","textBaseline","stroke","strokeText","fillText","text","position","translate","rotate","measureTextWidth","measureTextHeight","strokeStyle","measureText","saveText","particleSystem","bottom","createEffect","creepDied","makeParticle2","trailFollow","console","towerSold","log","bombHit","radius"],"mappings":"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","file":"particle-system.min.js","sourcesContent":["var Brickout = {\r\n  pages: {},\r\n};\r\n\r\n// ------------------------------------------------------------------\r\n//\r\n// This namespace provides the rendering code for the game.\r\n//\r\n// ------------------------------------------------------------------\r\nBrickout.graphics = (function () {\r\n  \"use strict\";\r\n\r\n  var canvas = document.getElementById(\"canvas-main\"),\r\n    context = canvas.getContext(\"2d\");\r\n\r\n  //\r\n  // Place a 'clear' function on the Canvas prototype, this makes it a part\r\n  // of the canvas, rather than making a function that calls and does it.\r\n  CanvasRenderingContext2D.prototype.clear = function () {\r\n    this.save();\r\n    this.setTransform(1, 0, 0, 1, 0, 0);\r\n    this.clearRect(0, 0, canvas.width, canvas.height);\r\n    this.restore();\r\n  };\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Public method that allows the client code to clear the canvas.\r\n  //\r\n  //------------------------------------------------------------------\r\n  function clear() {\r\n    context.clear();\r\n  }\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Draws a rectangle\r\n  //\r\n  //------------------------------------------------------------------\r\n  function drawRectangle(spec) {\r\n    context.fillStyle = spec.fill;\r\n    context.fillRect(spec.x, spec.y, spec.width, spec.height);\r\n\r\n    context.strokeStyle = spec.stroke;\r\n    context.strokeRect(spec.x, spec.y, spec.width, spec.height);\r\n  }\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Returns the width of the specified text, in pixels.\r\n  //\r\n  //------------------------------------------------------------------\r\n  function measureTextWidth(spec) {\r\n    context.save();\r\n\r\n    context.font = spec.font;\r\n    context.fillStyle = spec.fill;\r\n    if (spec.hasOwnProperty(\"stroke\")) {\r\n      context.strokeStyle = spec.stroke;\r\n    }\r\n    var width = context.measureText(spec.text).width;\r\n\r\n    context.restore();\r\n\r\n    return width;\r\n  }\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Returns the height of the specified text, in pixels.\r\n  //\r\n  //------------------------------------------------------------------\r\n  function measureTextHeight(spec) {\r\n    var saveText = spec.text;\r\n\r\n    spec.text = \"m\"; // Clever trick to get font height\r\n    context.save();\r\n\r\n    context.font = spec.font;\r\n    context.fillStyle = spec.fill;\r\n    if (spec.hasOwnProperty(\"stroke\")) {\r\n      context.strokeStyle = spec.stroke;\r\n    }\r\n    var width = context.measureText(spec.text).width;\r\n    spec.text = saveText;\r\n\r\n    context.restore();\r\n\r\n    return width;\r\n  }\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Draw some text to the screen\r\n  //\r\n  //------------------------------------------------------------------\r\n  function drawText(spec) {\r\n    context.save();\r\n\r\n    (context.font = spec.font), (context.fillStyle = spec.fill);\r\n    if (spec.hasOwnProperty(\"stroke\")) {\r\n      context.strokeStyle = spec.stroke;\r\n    }\r\n    context.textBaseline = \"top\";\r\n\r\n    context.fillText(spec.text, spec.position.x, spec.position.y);\r\n    context.strokeText(spec.text, spec.position.x, spec.position.y);\r\n\r\n    context.restore();\r\n  }\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Expose an ability to draw an image/texture on the canvas.\r\n  //\r\n  //------------------------------------------------------------------\r\n  function drawImage(spec) {\r\n    context.save();\r\n\r\n    context.translate(spec.center.x, spec.center.y);\r\n    context.rotate(spec.rotation);\r\n    context.translate(-spec.center.x, -spec.center.y);\r\n\r\n    context.drawImage(\r\n      spec.image,\r\n      spec.center.x - spec.size / 2,\r\n      spec.center.y - spec.size / 2,\r\n      spec.size,\r\n      spec.size\r\n    );\r\n\r\n    context.restore();\r\n  }\r\n\r\n  return {\r\n    clear: clear,\r\n    drawRectangle: drawRectangle,\r\n    drawText: drawText,\r\n    drawImage: drawImage,\r\n    measureTextWidth: measureTextWidth,\r\n    measureTextHeight: measureTextHeight,\r\n  };\r\n})();\r\n\r\nfunction ParticleSystem(graphics) {\r\n  \"use strict\";\r\n  var that = {},\r\n    image = new Image(),\r\n    particles = {}, // Set of all active particles\r\n    nextName = 1; // Unique identifier for the next particle\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Create a bunch of particles over the surface of the brick.\r\n  //\r\n  //------------------------------------------------------------------\r\n  that.createEffect = function (spec) {\r\n    var x,\r\n      y,\r\n      deltaX = (spec.right - spec.left) / 10,\r\n      deltaY = (spec.bottom - spec.top) / 10, // bottom - top : remember that Y is position down the screen\r\n      posX,\r\n      posY;\r\n\r\n    spec.speed = {\r\n      mean: 20, // pixels per second\r\n      stdev: 2,\r\n    };\r\n    spec.lifetime = {\r\n      mean: spec.mean,\r\n      stdev: spec.stdev,\r\n    };\r\n\r\n    //\r\n    // Create particles over the area of the brick\r\n    for (x = 0; x < spec.count; x++) {\r\n      posX = Math.trunc(spec.left + x * deltaX);\r\n      for (y = 0; y < spec.count; y++) {\r\n        posY = Math.trunc(spec.top + y * deltaY);\r\n        //\r\n        // Assign a unique name to each particle\r\n        particles[nextName++] = makeParticle(spec, posX, posY);\r\n      }\r\n    }\r\n  };\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // This creates one new particle\r\n  //\r\n  //------------------------------------------------------------------\r\n  function makeParticle(spec, x, y) {\r\n    console.log(spec);\r\n    var p = {\r\n      image: image,\r\n      size: Math.abs(Random.nextGaussian(10, 4)),\r\n      center: { x: x, y: y },\r\n      direction: { x: spec.xDirection, y: spec.yDirection },\r\n      speed: Math.abs(Random.nextGaussian(spec.speed.mean, spec.speed.stdev)), // pixels per second\r\n      rotation: 0,\r\n      lifetime: Math.abs(\r\n        Random.nextGaussian(spec.lifetime.mean, spec.lifetime.stdev)\r\n      ), // How long the particle should live, in milliseconds\r\n      alive: 0, // How long the particle has been alive, in milliseconds\r\n    };\r\n    console.log(spec.gaussian);\r\n    if (spec.guassian) {\r\n      p.direction = { x: 0, y: Math.abs(Random.nextGaussian(1, 0.25)) };\r\n    }\r\n    return p;\r\n  }\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Update the state of all particles.  This includes removing any that\r\n  // have exceeded their lifetime.\r\n  //\r\n  //------------------------------------------------------------------\r\n  that.update = function (elapsedTime) {\r\n    var removeMe = [],\r\n      value,\r\n      particle;\r\n    for (value in particles) {\r\n      if (particles.hasOwnProperty(value)) {\r\n        particle = particles[value];\r\n        //\r\n        // Update its position\r\n        particle.center.x +=\r\n          (elapsedTime / 1000) * particle.speed * particle.direction.x;\r\n        particle.center.y +=\r\n          (elapsedTime / 1000) * particle.speed * particle.direction.y;\r\n\r\n        //\r\n        // Rotate proportional to its speed\r\n        particle.rotation += particle.speed / 500;\r\n\r\n        //\r\n        // Update how long it has been alive\r\n        particle.alive += elapsedTime;\r\n\r\n        //\r\n        // If the lifetime has expired, identify it for removal\r\n        if (particle.alive > particle.lifetime) {\r\n          removeMe.push(value);\r\n        }\r\n      }\r\n    }\r\n\r\n    //\r\n    // Remove all of the expired particles\r\n    for (particle = 0; particle < removeMe.length; particle++) {\r\n      delete particles[removeMe[particle]];\r\n    }\r\n  };\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Initially empty, will be replaced when the texture is loaded\r\n  //\r\n  //------------------------------------------------------------------\r\n  that.render = function () {};\r\n\r\n  image.src = \"assets/fire.png\";\r\n  image.onload = function () {\r\n    that.render = function () {\r\n      var value, particle;\r\n\r\n      for (value in particles) {\r\n        if (particles.hasOwnProperty(value)) {\r\n          particle = particles[value];\r\n          graphics.drawImage(particle);\r\n        }\r\n      }\r\n    };\r\n  };\r\n\r\n  return that;\r\n}\r\n\r\nlet particleSystem = ParticleSystem(Brickout.graphics);\r\n\r\nfunction makeParticle2(\r\n  left,\r\n  right,\r\n  top,\r\n  bottom,\r\n  count,\r\n  xDirection,\r\n  yDirection,\r\n  mean,\r\n  stdev,\r\n  gaussian\r\n) {\r\n  particleSystem.createEffect({\r\n    left: left,\r\n    right: right,\r\n    top: top,\r\n    bottom: bottom,\r\n    count: count,\r\n    xDirection: xDirection,\r\n    yDirection: yDirection,\r\n    mean: mean,\r\n    stdev: stdev,\r\n    gaussian: gaussian,\r\n  });\r\n}\r\n\r\nfunction creepDied(x, y) {\r\n  makeParticle2(x, x + 25, y, y + 25, 10, 0, 0, 800, 200, true);\r\n}\r\n\r\nfunction trailFollow(x, y, xDirection, yDirection) {\r\n  console.log(x, y, xDirection, yDirection);\r\n  makeParticle2(x, x + 5, y, y + 5, 1, xDirection, yDirection, 150, 50, false);\r\n}\r\n\r\nfunction bombHit(x, y, radius) {\r\n  makeParticle2(\r\n    x - radius / 4,\r\n    x + radius / 4,\r\n    y - radius / 4,\r\n    y + radius / 4,\r\n    5,\r\n    0,\r\n    0,\r\n    500,\r\n    100,\r\n    true\r\n  );\r\n}\r\n\r\nfunction towerSold(x, y) {\r\n  makeParticle2(x, x + 25, y - 25, y + 25, 5, 0, 0, 1000, 20, true);\r\n}\r\n"]}