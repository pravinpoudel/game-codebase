{"version":3,"sources":["particle-system.js"],"names":["Brickout","pages","ParticleSystem","graphics","image1","that","particles","nextName","y","spec","yDirection","p","speed","Math","size","abs","Random","nextGaussian","rotation","x","lifetime","mean","stdev","alive","guassian","posX","posY","right","left","trunc","count","deltaX","top","deltaY","makeParticle","update","elapsedTime","value","particle","removeMe","hasOwnProperty","center","direction","push","length","image","render","drawImage","canvas","document","getElementById","context","CanvasRenderingContext2D","prototype","clear","this","save","setTransform","clearRect","width","height","restore","drawRectangle","fillStyle","fill","fillRect","strokeRect","drawText","font","textBaseline","stroke","strokeText","fillText","text","position","translate","rotate","measureTextWidth","measureTextHeight","strokeStyle","measureText","saveText","particleSystem2","GameState","makeParticle2","assets","xDirection","gaussian","particleSystem1","createEffect","bottom","makeParticle1","creepDied","trailFollow","bombHit","radius","towerSold"],"mappings":"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","file":"particle-system.min.js","sourcesContent":["var Brickout = {\r\n  pages: {},\r\n};\r\n\r\n// ------------------------------------------------------------------\r\n//\r\n// This namespace provides the rendering code for the game.\r\n//\r\n// ------------------------------------------------------------------\r\nBrickout.graphics = (function () {\r\n  \"use strict\";\r\n\r\n  var canvas = document.getElementById(\"canvas-main\"),\r\n    context = canvas.getContext(\"2d\");\r\n\r\n  //\r\n  // Place a 'clear' function on the Canvas prototype, this makes it a part\r\n  // of the canvas, rather than making a function that calls and does it.\r\n  CanvasRenderingContext2D.prototype.clear = function () {\r\n    this.save();\r\n    this.setTransform(1, 0, 0, 1, 0, 0);\r\n    this.clearRect(0, 0, canvas.width, canvas.height);\r\n    this.restore();\r\n  };\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Public method that allows the client code to clear the canvas.\r\n  //\r\n  //------------------------------------------------------------------\r\n  function clear() {\r\n    context.clear();\r\n  }\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Draws a rectangle\r\n  //\r\n  //------------------------------------------------------------------\r\n  function drawRectangle(spec) {\r\n    context.fillStyle = spec.fill;\r\n    context.fillRect(spec.x, spec.y, spec.width, spec.height);\r\n\r\n    context.strokeStyle = spec.stroke;\r\n    context.strokeRect(spec.x, spec.y, spec.width, spec.height);\r\n  }\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Returns the width of the specified text, in pixels.\r\n  //\r\n  //------------------------------------------------------------------\r\n  function measureTextWidth(spec) {\r\n    context.save();\r\n\r\n    context.font = spec.font;\r\n    context.fillStyle = spec.fill;\r\n    if (spec.hasOwnProperty(\"stroke\")) {\r\n      context.strokeStyle = spec.stroke;\r\n    }\r\n    var width = context.measureText(spec.text).width;\r\n\r\n    context.restore();\r\n\r\n    return width;\r\n  }\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Returns the height of the specified text, in pixels.\r\n  //\r\n  //------------------------------------------------------------------\r\n  function measureTextHeight(spec) {\r\n    var saveText = spec.text;\r\n\r\n    spec.text = \"m\"; // Clever trick to get font height\r\n    context.save();\r\n\r\n    context.font = spec.font;\r\n    context.fillStyle = spec.fill;\r\n    if (spec.hasOwnProperty(\"stroke\")) {\r\n      context.strokeStyle = spec.stroke;\r\n    }\r\n    var width = context.measureText(spec.text).width;\r\n    spec.text = saveText;\r\n\r\n    context.restore();\r\n\r\n    return width;\r\n  }\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Draw some text to the screen\r\n  //\r\n  //------------------------------------------------------------------\r\n  function drawText(spec) {\r\n    context.save();\r\n\r\n    (context.font = spec.font), (context.fillStyle = spec.fill);\r\n    if (spec.hasOwnProperty(\"stroke\")) {\r\n      context.strokeStyle = spec.stroke;\r\n    }\r\n    context.textBaseline = \"top\";\r\n\r\n    context.fillText(spec.text, spec.position.x, spec.position.y);\r\n    context.strokeText(spec.text, spec.position.x, spec.position.y);\r\n\r\n    context.restore();\r\n  }\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Expose an ability to draw an image/texture on the canvas.\r\n  //\r\n  //------------------------------------------------------------------\r\n  function drawImage(spec) {\r\n    context.save();\r\n\r\n    context.translate(spec.center.x, spec.center.y);\r\n    context.rotate(spec.rotation);\r\n    context.translate(-spec.center.x, -spec.center.y);\r\n\r\n    context.drawImage(\r\n      spec.image,\r\n      spec.center.x - spec.size / 2,\r\n      spec.center.y - spec.size / 2,\r\n      spec.size,\r\n      spec.size\r\n    );\r\n\r\n    context.restore();\r\n  }\r\n\r\n  return {\r\n    clear: clear,\r\n    drawRectangle: drawRectangle,\r\n    drawText: drawText,\r\n    drawImage: drawImage,\r\n    measureTextWidth: measureTextWidth,\r\n    measureTextHeight: measureTextHeight,\r\n  };\r\n})();\r\n\r\nfunction ParticleSystem(graphics, image1) {\r\n  \"use strict\";\r\n  var that = {},\r\n    image = image1,\r\n    particles = {}, // Set of all active particles\r\n    nextName = 1; // Unique identifier for the next particle\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Create a bunch of particles over the surface of the brick.\r\n  //\r\n  //------------------------------------------------------------------\r\n  that.createEffect = function (spec) {\r\n    var x,\r\n      y,\r\n      deltaX = (spec.right - spec.left) / 10,\r\n      deltaY = (spec.bottom - spec.top) / 10, // bottom - top : remember that Y is position down the screen\r\n      posX,\r\n      posY;\r\n\r\n    spec.speed = {\r\n      mean: 20, // pixels per second\r\n      stdev: 2,\r\n    };\r\n    spec.lifetime = {\r\n      mean: spec.mean,\r\n      stdev: spec.stdev,\r\n    };\r\n\r\n    //\r\n    // Create particles over the area of the brick\r\n    for (x = 0; x < spec.count; x++) {\r\n      posX = Math.trunc(spec.left + x * deltaX);\r\n      for (y = 0; y < spec.count; y++) {\r\n        posY = Math.trunc(spec.top + y * deltaY);\r\n        //\r\n        // Assign a unique name to each particle\r\n        particles[nextName++] = makeParticle(spec, posX, posY);\r\n      }\r\n    }\r\n  };\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // This creates one new particle\r\n  //\r\n  //------------------------------------------------------------------\r\n  function makeParticle(spec, x, y) {\r\n    var p = {\r\n      image: image1,\r\n      size: Math.abs(Random.nextGaussian(10, 4)),\r\n      center: { x: x, y: y },\r\n      direction: { x: spec.xDirection, y: spec.yDirection },\r\n      speed: Math.abs(Random.nextGaussian(spec.speed.mean, spec.speed.stdev)), // pixels per second\r\n      rotation: 0,\r\n      lifetime: Math.abs(\r\n        Random.nextGaussian(spec.lifetime.mean, spec.lifetime.stdev)\r\n      ), // How long the particle should live, in milliseconds\r\n      alive: 0, // How long the particle has been alive, in milliseconds\r\n    };\r\n    if (spec.guassian) {\r\n      p.direction = { x: 0, y: Math.abs(Random.nextGaussian(1, 0.25)) };\r\n    }\r\n    return p;\r\n  }\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Update the state of all particles.  This includes removing any that\r\n  // have exceeded their lifetime.\r\n  //\r\n  //------------------------------------------------------------------\r\n  that.update = function (elapsedTime) {\r\n    var removeMe = [],\r\n      value,\r\n      particle;\r\n    for (value in particles) {\r\n      if (particles.hasOwnProperty(value)) {\r\n        particle = particles[value];\r\n        //\r\n        // Update its position\r\n        particle.center.x +=\r\n          (elapsedTime / 1000) * particle.speed * particle.direction.x;\r\n        particle.center.y +=\r\n          (elapsedTime / 1000) * particle.speed * particle.direction.y;\r\n\r\n        //\r\n        // Rotate proportional to its speed\r\n        particle.rotation += particle.speed / 500;\r\n\r\n        //\r\n        // Update how long it has been alive\r\n        particle.alive += elapsedTime;\r\n\r\n        //\r\n        // If the lifetime has expired, identify it for removal\r\n        if (particle.alive > particle.lifetime) {\r\n          removeMe.push(value);\r\n        }\r\n      }\r\n    }\r\n\r\n    //\r\n    // Remove all of the expired particles\r\n    for (particle = 0; particle < removeMe.length; particle++) {\r\n      delete particles[removeMe[particle]];\r\n    }\r\n  };\r\n\r\n  //------------------------------------------------------------------\r\n  //\r\n  // Initially empty, will be replaced when the texture is loaded\r\n  //\r\n  //------------------------------------------------------------------\r\n  that.render = function () {};\r\n\r\n  image = image1;\r\n  that.render = function () {\r\n    var value, particle;\r\n\r\n    for (value in particles) {\r\n      if (particles.hasOwnProperty(value)) {\r\n        particle = particles[value];\r\n        graphics.drawImage(particle);\r\n      }\r\n    }\r\n  };\r\n\r\n  return that;\r\n}\r\n\r\nlet particleSystem1 = ParticleSystem(\r\n  Brickout.graphics,\r\n  GameState.assets[\"smoke\"]\r\n);\r\nlet particleSystem2 = ParticleSystem(\r\n  Brickout.graphics,\r\n  GameState.assets[\"fire\"]\r\n);\r\n\r\nfunction makeParticle2(\r\n  left,\r\n  right,\r\n  top,\r\n  bottom,\r\n  count,\r\n  xDirection,\r\n  yDirection,\r\n  mean,\r\n  stdev,\r\n  gaussian\r\n) {\r\n  particleSystem2.createEffect({\r\n    left: left,\r\n    right: right,\r\n    top: top,\r\n    bottom: bottom,\r\n    count: count,\r\n    xDirection: xDirection,\r\n    yDirection: yDirection,\r\n    mean: mean,\r\n    stdev: stdev,\r\n    gaussian: gaussian,\r\n  });\r\n}\r\n\r\nfunction makeParticle1(\r\n  left,\r\n  right,\r\n  top,\r\n  bottom,\r\n  count,\r\n  xDirection,\r\n  yDirection,\r\n  mean,\r\n  stdev,\r\n  gaussian\r\n) {\r\n  particleSystem1.createEffect({\r\n    left: left,\r\n    right: right,\r\n    top: top,\r\n    bottom: bottom,\r\n    count: count,\r\n    xDirection: xDirection,\r\n    yDirection: yDirection,\r\n    mean: mean,\r\n    stdev: stdev,\r\n    gaussian: gaussian,\r\n  });\r\n}\r\n\r\nfunction creepDied(x, y) {\r\n  makeParticle2(x, x + 25, y, y + 25, 10, 0, 0, 800, 200, true);\r\n}\r\n\r\nfunction trailFollow(x, y, xDirection, yDirection) {\r\n  makeParticle1(\r\n    x,\r\n    x + 5,\r\n    y,\r\n    y + 5,\r\n    1,\r\n    xDirection,\r\n    yDirection,\r\n    1000,\r\n    250,\r\n    false\r\n  );\r\n}\r\n\r\nfunction bombHit(x, y, radius) {\r\n  makeParticle2(\r\n    x - radius / 4,\r\n    x + radius / 4,\r\n    y - radius / 4,\r\n    y + radius / 4,\r\n    5,\r\n    0,\r\n    0,\r\n    1000,\r\n    200,\r\n    true\r\n  );\r\n}\r\n\r\nfunction towerSold(x, y) {\r\n  makeParticle2(x, x + 50, y, y + 50, 5, 0, 0, 1000, 200, true);\r\n}\r\n"]}