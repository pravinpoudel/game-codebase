{"version":3,"sources":["movingevents.js"],"names":["MovingEvents","specs","_classCallCheck","this","moveForward","bind","rotateLeft","rotateRight","moveRight","moveLeft","moveTop","moveDown","runTop","runDown","runRight","runLeft","update","x","moveRate","elapsedTime","yDirection","xDirection","center","y","vectorX","Math","cos","rotation","vectorY","sin","console","log","rotateRate","canvas","width","size","height","continousSpeed"],"mappings":"uZAAMA,wBACJ,SAAAA,EAAYC,GAAOC,gBAAAC,KAAAH,GACjBG,KAAKF,MAAQA,EACbE,KAAKC,YAAcD,KAAKC,YAAYC,KAAKF,MACzCA,KAAKG,WAAaH,KAAKG,WAAWD,KAAKF,MACvCA,KAAKI,YAAcJ,KAAKI,YAAYF,KAAKF,MACzCA,KAAKK,UAAYL,KAAKK,UAAUH,KAAKF,MACrCA,KAAKM,SAAWN,KAAKM,SAASJ,KAAKF,MAPjCH,KAAAA,QAQaG,KAAKO,QAAQL,KAAKF,MACjCA,KAAKQ,SAAWR,KAAKQ,SAASN,KAAKF,MACnCA,KAAKS,OAAST,KAAKS,OAAOP,KAAKF,MATjCA,KAAAU,QAAAV,KAAYF,QAAOI,KAAAF,MAAAA,KAAAW,SAAAX,KAAAW,SAAAT,KAAAF,MAYjBA,KAAKY,QAAUZ,KAAKY,QAAQV,KAAKF,MAXjCA,KAAKF,OAAQA,KAAbe,OAAAX,KAAAF,MACAA,KAAKC,WAALH,EAAwBG,WACxBD,KAAKG,WAAaL,EAAKK,kEAGlBG,GACLN,KAAKO,MAAAA,OAAUO,GAAKP,KAAQL,MAAKa,SAAjCC,mCAGKN,GACLV,KAAKW,MAAAA,OAAWG,GAAKH,KAAAA,MAALI,SAAhBC,kCAGKC,GACLjB,KAAKkB,MAAAA,OAAapB,GAAKE,KAACkB,MAAxBH,SAAAC,mCAeOA,GACPhB,KAAKF,MAAMqB,OAAOC,GAAKpB,KAAKF,MAAMiB,SAAWC,mCAI7ChB,KAAKiB,YAAc,EACnBjB,KAAKkB,WAAa,oCAIlBlB,KAAKiB,WAAa,EAClBjB,KAAKkB,WAAa,qCAIlBlB,KAAKkB,WAAa,EAClBlB,KAAKiB,WAAa,oCAIlBjB,KAAKkB,YAAc,EACnBlB,KAAKiB,WAAa,sCAdnBD,GAmBC,IAAIK,EAAUC,KAAKC,IAAIvB,KAAKF,MAAM0B,UAC9BC,EAAUH,KAAKI,IAAI1B,KAAKF,MAAM0B,UAClCxB,KAAKF,MAAMqB,OAAOL,GAAKO,EAnBjBL,KAAalB,MAAAiB,SAAAC,EACnBhB,KAAAF,MAAKmB,OAALG,GAAAK,EAAAzB,KAAAF,MAAAiB,SAAAC,qCAcFA,GAoBEW,QAAQC,IAAI,iBACZ5B,KAAKF,MAAM0B,UAAYxB,KAAKF,MAAM+B,WAAab,sCAnB3CK,GACJM,QAAIF,IAAAA,kBACJzB,KAAAF,MAAKA,UAALE,KAAuBqB,MAAOQ,WAAcd,uCAK5C,GAAAf,KAAAF,MAAAqB,OAAAL,EAAAgB,OAAAC,MAAA/B,KAAAF,MAAAkC,KAAAlB,EAAA,EACA,OAAA,wCAKA,GAAAd,KAAAF,MAAAqB,OAAAC,EAAAU,OAAAG,OAAAjC,KAAAF,MAAAkC,KAAAZ,EAAA,EACA,OAAA,iCAyBKJ,GArBL,EAAAW,KAAO7B,MAAKoC,iBACZlC,KAAKF,MAAM0B,OAAAA,GACZxB,KAAAkB,WAAAlB,KAAAF,MAAAoC,eAAAlB,EAAA,KAuBGhB,KAAKF,MAAMqB,OAAOC,GAChBpB,KAAKiB,WAAajB,KAAKF,MAAMoC,eAAiBlB,EAAc,MApBhEhB,KAAKF,MAAM0B,OAAXV,EAAuBd,KAAKF,MAAM+B,KAAAA,EAAX,IACxB7B,KAAAF,MAAAqB,OAAAL,EAAAd,KAAAF,MAAAkC,KAAAlB,EAAA,GASCd,KAAIF,MAAKA,OAAMqB,EAAXnB,KAAsB8B,MAAOG,KAAPb,EAAgB,IACxCpB,KAAAF,MAAOqB,OAAPC,EAAApB,KAAAF,MAAAkC,KAAAZ,EAAA","file":"movingevents.min.js","sourcesContent":["class MovingEvents {\r\n  constructor(specs) {\r\n    this.specs = specs;\r\n    this.moveForward = this.moveForward.bind(this);\r\n    this.rotateLeft = this.rotateLeft.bind(this);\r\n    this.rotateRight = this.rotateRight.bind(this);\r\n    this.moveRight = this.moveRight.bind(this);\r\n    this.moveLeft = this.moveLeft.bind(this);\r\n    this.moveTop = this.moveTop.bind(this);\r\n    this.moveDown = this.moveDown.bind(this);\r\n    this.runTop = this.runTop.bind(this);\r\n    this.runDown = this.runDown.bind(this);\r\n    this.runRight = this.runRight.bind(this);\r\n    this.runLeft = this.runLeft.bind(this);\r\n    this.update = this.update.bind(this);\r\n    this.yDirection = specs.yDirection;\r\n    this.xDirection = specs.xDirection;\r\n  }\r\n\r\n  moveRight(elapsedTime) {\r\n    this.specs.center.x += this.specs.moveRate * elapsedTime;\r\n  }\r\n\r\n  moveLeft(elapsedTime) {\r\n    this.specs.center.x -= this.specs.moveRate * elapsedTime;\r\n  }\r\n\r\n  moveTop(elapsedTime) {\r\n    this.specs.center.y -= this.specs.moveRate * elapsedTime;\r\n  }\r\n\r\n  moveDown(elapsedTime) {\r\n    this.specs.center.y += this.specs.moveRate * elapsedTime;\r\n  }\r\n\r\n  runTop(elapsedTime) {\r\n    this.yDirection = -1;\r\n    this.xDirection = 0;\r\n  }\r\n\r\n  runDown(elapsedTime) {\r\n    this.yDirection = 1;\r\n    this.xDirection = 0;\r\n  }\r\n\r\n  runRight(elapsedTime) {\r\n    this.xDirection = 1.0;\r\n    this.yDirection = 0;\r\n  }\r\n\r\n  runLeft(elapsedTime) {\r\n    this.xDirection = -1.0;\r\n    this.yDirection = 0.0;\r\n  }\r\n\r\n  //gaze direction movement\r\n  moveForward(elapsedTime) {\r\n    let vectorX = Math.cos(this.specs.rotation);\r\n    let vectorY = Math.sin(this.specs.rotation);\r\n    this.specs.center.x += vectorX * this.specs.moveRate * elapsedTime;\r\n    this.specs.center.y += vectorY * this.specs.moveRate * elapsedTime;\r\n    //limiting the movement in each direction\r\n    //  this.specs.center.x =\r\n    //     this.specs.center.x >= canvas.clientWidth - 50\r\n    //       ? canvas.clientWidth - 50\r\n    //       : this.specs.center.x;\r\n    //   this.specs.center.x = this.specs.center.x <= 10 ? 10 : this.specs.center.x;\r\n    //   this.specs.center.y =\r\n    //     this.specs.center.y >= canvas.clientHeight - 50\r\n    //       ? canvas.clientHeight - 50\r\n    //       : this.specs.center.x;\r\n    //   this.specs.center.y = this.specs.center.y <= 20 ? 20 : this.specs.center.x;\r\n  }\r\n\r\n  rotateLeft(elapsedTime) {\r\n    console.log(\"rotating left\");\r\n    this.specs.rotation -= this.specs.rotateRate * elapsedTime;\r\n  }\r\n\r\n  rotateRight(elapsedTime) {\r\n    console.log(\"rotating right\");\r\n    this.specs.rotation += this.specs.rotateRate * elapsedTime;\r\n  }\r\n\r\n  reachRight() {\r\n    if (this.specs.center.x > canvas.width - this.specs.size.x / 2) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  reachBottom() {\r\n    if (this.specs.center.y > canvas.height - this.specs.size.y / 2) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    if (this.specs.continousSpeed > 0) {\r\n      this.specs.center.x +=\r\n        this.xDirection * this.specs.continousSpeed * elapsedTime * 0.001;\r\n      this.specs.center.y +=\r\n        this.yDirection * this.specs.continousSpeed * elapsedTime * 0.001;\r\n    }\r\n\r\n    if (this.specs.center.x < this.specs.size.x / 2) {\r\n      this.specs.center.x = this.specs.size.x / 2;\r\n    }\r\n\r\n    // if (this.specs.center.x > canvas.width - this.specs.size.x / 2) {\r\n    //   this.specs.center.x = canvas.width - this.specs.size.x / 2;\r\n    // }\r\n\r\n    // if (this.specs.center.y > canvas.height - this.specs.size.y / 2) {\r\n    //   this.specs.center.y = canvas.height - this.specs.size.y / 2;\r\n    // }\r\n\r\n    if (this.specs.center.y < this.specs.size.y / 2) {\r\n      this.specs.center.y = this.specs.size.y / 2;\r\n    }\r\n\r\n    // if (that.right > spec.view.width) {\r\n    //   spec.direction.x *= -1;\r\n    // }\r\n\r\n    // if (that.left < 0) {\r\n    //   spec.direction.x *= -1;\r\n    // }\r\n\r\n    // if (that.top < 0) {\r\n    //   spec.direction.y *= -1;\r\n    // }\r\n\r\n    // if (that.bottom > spec.view.height) {\r\n    //   //\r\n    //   // Indicate the ball fell through the bottom\r\n    //   missed = true;\r\n    // }\r\n  }\r\n}\r\n"]}