{"version":3,"sources":["loader.js"],"names":["progressSlice","loaderWidth","loader","scriptOrder","scripts","message","onComplete","href","window","key","source","require","entry","location","dir","substring","lastIndexOf","assetOrder","loadAssets","assets","loaderParent","canvas","document","getElementById","context","getContext","console","length","Math","floor","totalItems","loadScripts","timerId","setTimeout","clearInterval","style","width","log","loaderInitiate","xhr","open","onSuccess","onError","onload","asset","URL","createObjectURL","XMLHttpRequest","fileExtension","substr","responseType","status","Image","Audio","mainComplete","GameState","menu","initialize","revokeObjectURL","src","response","send","loadAsset","shift","error","display"],"mappings":"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","file":"loader.min.js","sourcesContent":["let progressSlice;\r\nlet loaderWidth = 1;\r\n\r\nloader = (function () {\r\n  \"use strict\";\r\n  let scriptOrder = [\r\n    {\r\n      scripts: [\"random\"],\r\n      message: \"Random number generator loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"highscore\"],\r\n      message: \"highscore intialized\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"particleSystem\"],\r\n      message: \"particle system is intialized\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"screens/about\"],\r\n      message: \"about is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"screens/game-play\"],\r\n      message: \" game-play is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"screens/help\"],\r\n      message: \"help is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"screens/highscores\"],\r\n      message: \"highscore is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"screens/mainmenu\"],\r\n      message: \"mainmenu is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"screens/menumanager\"],\r\n      message: \"menumanager is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"input/input\"],\r\n      message: \"input is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"gamemodel\"],\r\n      message: \"modelAnimation is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"movingevents\"],\r\n      message: \"moving object is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"input/input\"],\r\n      message: \"input is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"sound\"],\r\n      message: \"sound intialized\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"utility/initialize\"],\r\n      message: \"game menu intialized\",\r\n      onComplete: null,\r\n    },\r\n  ];\r\n  var href = window.location.href;\r\n  var dir = href.substring(0, href.lastIndexOf(\"/\")) + \"/\";\r\n\r\n  let assetOrder = [\r\n    {\r\n      key: \"fire\",\r\n      source: dir + \"assets/fire.png\",\r\n    },\r\n    {\r\n      key: \"smoke\",\r\n      source: dir + \"assets/smoke.png\",\r\n    },\r\n    // {\r\n    //   key: \"end audio\",\r\n    //   source: dir + \"assets/sounds/game_end.mp3\",\r\n    // },\r\n  ];\r\n\r\n  function loadScripts(scripts, onComplete) {\r\n    if (scripts.length > 0) {\r\n      let entry = scripts[0];\r\n      require(entry.scripts, function () {\r\n        if (entry.onComplete) {\r\n          entry.onComplete();\r\n        }\r\n        scripts.shift(); // Alternatively: scripts.splice(0, 1);\r\n        loaderWidth += progressSlice;\r\n        loadScripts(scripts, onComplete);\r\n      });\r\n    } else {\r\n      onComplete();\r\n    }\r\n  }\r\n\r\n  function loadAssets(assets, onSuccess, onError, onComplete) {\r\n    //\r\n    // When we run out of things to load, that is when we call onComplete.\r\n    if (assets.length > 0) {\r\n      let entry = assets[0];\r\n      loadAsset(\r\n        entry.source,\r\n        function (asset) {\r\n          onSuccess(entry, asset);\r\n          assets.shift(); // Alternatively: assets.splice(0, 1);\r\n          loaderWidth += progressSlice;\r\n          loadAssets(assets, onSuccess, onError, onComplete);\r\n        },\r\n        function (error) {\r\n          console.log(error.message);\r\n          onError(error);\r\n          assets.shift(); // Alternatively: assets.splice(0, 1);\r\n          loadAssets(assets, onSuccess, onError, onComplete);\r\n        }\r\n      );\r\n    } else {\r\n      onComplete();\r\n    }\r\n  }\r\n\r\n  function loadAsset(source, onSuccess, onError) {\r\n    let xhr = new XMLHttpRequest();\r\n    let fileExtension = source.substr(source.lastIndexOf(\".\") + 1); // Source: http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript\r\n\r\n    if (fileExtension) {\r\n      xhr.open(\"GET\", source, true);\r\n      xhr.responseType = \"blob\";\r\n\r\n      xhr.onload = function () {\r\n        let asset = null;\r\n        if (xhr.status === 200) {\r\n          if (fileExtension === \"png\" || fileExtension === \"jpg\") {\r\n            asset = new Image();\r\n          } else if (fileExtension === \"mp3\") {\r\n            asset = new Audio();\r\n          } else {\r\n            if (onError) {\r\n              onError(\"Unknown file extension: \" + fileExtension);\r\n            }\r\n          }\r\n          asset.onload = function () {\r\n            window.URL.revokeObjectURL(asset.src);\r\n            if (onSuccess) {\r\n              onSuccess(asset);\r\n            }\r\n          };\r\n          asset.src = window.URL.createObjectURL(xhr.response);\r\n        } else {\r\n          if (onError) {\r\n            onError(\"Failed to retrieve: \" + source);\r\n          }\r\n        }\r\n      };\r\n    } else {\r\n      if (onError) {\r\n        onError(\"Unknown file extension: \" + fileExtension);\r\n      }\r\n    }\r\n\r\n    xhr.send();\r\n  }\r\n\r\n  function mainComplete() {\r\n    canvas = document.getElementById(\"canvas-main\");\r\n    context = canvas.getContext(\"2d\");\r\n    // const game1 = new Game();\r\n    GameState.menu.initialize();\r\n  }\r\n\r\n  function loaderInitiate() {\r\n    let totalItems = assetOrder.length + scriptOrder.length;\r\n    progressSlice = Math.floor(100 / totalItems);\r\n    let loader = document.getElementById(\"loader\");\r\n    let timerId = setTimeout(loop, 1000);\r\n\r\n    function loop() {\r\n      if (loaderWidth >= 100) {\r\n        clearInterval(timerId);\r\n      } else {\r\n        loader.style.width = loaderWidth + \"%\";\r\n      }\r\n      console.log(loaderWidth);\r\n    }\r\n  }\r\n\r\n  function loaderHide() {\r\n    let loaderParent = document.getElementById(\"loader_wrapper\");\r\n    loaderParent.style.display = \"none\";\r\n  }\r\n\r\n  loaderInitiate();\r\n  loadAssets(\r\n    assetOrder,\r\n    function (source, asset) {\r\n      // Store it on success\r\n      GameState.assets[source.key] = asset;\r\n    },\r\n    function (error) {\r\n      console.log(error);\r\n    },\r\n    function () {\r\n      loadScripts(scriptOrder, mainComplete);\r\n    }\r\n  );\r\n  loaderHide();\r\n})();\r\n"]}