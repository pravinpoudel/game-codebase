{"version":3,"sources":["loader.js"],"names":["progressSlice","loaderWidth","loader","scriptOrder","scripts","message","onComplete","dir","href","assetOrder","require","entry","shift","window","location","substring","lastIndexOf","assets","GameState","canvas","document","getElementById","console","log","getContext","loadScripts","totalItems","length","Math","floor","timerId","setTimeout","clearInterval","style","width","loaderInitiate","loadAssets","fileExtension","onSuccess","asset","Audio","source","onError","xhr","XMLHttpRequest","substr","open","send","onload","mainComplete","Image","initialize","src","loop","URL","createObjectURL","response","loaderParent","loadAsset","revokeObjectURL","error","key","display"],"mappings":"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","file":"loader.min.js","sourcesContent":["let progressSlice;\r\nlet loaderWidth = 1;\r\n\r\nloader = (function () {\r\n  \"use strict\";\r\n  let scriptOrder = [\r\n    {\r\n      scripts: [\"random\"],\r\n      message: \"Random number generator loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"highscore\"],\r\n      message: \"highscore intialized\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"particleSystem\"],\r\n      message: \"particle system is intialized\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"utility/enemyCreator\"],\r\n      message: \"enemy creator system is intialized\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"screens/about\"],\r\n      message: \"about is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"screens/game-play\"],\r\n      message: \" game-play is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"screens/help\"],\r\n      message: \"help is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"screens/highscores\"],\r\n      message: \"highscore is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"screens/control\"],\r\n      message: \"control is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"screens/mainmenu\"],\r\n      message: \"mainmenu is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"screens/menumanager\"],\r\n      message: \"menumanager is loaded\",\r\n      onComplete: null,\r\n    },\r\n    {\r\n      scripts: [\"tower\"],\r\n      message: \"enemy is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"sprite\"],\r\n      message: \"enemy is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"enemy\"],\r\n      message: \"enemy is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"enemyController\"],\r\n      message: \"enemyController is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"input/input\"],\r\n      message: \"input is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"gamemodel\"],\r\n      message: \"modelAnimation is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"movingevents\"],\r\n      message: \"moving object is loaded\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"sound\"],\r\n      message: \"sound intialized\",\r\n      onComplete: null,\r\n    },\r\n\r\n    {\r\n      scripts: [\"utility/initialize\"],\r\n      message: \"game menu intialized\",\r\n      onComplete: null,\r\n    },\r\n  ];\r\n  var href = window.location.href;\r\n  var dir = href.substring(0, href.lastIndexOf(\"/\")) + \"/\";\r\n\r\n  let assetOrder = [\r\n    // {\r\n    //   key: \"fire\",\r\n    //   source: dir + \"assets/fire.png\",\r\n    // },\r\n    // {\r\n    //   key: \"smoke\",\r\n    //   source: dir + \"assets/smoke.png\",\r\n    // },\r\n    // {\r\n    //   key: \"end audio\",\r\n    //   source: dir + \"assets/sounds/game_end.mp3\",\r\n    // },\r\n  ];\r\n\r\n  function loadScripts(scripts, onComplete) {\r\n    if (scripts.length > 0) {\r\n      let entry = scripts[0];\r\n      require(entry.scripts, function () {\r\n        if (entry.onComplete) {\r\n          entry.onComplete();\r\n        }\r\n        scripts.shift(); // Alternatively: scripts.splice(0, 1);\r\n        loaderWidth += progressSlice;\r\n        loadScripts(scripts, onComplete);\r\n      });\r\n    } else {\r\n      onComplete();\r\n    }\r\n  }\r\n\r\n  function loadAssets(assets, onSuccess, onError, onComplete) {\r\n    //\r\n    // When we run out of things to load, that is when we call onComplete.\r\n    if (assets.length > 0) {\r\n      let entry = assets[0];\r\n      loadAsset(\r\n        entry.source,\r\n        function (asset) {\r\n          onSuccess(entry, asset);\r\n          assets.shift(); // Alternatively: assets.splice(0, 1);\r\n          loaderWidth += progressSlice;\r\n          loadAssets(assets, onSuccess, onError, onComplete);\r\n        },\r\n        function (error) {\r\n          console.log(error.message);\r\n          onError(error);\r\n          assets.shift(); // Alternatively: assets.splice(0, 1);\r\n          loadAssets(assets, onSuccess, onError, onComplete);\r\n        }\r\n      );\r\n    } else {\r\n      onComplete();\r\n    }\r\n  }\r\n\r\n  function loadAsset(source, onSuccess, onError) {\r\n    let xhr = new XMLHttpRequest();\r\n    let fileExtension = source.substr(source.lastIndexOf(\".\") + 1); // Source: http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript\r\n\r\n    if (fileExtension) {\r\n      xhr.open(\"GET\", source, true);\r\n      xhr.responseType = \"blob\";\r\n\r\n      xhr.onload = function () {\r\n        let asset = null;\r\n        if (xhr.status === 200) {\r\n          if (fileExtension === \"png\" || fileExtension === \"jpg\") {\r\n            asset = new Image();\r\n          } else if (fileExtension === \"mp3\") {\r\n            asset = new Audio();\r\n          } else {\r\n            if (onError) {\r\n              onError(\"Unknown file extension: \" + fileExtension);\r\n            }\r\n          }\r\n          asset.onload = function () {\r\n            window.URL.revokeObjectURL(asset.src);\r\n            if (onSuccess) {\r\n              onSuccess(asset);\r\n            }\r\n          };\r\n          asset.src = window.URL.createObjectURL(xhr.response);\r\n        } else {\r\n          if (onError) {\r\n            onError(\"Failed to retrieve: \" + source);\r\n          }\r\n        }\r\n      };\r\n    } else {\r\n      if (onError) {\r\n        onError(\"Unknown file extension: \" + fileExtension);\r\n      }\r\n    }\r\n\r\n    xhr.send();\r\n  }\r\n\r\n  function mainComplete() {\r\n    canvas = document.getElementById(\"canvas-main\");\r\n    context = canvas.getContext(\"2d\");\r\n    // const game1 = new Game();\r\n    GameState.menu.initialize();\r\n  }\r\n\r\n  function loaderInitiate() {\r\n    let totalItems = assetOrder.length + scriptOrder.length;\r\n    console.log(\"hello\");\r\n    progressSlice = Math.floor(100 / totalItems);\r\n    let loader = document.getElementById(\"loader\");\r\n    let timerId = setTimeout(loop, 1000);\r\n\r\n    function loop() {\r\n      if (loaderWidth >= 100) {\r\n        clearInterval(timerId);\r\n      } else {\r\n        loader.style.width = loaderWidth + \"%\";\r\n      }\r\n      console.log(loaderWidth);\r\n    }\r\n  }\r\n\r\n  function loaderHide() {\r\n    let loaderParent = document.getElementById(\"loader_wrapper\");\r\n    loaderParent.style.display = \"none\";\r\n  }\r\n\r\n  loaderInitiate();\r\n  loadAssets(\r\n    assetOrder,\r\n    function (source, asset) {\r\n      // Store it on success\r\n      GameState.assets[source.key] = asset;\r\n    },\r\n    function (error) {\r\n      console.log(error);\r\n    },\r\n    function () {\r\n      loadScripts(scriptOrder, mainComplete);\r\n    }\r\n  );\r\n  loaderHide();\r\n})();\r\n"]}